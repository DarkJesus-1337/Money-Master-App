<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/MainActivity.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.pixelpioneer.moneymaster.ui.navigation.MoneyMasterNavHost&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            MoneyMasterTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    MoneyMasterNavHost(navController = navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.pixelpioneer.moneymaster.ui.navigation.MoneyMasterNavHost&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;/**&#10; * The main entry point of the MoneyMaster application.&#10; *&#10; * Sets up the Compose UI, applies the app theme, and initializes the navigation host.&#10; */&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            MoneyMasterTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    MoneyMasterNavHost(navController = navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/MoneyMasterApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/MoneyMasterApplication.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster&#10;&#10;import android.app.Application&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import dagger.hilt.android.HiltAndroidApp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.SupervisorJob&#10;import kotlinx.coroutines.launch&#10;import timber.log.Timber&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Application class for MoneyMaster.&#10; *&#10; * Initializes the database and ensures default categories are present on startup.&#10; */&#10;@HiltAndroidApp&#10;class MoneyMasterApplication : Application() {&#10;&#10;    @Inject&#10;    lateinit var categoryRepository: CategoryRepository&#10;&#10;    private val applicationScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)&#10;&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;&#10;        initializeDatabase()&#10;    }&#10;&#10;    private fun initializeDatabase() {&#10;        applicationScope.launch {&#10;            try {&#10;                categoryRepository.initializeDefaultCategoriesAndRepairDatabase()&#10;                Timber.d(&quot;Datenbank erfolgreich initialisiert&quot;)&#10;            } catch (e: Exception) {&#10;                Timber.e(e, &quot;Fehler bei der Initialisierung der Datenbank&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster&#10;&#10;import android.app.Application&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import dagger.hilt.android.HiltAndroidApp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.SupervisorJob&#10;import kotlinx.coroutines.launch&#10;import timber.log.Timber&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Application class for MoneyMaster.&#10; *&#10; * Initializes the database and ensures default categories are present on startup.&#10; */&#10;@HiltAndroidApp&#10;class MoneyMasterApplication : Application() {&#10;&#10;    @Inject&#10;    lateinit var categoryRepository: CategoryRepository&#10;&#10;    private val applicationScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)&#10;&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;&#10;        initializeDatabase()&#10;    }&#10;&#10;    private fun initializeDatabase() {&#10;        applicationScope.launch {&#10;            try {&#10;                categoryRepository.initializeDefaultCategoriesAndRepairDatabase()&#10;                Timber.d(&quot;Database initialized successfully&quot;)&#10;            } catch (e: Exception) {&#10;                Timber.e(e, &quot;Error initializing the database&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/AppModule.kt" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import com.pixelpioneer.moneymaster.core.initialization.AppInitializer&#10;import com.pixelpioneer.moneymaster.core.initialization.CategoryInitializer&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.multibindings.IntoSet&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    @Provides&#10;    @IntoSet&#10;    @Singleton&#10;    fun provideCategoryInitializer(categoryRepository: CategoryRepository): AppInitializer {&#10;        return CategoryInitializer(categoryRepository)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/DatabaseModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/DatabaseModule.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.pixelpioneer.moneymaster.data.local.db.MoneyMasterDatabase&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.BudgetDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt Module für Database und DAOs.&#10; * Dieses Modul ist nur für die Bereitstellung der Datenbank und der DAOs zuständig.&#10; * Die Repositories werden im RepositoryModule bereitgestellt.&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideMoneyMasterDatabase(&#10;        @ApplicationContext context: Context&#10;    ): MoneyMasterDatabase {&#10;        return Room.databaseBuilder(&#10;            context,&#10;            MoneyMasterDatabase::class.java,&#10;            &quot;money_master_database&quot;&#10;        ).build()&#10;    }&#10;&#10;    @Provides&#10;    fun provideTransactionDao(database: MoneyMasterDatabase): TransactionDao {&#10;        return database.transactionDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideCategoryDao(database: MoneyMasterDatabase): CategoryDao {&#10;        return database.categoryDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideBudgetDao(database: MoneyMasterDatabase): BudgetDao {&#10;        return database.budgetDao()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.pixelpioneer.moneymaster.data.local.db.MoneyMasterDatabase&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.BudgetDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt Module for Database and DAOs.&#10; * This module is only responsible for providing the database and DAOs.&#10; * The repositories are provided in the RepositoryModule.&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;&#10;    /**&#10;     * Provides the singleton instance of the MoneyMaster database.&#10;     *&#10;     * @param context The application context used to build the database.&#10;     * @return An instance of [MoneyMasterDatabase].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideMoneyMasterDatabase(&#10;        @ApplicationContext context: Context&#10;    ): MoneyMasterDatabase {&#10;        return Room.databaseBuilder(&#10;            context,&#10;            MoneyMasterDatabase::class.java,&#10;            &quot;money_master_database&quot;&#10;        ).build()&#10;    }&#10;&#10;    /**&#10;     * Provides the TransactionDao for accessing transaction data.&#10;     *&#10;     * @param database The database instance from which to get the DAO.&#10;     * @return An instance of [TransactionDao].&#10;     */&#10;    @Provides&#10;    fun provideTransactionDao(database: MoneyMasterDatabase): TransactionDao {&#10;        return database.transactionDao()&#10;    }&#10;&#10;    /**&#10;     * Provides the CategoryDao for accessing category data.&#10;     *&#10;     * @param database The database instance from which to get the DAO.&#10;     * @return An instance of [CategoryDao].&#10;     */&#10;    @Provides&#10;    fun provideCategoryDao(database: MoneyMasterDatabase): CategoryDao {&#10;        return database.categoryDao()&#10;    }&#10;&#10;    /**&#10;     * Provides the BudgetDao for accessing budget data.&#10;     *&#10;     * @param database The database instance from which to get the DAO.&#10;     * @return An instance of [BudgetDao].&#10;     */&#10;    @Provides&#10;    fun provideBudgetDao(database: MoneyMasterDatabase): BudgetDao {&#10;        return database.budgetDao()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/NetworkModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/NetworkModule.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.core.network.CoinCapApiClient&#10;import com.pixelpioneer.moneymaster.data.remote.api.CoinCapApiService&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRemoteConfigManager(&#10;        @ApplicationContext context: Context&#10;    ): RemoteConfigManager {&#10;        return RemoteConfigManager(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCoinCapApiClient(&#10;        remoteConfigManager: RemoteConfigManager&#10;    ): CoinCapApiClient {&#10;        return CoinCapApiClient(remoteConfigManager)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCoinCapApiService(&#10;        coinCapApiClient: CoinCapApiClient&#10;    ): CoinCapApiService {&#10;        return coinCapApiClient.api&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.core.network.CoinCapApiClient&#10;import com.pixelpioneer.moneymaster.data.remote.api.CoinCapApiService&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt Module for networking components.&#10; * Provides dependencies related to remote API services and configuration.&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    /**&#10;     * Provides a singleton instance of RemoteConfigManager.&#10;     *&#10;     * @param context The application context needed for Firebase configuration.&#10;     * @return An instance of [RemoteConfigManager].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideRemoteConfigManager(&#10;        @ApplicationContext context: Context&#10;    ): RemoteConfigManager {&#10;        return RemoteConfigManager(context)&#10;    }&#10;&#10;    /**&#10;     * Provides a singleton instance of CoinCapApiClient.&#10;     *&#10;     * @param remoteConfigManager Used to retrieve API keys and configuration.&#10;     * @return An instance of [CoinCapApiClient].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideCoinCapApiClient(&#10;        remoteConfigManager: RemoteConfigManager&#10;    ): CoinCapApiClient {&#10;        return CoinCapApiClient(remoteConfigManager)&#10;    }&#10;&#10;    /**&#10;     * Provides a singleton instance of CoinCapApiService.&#10;     *&#10;     * @param coinCapApiClient The client that configures and creates the API service.&#10;     * @return An instance of [CoinCapApiService].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideCoinCapApiService(&#10;        coinCapApiClient: CoinCapApiClient&#10;    ): CoinCapApiService {&#10;        return coinCapApiClient.api&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/RepositoryModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/RepositoryModule.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.BudgetDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import com.pixelpioneer.moneymaster.data.repository.BudgetRepository&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.data.repository.CoinCapRepository&#10;import com.pixelpioneer.moneymaster.data.repository.ReceiptScanRepository&#10;import com.pixelpioneer.moneymaster.data.repository.SettingsRepository&#10;import com.pixelpioneer.moneymaster.data.repository.TransactionRepository&#10;import com.pixelpioneer.moneymaster.data.remote.api.CoinCapApiService&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt Module für Repository-Bereitstellung.&#10; * Dieses Modul ist nur für die Bereitstellung der Repositories zuständig.&#10; * Database und DAOs werden im DatabaseModule bereitgestellt.&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object RepositoryModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideTransactionRepository(&#10;        transactionDao: TransactionDao,&#10;        coinCapApiService: CoinCapApiService,&#10;        @ApplicationContext context: Context&#10;    ): TransactionRepository {&#10;        return TransactionRepository(&#10;            transactionDao,&#10;            coinCapApiService,&#10;            context&#10;        )&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCategoryRepository(&#10;        categoryDao: CategoryDao,&#10;        transactionDao: TransactionDao,&#10;        @ApplicationContext context: Context&#10;    ): CategoryRepository {&#10;        return CategoryRepository(categoryDao, transactionDao, context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideBudgetRepository(&#10;        budgetDao: BudgetDao,&#10;        transactionDao: TransactionDao&#10;    ): BudgetRepository {&#10;        return BudgetRepository(budgetDao, transactionDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCoinCapRepository(&#10;        coinCapApiService: CoinCapApiService,&#10;        @ApplicationContext context: Context&#10;    ): CoinCapRepository {&#10;        return CoinCapRepository(&#10;            coinCapApiService,&#10;            context&#10;        )&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideReceiptScanRepository(&#10;        remoteConfigManager: RemoteConfigManager,&#10;        @ApplicationContext context: Context&#10;    ): ReceiptScanRepository {&#10;        return ReceiptScanRepository(&#10;            remoteConfigManager,&#10;            context&#10;        )&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideSettingsRepository(&#10;        @ApplicationContext context: Context&#10;    ): SettingsRepository {&#10;        return SettingsRepository(context)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.BudgetDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import com.pixelpioneer.moneymaster.data.repository.BudgetRepository&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.data.repository.CoinCapRepository&#10;import com.pixelpioneer.moneymaster.data.repository.ReceiptScanRepository&#10;import com.pixelpioneer.moneymaster.data.repository.SettingsRepository&#10;import com.pixelpioneer.moneymaster.data.repository.TransactionRepository&#10;import com.pixelpioneer.moneymaster.data.remote.api.CoinCapApiService&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt Module for repository provision.&#10; * This module is only responsible for providing the repositories.&#10; * Database and DAOs are provided in the DatabaseModule.&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object RepositoryModule {&#10;&#10;    /**&#10;     * Provides a singleton instance of TransactionRepository.&#10;     *&#10;     * @param transactionDao Data access object for transactions.&#10;     * @param coinCapApiService API service for cryptocurrency data.&#10;     * @param context Application context for resource access.&#10;     * @return An instance of [TransactionRepository].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideTransactionRepository(&#10;        transactionDao: TransactionDao,&#10;        coinCapApiService: CoinCapApiService,&#10;        @ApplicationContext context: Context&#10;    ): TransactionRepository {&#10;        return TransactionRepository(&#10;            transactionDao,&#10;            coinCapApiService,&#10;            context&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Provides a singleton instance of CategoryRepository.&#10;     *&#10;     * @param categoryDao Data access object for categories.&#10;     * @param transactionDao Data access object for transactions.&#10;     * @param context Application context for resource access.&#10;     * @return An instance of [CategoryRepository].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideCategoryRepository(&#10;        categoryDao: CategoryDao,&#10;        transactionDao: TransactionDao,&#10;        @ApplicationContext context: Context&#10;    ): CategoryRepository {&#10;        return CategoryRepository(categoryDao, transactionDao, context)&#10;    }&#10;&#10;    /**&#10;     * Provides a singleton instance of BudgetRepository.&#10;     *&#10;     * @param budgetDao Data access object for budgets.&#10;     * @param transactionDao Data access object for transactions.&#10;     * @return An instance of [BudgetRepository].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideBudgetRepository(&#10;        budgetDao: BudgetDao,&#10;        transactionDao: TransactionDao&#10;    ): BudgetRepository {&#10;        return BudgetRepository(budgetDao, transactionDao)&#10;    }&#10;&#10;    /**&#10;     * Provides a singleton instance of CoinCapRepository.&#10;     *&#10;     * @param coinCapApiService API service for cryptocurrency data.&#10;     * @param context Application context for resource access.&#10;     * @return An instance of [CoinCapRepository].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideCoinCapRepository(&#10;        coinCapApiService: CoinCapApiService,&#10;        @ApplicationContext context: Context&#10;    ): CoinCapRepository {&#10;        return CoinCapRepository(&#10;            coinCapApiService,&#10;            context&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Provides a singleton instance of ReceiptScanRepository.&#10;     *&#10;     * @param remoteConfigManager Manager for remote configuration.&#10;     * @param context Application context for resource access.&#10;     * @return An instance of [ReceiptScanRepository].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideReceiptScanRepository(&#10;        remoteConfigManager: RemoteConfigManager,&#10;        @ApplicationContext context: Context&#10;    ): ReceiptScanRepository {&#10;        return ReceiptScanRepository(&#10;            remoteConfigManager,&#10;            context&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Provides a singleton instance of SettingsRepository.&#10;     *&#10;     * @param context Application context for resource access.&#10;     * @return An instance of [SettingsRepository].&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideSettingsRepository(&#10;        @ApplicationContext context: Context&#10;    ): SettingsRepository {&#10;        return SettingsRepository(context)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/network/AppUpdateManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/network/AppUpdateManager.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.core.network&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Environment&#10;import android.util.Log&#10;import androidx.core.content.FileProvider&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import org.json.JSONObject&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.net.HttpURLConnection&#10;import java.net.URL&#10;&#10;/**&#10; * Manages the application update process.&#10; *&#10; * This class handles checking for updates, downloading APK files,&#10; * and initiating the installation process.&#10; */&#10;class AppUpdateManager {&#10;    private val _updateState = MutableStateFlow&lt;UpdateState&gt;(UpdateState.Idle)&#10;    val updateState: StateFlow&lt;UpdateState&gt; = _updateState&#10;&#10;    private val updateJsonUrl =&#10;        &quot;https://darkjesus-1337.github.io/Money-Master-App/assets/update.json&quot;&#10;&#10;    /**&#10;     * Checks for app updates by comparing the current version with the latest available.&#10;     * If an update is available, automatically downloads and initiates installation.&#10;     *&#10;     * @param activity The activity context needed for installation.&#10;     */&#10;    fun checkForUpdates(activity: Activity) {&#10;        _updateState.value = UpdateState.Checking&#10;&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                val url = URL(updateJsonUrl)&#10;                val connection = url.openConnection() as HttpURLConnection&#10;                connection.connect()&#10;                val json = connection.inputStream.bufferedReader().readText()&#10;                val obj = JSONObject(json)&#10;                val latestVersion = obj.getString(&quot;version&quot;)&#10;                val changelog = obj.getString(&quot;changelog&quot;)&#10;                val apkUrl = obj.getString(&quot;apkUrl&quot;)&#10;&#10;                val currentVersion = activity.packageManager&#10;                    .getPackageInfo(activity.packageName, 0).versionName&#10;&#10;                if (latestVersion != currentVersion) {&#10;                    _updateState.value = UpdateState.Downloading(0, 1)&#10;                    val apkFile = downloadApk(apkUrl, activity)&#10;                    _updateState.value = UpdateState.Success&#10;                    installApk(apkFile, activity)&#10;                } else {&#10;                    _updateState.value = UpdateState.NoUpdate&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AppUpdate&quot;, &quot;Update fehlgeschlagen: ${e.message}&quot;)&#10;                _updateState.value = UpdateState.Error(e.message ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Downloads an APK file from the specified URL.&#10;     *&#10;     * @param apkUrl The URL to download the APK from.&#10;     * @param activity The activity context needed for file operations.&#10;     * @return The downloaded APK file.&#10;     */&#10;    private fun downloadApk(apkUrl: String, activity: Activity): File {&#10;        val url = URL(apkUrl)&#10;        val connection = url.openConnection() as HttpURLConnection&#10;        connection.connect()&#10;        val file = File(activity.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), &quot;update.apk&quot;)&#10;        FileOutputStream(file).use { output -&gt;&#10;            connection.inputStream.copyTo(output)&#10;        }&#10;        return file&#10;    }&#10;&#10;    /**&#10;     * Initiates the installation of the downloaded APK.&#10;     *&#10;     * @param file The APK file to install.&#10;     * @param activity The activity context needed for installation.&#10;     */&#10;    private fun installApk(file: File, activity: Activity) {&#10;        val uri = FileProvider.getUriForFile(&#10;            activity,&#10;            &quot;${activity.packageName}.provider&quot;,&#10;            file&#10;        )&#10;        val intent = Intent(Intent.ACTION_VIEW).apply {&#10;            setDataAndType(uri, &quot;application/vnd.android.package-archive&quot;)&#10;            flags = Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_ACTIVITY_NEW_TASK&#10;        }&#10;        activity.startActivity(intent)&#10;    }&#10;&#10;    /**&#10;     * Represents the possible states of the update process.&#10;     */&#10;    sealed class UpdateState {&#10;        data object Idle : UpdateState()&#10;        data object Checking : UpdateState()&#10;        data class Downloading(val downloaded: Long, val total: Long) : UpdateState()&#10;        data object Success : UpdateState()&#10;        data object NoUpdate : UpdateState()&#10;        data class Error(val message: String) : UpdateState()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.network&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Environment&#10;import android.util.Log&#10;import androidx.core.content.FileProvider&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import org.json.JSONObject&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.net.HttpURLConnection&#10;import java.net.URL&#10;&#10;/**&#10; * Manages the application update process.&#10; *&#10; * This class handles checking for updates, downloading APK files,&#10; * and initiating the installation process.&#10; */&#10;class AppUpdateManager {&#10;    private val _updateState = MutableStateFlow&lt;UpdateState&gt;(UpdateState.Idle)&#10;    val updateState: StateFlow&lt;UpdateState&gt; = _updateState&#10;&#10;    private val updateJsonUrl =&#10;        &quot;https://darkjesus-1337.github.io/Money-Master-App/assets/update.json&quot;&#10;&#10;    /**&#10;     * Checks for app updates by comparing the current version with the latest available.&#10;     * If an update is available, automatically downloads and initiates installation.&#10;     *&#10;     * @param activity The activity context needed for installation.&#10;     */&#10;    fun checkForUpdates(activity: Activity) {&#10;        _updateState.value = UpdateState.Checking&#10;&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                val url = URL(updateJsonUrl)&#10;                val connection = url.openConnection() as HttpURLConnection&#10;                connection.connect()&#10;                val json = connection.inputStream.bufferedReader().readText()&#10;                val obj = JSONObject(json)&#10;                val latestVersion = obj.getString(&quot;version&quot;)&#10;                val changelog = obj.getString(&quot;changelog&quot;)&#10;                val apkUrl = obj.getString(&quot;apkUrl&quot;)&#10;&#10;                val currentVersion = activity.packageManager&#10;                    .getPackageInfo(activity.packageName, 0).versionName&#10;&#10;                if (latestVersion != currentVersion) {&#10;                    _updateState.value = UpdateState.Downloading(0, 1)&#10;                    val apkFile = downloadApk(apkUrl, activity)&#10;                    _updateState.value = UpdateState.Success&#10;                    installApk(apkFile, activity)&#10;                } else {&#10;                    _updateState.value = UpdateState.NoUpdate&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AppUpdate&quot;, &quot;Update fehlgeschlagen: ${e.message}&quot;)&#10;                _updateState.value = UpdateState.Error(e.message ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Downloads an APK file from the specified URL.&#10;     *&#10;     * @param apkUrl The URL to download the APK from.&#10;     * @param activity The activity context needed for file operations.&#10;     * @return The downloaded APK file.&#10;     */&#10;    private fun downloadApk(apkUrl: String, activity: Activity): File {&#10;        val url = URL(apkUrl)&#10;        val connection = url.openConnection() as HttpURLConnection&#10;        connection.connect()&#10;        val file = File(activity.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), &quot;update.apk&quot;)&#10;        FileOutputStream(file).use { output -&gt;&#10;            connection.inputStream.copyTo(output)&#10;        }&#10;        return file&#10;    }&#10;&#10;    /**&#10;     * Initiates the installation of the downloaded APK.&#10;     *&#10;     * @param file The APK file to install.&#10;     * @param activity The activity context needed for installation.&#10;     */&#10;    private fun installApk(file: File, activity: Activity) {&#10;        val uri = FileProvider.getUriForFile(&#10;            activity,&#10;            &quot;${activity.packageName}.provider&quot;,&#10;            file&#10;        )&#10;        val intent = Intent(Intent.ACTION_VIEW).apply {&#10;            setDataAndType(uri, &quot;application/vnd.android.package-archive&quot;)&#10;            flags = Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_ACTIVITY_NEW_TASK&#10;        }&#10;        activity.startActivity(intent)&#10;    }&#10;&#10;    /**&#10;     * Represents the possible states of the update process.&#10;     */&#10;    sealed class UpdateState {&#10;        data object Idle : UpdateState()&#10;        data object Checking : UpdateState()&#10;        data class Downloading(val downloaded: Long, val total: Long) : UpdateState()&#10;        data object Success : UpdateState()&#10;        data object NoUpdate : UpdateState()&#10;        data class Error(val message: String) : UpdateState()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/util/FormatUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/util/FormatUtils.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.core.util&#10;&#10;import java.text.NumberFormat&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * Utility class for formatting values in a consistent way throughout the app&#10; */&#10;object FormatUtils {&#10;&#10;    /**&#10;     * Format a double value as a currency string&#10;     *&#10;     * @param amount The amount to format&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted currency string&#10;     */&#10;    fun formatCurrency(amount: Double, locale: Locale = Locale.getDefault()): String {&#10;        val numberFormat = NumberFormat.getCurrencyInstance(locale)&#10;        return numberFormat.format(amount)&#10;    }&#10;&#10;    /**&#10;     * Format a double value as a currency string specifically for receipts&#10;     * with a fixed format of &quot;0.00 €&quot;&#10;     *&#10;     * @param amount The amount to format&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted currency string with Euro symbol&#10;     */&#10;    fun formatCurrencyReceipe(amount: Double, locale: Locale = Locale.getDefault()): String {&#10;        return String.format(locale, &quot;%.2f €&quot;, amount)&#10;    }&#10;&#10;    /**&#10;     * Format a timestamp as a date string&#10;     *&#10;     * @param timestamp The timestamp in milliseconds&#10;     * @param pattern The date pattern to use (default is &quot;dd.MM.yyyy&quot;)&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted date string&#10;     */&#10;    fun formatDate(&#10;        timestamp: Long,&#10;        pattern: String = &quot;dd.MM.yyyy&quot;,&#10;        locale: Locale = Locale.getDefault()&#10;    ): String {&#10;        val date = Date(timestamp)&#10;        val dateFormat = SimpleDateFormat(pattern, locale)&#10;        return dateFormat.format(date)&#10;    }&#10;&#10;    /**&#10;     * Format a timestamp as a date and time string&#10;     *&#10;     * @param timestamp The timestamp in milliseconds&#10;     * @param pattern The date and time pattern to use (default is &quot;dd.MM.yyyy HH:mm&quot;)&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted date and time string&#10;     */&#10;    fun formatDateTime(&#10;        timestamp: Long,&#10;        pattern: String = &quot;dd.MM.yyyy HH:mm&quot;,&#10;        locale: Locale = Locale.getDefault()&#10;    ): String {&#10;        val date = Date(timestamp)&#10;        val dateFormat = SimpleDateFormat(pattern, locale)&#10;        return dateFormat.format(date)&#10;    }&#10;&#10;    /**&#10;     * Format a percentage value&#10;     *&#10;     * @param value The value to format as a percentage (e.g., 0.75 for 75%)&#10;     * @param decimalPlaces The number of decimal places to show (default is 0)&#10;     * @return A formatted percentage string&#10;     */&#10;    fun formatPercentage(&#10;        value: Double,&#10;        decimalPlaces: Int = 0,&#10;        locale: Locale = Locale.getDefault()&#10;    ): String {&#10;        val format = if (decimalPlaces &lt;= 0) {&#10;            &quot;%.0f%%&quot;&#10;        } else {&#10;            &quot;%.&quot; + decimalPlaces + &quot;f%%&quot;&#10;        }&#10;        return String.format(locale, format, value * 100)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.util&#10;&#10;import java.text.NumberFormat&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * Utility class for formatting values in a consistent way throughout the app&#10; */&#10;object FormatUtils {&#10;&#10;    /**&#10;     * Format a double value as a currency string&#10;     *&#10;     * @param amount The amount to format&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted currency string&#10;     */&#10;    fun formatCurrency(amount: Double, locale: Locale = Locale.getDefault()): String {&#10;        val numberFormat = NumberFormat.getCurrencyInstance(locale)&#10;        return numberFormat.format(amount)&#10;    }&#10;&#10;    /**&#10;     * Format a double value as a currency string specifically for receipts&#10;     * with a fixed format of &quot;0.00 €&quot;&#10;     *&#10;     * @param amount The amount to format&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted currency string with Euro symbol&#10;     */&#10;    fun formatCurrencyReceipe(amount: Double, locale: Locale = Locale.getDefault()): String {&#10;        return String.format(locale, &quot;%.2f €&quot;, amount)&#10;    }&#10;&#10;    /**&#10;     * Format a timestamp as a date string&#10;     *&#10;     * @param timestamp The timestamp in milliseconds&#10;     * @param pattern The date pattern to use (default is &quot;dd.MM.yyyy&quot;)&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted date string&#10;     */&#10;    fun formatDate(&#10;        timestamp: Long,&#10;        pattern: String = &quot;dd.MM.yyyy&quot;,&#10;        locale: Locale = Locale.getDefault()&#10;    ): String {&#10;        val date = Date(timestamp)&#10;        val dateFormat = SimpleDateFormat(pattern, locale)&#10;        return dateFormat.format(date)&#10;    }&#10;&#10;    /**&#10;     * Format a timestamp as a date and time string&#10;     *&#10;     * @param timestamp The timestamp in milliseconds&#10;     * @param pattern The date and time pattern to use (default is &quot;dd.MM.yyyy HH:mm&quot;)&#10;     * @param locale The locale to use for formatting (default is system locale)&#10;     * @return A formatted date and time string&#10;     */&#10;    fun formatDateTime(&#10;        timestamp: Long,&#10;        pattern: String = &quot;dd.MM.yyyy HH:mm&quot;,&#10;        locale: Locale = Locale.getDefault()&#10;    ): String {&#10;        val date = Date(timestamp)&#10;        val dateFormat = SimpleDateFormat(pattern, locale)&#10;        return dateFormat.format(date)&#10;    }&#10;&#10;    /**&#10;     * Format a percentage value&#10;     *&#10;     * @param value The value to format as a percentage (e.g., 0.75 for 75%)&#10;     * @param decimalPlaces The number of decimal places to show (default is 0)&#10;     * @return A formatted percentage string&#10;     */&#10;    fun formatPercentage(&#10;        value: Double,&#10;        decimalPlaces: Int = 0,&#10;        locale: Locale = Locale.getDefault()&#10;    ): String {&#10;        val format = if (decimalPlaces &lt;= 0) {&#10;            &quot;%.0f%%&quot;&#10;        } else {&#10;            &quot;%.&quot; + decimalPlaces + &quot;f%%&quot;&#10;        }&#10;        return String.format(locale, format, value * 100)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/util/UiState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/util/UiState.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.core.util&#10;&#10;/**&#10; * Generic UI state holder for different states of the UI&#10; *&#10; * @param T The type of data to be held by the Success state&#10; */&#10;sealed class UiState&lt;out T&gt; {&#10;    data object Loading : UiState&lt;Nothing&gt;()&#10;    data object Empty : UiState&lt;Nothing&gt;()&#10;    data class Success&lt;T&gt;(val data: T) : UiState&lt;T&gt;()&#10;    data class Error(val message: String) : UiState&lt;Nothing&gt;()&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.util&#10;&#10;/**&#10; * Generic UI state holder for different states of the UI&#10; *&#10; * @param T The type of data to be held by the Success state&#10; */&#10;sealed class UiState&lt;out T&gt; {&#10;    data object Loading : UiState&lt;Nothing&gt;()&#10;    data object Empty : UiState&lt;Nothing&gt;()&#10;    data class Success&lt;T&gt;(val data: T) : UiState&lt;T&gt;()&#10;    data class Error(val message: String) : UiState&lt;Nothing&gt;()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/util/uriToFile.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/util/uriToFile.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.core.util&#10;&#10;import android.net.Uri&#10;import java.io.File&#10;&#10;/**&#10; * Converts a content URI to a temporary file.&#10; *&#10; * This utility function creates a temporary file in the cache directory&#10; * and copies the content from the given URI to this file.&#10; *&#10; * @param uri The content URI to convert&#10; * @param context The context needed to access the ContentResolver&#10; * @return A temporary File containing the content from the URI&#10; */&#10;fun uriToFile(uri: Uri, context: android.content.Context): File {&#10;    val inputStream = context.contentResolver.openInputStream(uri)&#10;    val tempFile = File.createTempFile(&quot;receipt&quot;, &quot;.jpg&quot;, context.cacheDir)&#10;    inputStream?.use { input -&gt;&#10;        tempFile.outputStream().use { output -&gt;&#10;            input.copyTo(output)&#10;        }&#10;    }&#10;    return tempFile&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.util&#10;&#10;import android.net.Uri&#10;import java.io.File&#10;&#10;/**&#10; * Converts a content URI to a temporary file.&#10; *&#10; * This utility function creates a temporary file in the cache directory&#10; * and copies the content from the given URI to this file.&#10; *&#10; * @param uri The content URI to convert&#10; * @param context The context needed to access the ContentResolver&#10; * @return A temporary File containing the content from the URI&#10; */&#10;fun uriToFile(uri: Uri, context: android.content.Context): File {&#10;    val inputStream = context.contentResolver.openInputStream(uri)&#10;    val tempFile = File.createTempFile(&quot;receipt&quot;, &quot;.jpg&quot;, context.cacheDir)&#10;    inputStream?.use { input -&gt;&#10;        tempFile.outputStream().use { output -&gt;&#10;            input.copyTo(output)&#10;        }&#10;    }&#10;    return tempFile&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/MoneyMasterDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/MoneyMasterDatabase.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.db&#10;&#10;import android.content.Context&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.BudgetDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;&#10;/**&#10; * Room Database for the Money Master application.&#10; * This database contains tables for transactions, categories, and budgets.&#10; */&#10;@Database(&#10;    entities = [&#10;        TransactionEntity::class,&#10;        CategoryEntity::class,&#10;        BudgetEntity::class&#10;    ],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class MoneyMasterDatabase : RoomDatabase() {&#10;&#10;    abstract fun transactionDao(): TransactionDao&#10;    abstract fun categoryDao(): CategoryDao&#10;    abstract fun budgetDao(): BudgetDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: MoneyMasterDatabase? = null&#10;&#10;        fun getDatabase(context: Context): MoneyMasterDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    MoneyMasterDatabase::class.java,&#10;                    &quot;money_master_database&quot;&#10;                )&#10;                    .fallbackToDestructiveMigration(false)&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.db&#10;&#10;import android.content.Context&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.BudgetDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;&#10;/**&#10; * Room Database for the Money Master application.&#10; * This database contains tables for transactions, categories, and budgets.&#10; */&#10;@Database(&#10;    entities = [&#10;        TransactionEntity::class,&#10;        CategoryEntity::class,&#10;        BudgetEntity::class&#10;    ],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class MoneyMasterDatabase : RoomDatabase() {&#10;&#10;    /**&#10;     * Provides access to the TransactionDao.&#10;     *&#10;     * @return The DAO for accessing transaction data&#10;     */&#10;    abstract fun transactionDao(): TransactionDao&#10;    &#10;    /**&#10;     * Provides access to the CategoryDao.&#10;     *&#10;     * @return The DAO for accessing category data&#10;     */&#10;    abstract fun categoryDao(): CategoryDao&#10;    &#10;    /**&#10;     * Provides access to the BudgetDao.&#10;     *&#10;     * @return The DAO for accessing budget data&#10;     */&#10;    abstract fun budgetDao(): BudgetDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: MoneyMasterDatabase? = null&#10;&#10;        /**&#10;         * Gets the singleton database instance.&#10;         * If the instance doesn't exist yet, it creates a new database instance.&#10;         *&#10;         * @param context The application context&#10;         * @return The singleton database instance&#10;         */&#10;        fun getDatabase(context: Context): MoneyMasterDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    MoneyMasterDatabase::class.java,&#10;                    &quot;money_master_database&quot;&#10;                )&#10;                    .fallbackToDestructiveMigration(false)&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/dao/BudgetDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/dao/BudgetDao.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.db.dao&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Transaction&#10;import androidx.room.Update&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.local.relation.BudgetWithCategory&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface BudgetDao {&#10;    @Query(&quot;SELECT * FROM budgets&quot;)&#10;    fun getAllBudgets(): LiveData&lt;List&lt;BudgetEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM budgets WHERE id = :id&quot;)&#10;    fun getBudgetById(id: Long): Flow&lt;BudgetEntity&gt;&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM budgets&quot;)&#10;    fun getBudgetsWithCategory(): Flow&lt;List&lt;BudgetWithCategory&gt;&gt;&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM budgets WHERE id = :id&quot;)&#10;    fun getBudgetWithCategoryById(id: Long): Flow&lt;BudgetWithCategory&gt;&#10;&#10;    @Query(&quot;SELECT * FROM budgets WHERE categoryId = :categoryId&quot;)&#10;    fun getBudgetsByCategory(categoryId: Long): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertBudget(budget: BudgetEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateBudget(budget: BudgetEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteBudget(budget: BudgetEntity)&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM budgets&quot;)&#10;    suspend fun getBudgetsWithCategorySync(): List&lt;BudgetWithCategory&gt;&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.db.dao&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Transaction&#10;import androidx.room.Update&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.local.relation.BudgetWithCategory&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data Access Object for the budgets table.&#10; * Provides methods to query, insert, update and delete budget data.&#10; */&#10;@Dao&#10;interface BudgetDao {&#10;    /**&#10;     * Gets all budgets from the database as LiveData.&#10;     *&#10;     * @return LiveData list of all budget entities&#10;     */&#10;    @Query(&quot;SELECT * FROM budgets&quot;)&#10;    fun getAllBudgets(): LiveData&lt;List&lt;BudgetEntity&gt;&gt;&#10;&#10;    /**&#10;     * Gets a specific budget by its ID.&#10;     *&#10;     * @param id The ID of the budget to retrieve&#10;     * @return Flow emitting the budget entity&#10;     */&#10;    @Query(&quot;SELECT * FROM budgets WHERE id = :id&quot;)&#10;    fun getBudgetById(id: Long): Flow&lt;BudgetEntity&gt;&#10;&#10;    /**&#10;     * Gets all budgets with their associated categories.&#10;     *&#10;     * @return Flow emitting a list of BudgetWithCategory objects&#10;     */&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM budgets&quot;)&#10;    fun getBudgetsWithCategory(): Flow&lt;List&lt;BudgetWithCategory&gt;&gt;&#10;&#10;    /**&#10;     * Gets a specific budget with its associated category by budget ID.&#10;     *&#10;     * @param id The ID of the budget to retrieve&#10;     * @return Flow emitting a BudgetWithCategory object&#10;     */&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM budgets WHERE id = :id&quot;)&#10;    fun getBudgetWithCategoryById(id: Long): Flow&lt;BudgetWithCategory&gt;&#10;&#10;    /**&#10;     * Gets all budgets for a specific category.&#10;     *&#10;     * @param categoryId The ID of the category to filter by&#10;     * @return Flow emitting a list of budget entities for the specified category&#10;     */&#10;    @Query(&quot;SELECT * FROM budgets WHERE categoryId = :categoryId&quot;)&#10;    fun getBudgetsByCategory(categoryId: Long): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;&#10;    /**&#10;     * Inserts a budget into the database.&#10;     * If a budget with the same ID already exists, it is replaced.&#10;     *&#10;     * @param budget The budget entity to insert&#10;     * @return The ID of the inserted budget&#10;     */&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertBudget(budget: BudgetEntity): Long&#10;&#10;    /**&#10;     * Updates an existing budget in the database.&#10;     *&#10;     * @param budget The budget entity to update&#10;     */&#10;    @Update&#10;    suspend fun updateBudget(budget: BudgetEntity)&#10;&#10;    /**&#10;     * Deletes a budget from the database.&#10;     *&#10;     * @param budget The budget entity to delete&#10;     */&#10;    @Delete&#10;    suspend fun deleteBudget(budget: BudgetEntity)&#10;&#10;    /**&#10;     * Gets all budgets with their associated categories synchronously.&#10;     *&#10;     * @return List of BudgetWithCategory objects&#10;     */&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM budgets&quot;)&#10;    suspend fun getBudgetsWithCategorySync(): List&lt;BudgetWithCategory&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/dao/CategoryDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/dao/CategoryDao.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.db.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Update&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface CategoryDao {&#10;    @Query(&quot;SELECT * FROM categories&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM categories WHERE id = :id&quot;)&#10;    fun getCategoryById(id: Long): Flow&lt;CategoryEntity&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCategory(category: CategoryEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateCategory(category: CategoryEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteCategory(category: CategoryEntity)&#10;&#10;    @Insert(onConflict = OnConflictStrategy.IGNORE)&#10;    suspend fun insertAll(categories: List&lt;CategoryEntity&gt;)&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.db.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Update&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data Access Object for the categories table.&#10; * Provides methods to query, insert, update and delete category data.&#10; */&#10;@Dao&#10;interface CategoryDao {&#10;    /**&#10;     * Gets all categories from the database.&#10;     *&#10;     * @return Flow emitting a list of all category entities&#10;     */&#10;    @Query(&quot;SELECT * FROM categories&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;&#10;    /**&#10;     * Gets a specific category by its ID.&#10;     *&#10;     * @param id The ID of the category to retrieve&#10;     * @return Flow emitting the category entity&#10;     */&#10;    @Query(&quot;SELECT * FROM categories WHERE id = :id&quot;)&#10;    fun getCategoryById(id: Long): Flow&lt;CategoryEntity&gt;&#10;&#10;    /**&#10;     * Inserts a category into the database.&#10;     * If a category with the same ID already exists, it is replaced.&#10;     *&#10;     * @param category The category entity to insert&#10;     * @return The ID of the inserted category&#10;     */&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCategory(category: CategoryEntity): Long&#10;&#10;    /**&#10;     * Updates an existing category in the database.&#10;     *&#10;     * @param category The category entity to update&#10;     */&#10;    @Update&#10;    suspend fun updateCategory(category: CategoryEntity)&#10;&#10;    /**&#10;     * Deletes a category from the database.&#10;     *&#10;     * @param category The category entity to delete&#10;     */&#10;    @Delete&#10;    suspend fun deleteCategory(category: CategoryEntity)&#10;&#10;    /**&#10;     * Inserts a list of categories into the database.&#10;     * If a category with the same ID already exists, it is ignored.&#10;     *&#10;     * @param categories The list of category entities to insert&#10;     */&#10;    @Insert(onConflict = OnConflictStrategy.IGNORE)&#10;    suspend fun insertAll(categories: List&lt;CategoryEntity&gt;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/dao/TransactionDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/db/dao/TransactionDao.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.db.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Transaction&#10;import androidx.room.Update&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;import com.pixelpioneer.moneymaster.data.local.relation.TransactionWithCategory&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface TransactionDao {&#10;    @Query(&quot;SELECT * FROM transactions ORDER BY date DESC&quot;)&#10;    fun getAllTransactions(): Flow&lt;List&lt;TransactionEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM transactions WHERE id = :id&quot;)&#10;    fun getTransactionById(id: Long): Flow&lt;TransactionEntity&gt;&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM transactions ORDER BY date DESC&quot;)&#10;    fun getTransactionsWithCategory(): Flow&lt;List&lt;TransactionWithCategory&gt;&gt;&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM transactions WHERE id = :id&quot;)&#10;    fun getTransactionWithCategoryById(id: Long): Flow&lt;TransactionWithCategory&gt;&#10;&#10;    @Query(&quot;SELECT * FROM transactions WHERE date BETWEEN :startDate AND :endDate ORDER BY date DESC&quot;)&#10;    fun getTransactionsByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;TransactionEntity&gt;&gt;&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM transactions WHERE date &gt;= :startDate AND date &lt; :endDate ORDER BY date DESC&quot;)&#10;    fun getTransactionsWithCategoryByDateRange(&#10;        startDate: Long,&#10;        endDate: Long&#10;    ): Flow&lt;List&lt;TransactionWithCategory&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM transactions WHERE categoryId = :categoryId ORDER BY date DESC&quot;)&#10;    fun getTransactionsByCategory(categoryId: Long): Flow&lt;List&lt;TransactionEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 1 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;Double?&gt;&#10;&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 0 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalIncomeByDateRange(startDate: Long, endDate: Long): Flow&lt;Double?&gt;&#10;&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE categoryId = :categoryId AND isExpense = 1 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesByCategoryAndDateRange(&#10;        categoryId: Long,&#10;        startDate: Long,&#10;        endDate: Long&#10;    ): Flow&lt;Double?&gt;&#10;&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE categoryId = :categoryId AND isExpense = 1 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    suspend fun getTotalExpensesByCategoryAndDateRangeSync(&#10;        categoryId: Long,&#10;        startDate: Long,&#10;        endDate: Long&#10;    ): Double?&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM transactions&quot;)&#10;    suspend fun getTransactionCountSync(): Int&#10;&#10;    // ==========================================&#10;    // SYNC METHODS (FEHLENDE METHODEN HINZUGEFÜGT)&#10;    // ==========================================&#10;&#10;    /**&#10;     * Synchrone Berechnung der Gesamteinnahmen.&#10;     * Diese Methode wird von TransactionRepository.getTotalIncomeSync() verwendet.&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 0&quot;)&#10;    suspend fun getTotalIncomeSync(): Double&#10;&#10;    /**&#10;     * Synchrone Berechnung der Gesamtausgaben.&#10;     * Diese Methode wird von TransactionRepository.getTotalExpensesSync() verwendet.&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 1&quot;)&#10;    suspend fun getTotalExpensesSync(): Double&#10;&#10;    // ==========================================&#10;    // CRUD OPERATIONS&#10;    // ==========================================&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertTransaction(transaction: TransactionEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateTransaction(transaction: TransactionEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteTransaction(transaction: TransactionEntity)&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertAll(transactions: List&lt;TransactionEntity&gt;)&#10;&#10;    // ==========================================&#10;    // DATABASE REPAIR METHODS&#10;    // ==========================================&#10;&#10;    /**&#10;     * Findet alle Transaktionen mit ungültigen Kategorie-Referenzen.&#10;     * Diese Transaktionen verweisen auf Kategorien, die nicht existieren.&#10;     */&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM transactions &#10;        WHERE categoryId NOT IN (SELECT id FROM categories)&#10;    &quot;&quot;&quot;)&#10;    suspend fun getTransactionsWithInvalidCategories(): List&lt;TransactionEntity&gt;&#10;&#10;    /**&#10;     * Aktualisiert alle Transaktionen mit ungültigen categoryId&#10;     * und weist ihnen eine gültige Standard-Kategorie zu.&#10;     */&#10;    @Query(&quot;&quot;&quot;&#10;        UPDATE transactions &#10;        SET categoryId = :defaultCategoryId &#10;        WHERE categoryId NOT IN (SELECT id FROM categories)&#10;    &quot;&quot;&quot;)&#10;    suspend fun updateCategoryIdForOrphanedTransactions(defaultCategoryId: Long)&#10;&#10;    /**&#10;     * Prüft ob Transaktionen mit ungültigen Kategorie-Referenzen existieren.&#10;     */&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT COUNT(*) FROM transactions &#10;        WHERE categoryId NOT IN (SELECT id FROM categories)&#10;    &quot;&quot;&quot;)&#10;    suspend fun countTransactionsWithInvalidCategories(): Int&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.db.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Transaction&#10;import androidx.room.Update&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;import com.pixelpioneer.moneymaster.data.local.relation.TransactionWithCategory&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data Access Object for the transactions table.&#10; * Provides methods to query, insert, update and delete transaction data.&#10; */&#10;@Dao&#10;interface TransactionDao {&#10;    /**&#10;     * Gets all transactions from the database, ordered by date descending.&#10;     *&#10;     * @return Flow emitting a list of all transaction entities&#10;     */&#10;    @Query(&quot;SELECT * FROM transactions ORDER BY date DESC&quot;)&#10;    fun getAllTransactions(): Flow&lt;List&lt;TransactionEntity&gt;&gt;&#10;&#10;    /**&#10;     * Gets a specific transaction by its ID.&#10;     *&#10;     * @param id The ID of the transaction to retrieve&#10;     * @return Flow emitting the transaction entity&#10;     */&#10;    @Query(&quot;SELECT * FROM transactions WHERE id = :id&quot;)&#10;    fun getTransactionById(id: Long): Flow&lt;TransactionEntity&gt;&#10;&#10;    /**&#10;     * Gets all transactions with their associated categories, ordered by date descending.&#10;     *&#10;     * @return Flow emitting a list of TransactionWithCategory objects&#10;     */&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM transactions ORDER BY date DESC&quot;)&#10;    fun getTransactionsWithCategory(): Flow&lt;List&lt;TransactionWithCategory&gt;&gt;&#10;&#10;    /**&#10;     * Gets a specific transaction with its associated category by transaction ID.&#10;     *&#10;     * @param id The ID of the transaction to retrieve&#10;     * @return Flow emitting a TransactionWithCategory object&#10;     */&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM transactions WHERE id = :id&quot;)&#10;    fun getTransactionWithCategoryById(id: Long): Flow&lt;TransactionWithCategory&gt;&#10;&#10;    /**&#10;     * Gets all transactions within a specific date range, ordered by date descending.&#10;     *&#10;     * @param startDate The start timestamp of the date range (inclusive)&#10;     * @param endDate The end timestamp of the date range (inclusive)&#10;     * @return Flow emitting a list of transaction entities within the date range&#10;     */&#10;    @Query(&quot;SELECT * FROM transactions WHERE date BETWEEN :startDate AND :endDate ORDER BY date DESC&quot;)&#10;    fun getTransactionsByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;TransactionEntity&gt;&gt;&#10;&#10;    /**&#10;     * Gets all transactions with their associated categories within a specific date range,&#10;     * ordered by date descending.&#10;     *&#10;     * @param startDate The start timestamp of the date range (inclusive)&#10;     * @param endDate The end timestamp of the date range (exclusive)&#10;     * @return Flow emitting a list of TransactionWithCategory objects within the date range&#10;     */&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM transactions WHERE date &gt;= :startDate AND date &lt; :endDate ORDER BY date DESC&quot;)&#10;    fun getTransactionsWithCategoryByDateRange(&#10;        startDate: Long,&#10;        endDate: Long&#10;    ): Flow&lt;List&lt;TransactionWithCategory&gt;&gt;&#10;&#10;    /**&#10;     * Gets all transactions for a specific category, ordered by date descending.&#10;     *&#10;     * @param categoryId The ID of the category to filter by&#10;     * @return Flow emitting a list of transaction entities for the specified category&#10;     */&#10;    @Query(&quot;SELECT * FROM transactions WHERE categoryId = :categoryId ORDER BY date DESC&quot;)&#10;    fun getTransactionsByCategory(categoryId: Long): Flow&lt;List&lt;TransactionEntity&gt;&gt;&#10;&#10;    /**&#10;     * Calculates the total amount of expenses within a specific date range.&#10;     *&#10;     * @param startDate The start timestamp of the date range (inclusive)&#10;     * @param endDate The end timestamp of the date range (inclusive)&#10;     * @return Flow emitting the total expenses amount, or null if no expenses found&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 1 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;Double?&gt;&#10;&#10;    /**&#10;     * Calculates the total amount of income within a specific date range.&#10;     *&#10;     * @param startDate The start timestamp of the date range (inclusive)&#10;     * @param endDate The end timestamp of the date range (inclusive)&#10;     * @return Flow emitting the total income amount, or null if no income found&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 0 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalIncomeByDateRange(startDate: Long, endDate: Long): Flow&lt;Double?&gt;&#10;&#10;    /**&#10;     * Calculates the total amount of expenses for a specific category within a specific date range.&#10;     *&#10;     * @param categoryId The ID of the category to filter by&#10;     * @param startDate The start timestamp of the date range (inclusive)&#10;     * @param endDate The end timestamp of the date range (inclusive)&#10;     * @return Flow emitting the total expenses amount for the category, or null if no expenses found&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE categoryId = :categoryId AND isExpense = 1 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesByCategoryAndDateRange(&#10;        categoryId: Long,&#10;        startDate: Long,&#10;        endDate: Long&#10;    ): Flow&lt;Double?&gt;&#10;&#10;    /**&#10;     * Synchronously calculates the total amount of expenses for a specific category within a specific date range.&#10;     *&#10;     * @param categoryId The ID of the category to filter by&#10;     * @param startDate The start timestamp of the date range (inclusive)&#10;     * @param endDate The end timestamp of the date range (inclusive)&#10;     * @return The total expenses amount for the category, or null if no expenses found&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE categoryId = :categoryId AND isExpense = 1 AND date BETWEEN :startDate AND :endDate&quot;)&#10;    suspend fun getTotalExpensesByCategoryAndDateRangeSync(&#10;        categoryId: Long,&#10;        startDate: Long,&#10;        endDate: Long&#10;    ): Double?&#10;&#10;    /**&#10;     * Synchronously counts the total number of transactions in the database.&#10;     *&#10;     * @return The count of transactions&#10;     */&#10;    @Query(&quot;SELECT COUNT(*) FROM transactions&quot;)&#10;    suspend fun getTransactionCountSync(): Int&#10;&#10;    // ==========================================&#10;    // SYNC METHODS&#10;    // ==========================================&#10;&#10;    /**&#10;     * Synchronously calculates the total amount of income.&#10;     * This method is used by TransactionRepository.getTotalIncomeSync().&#10;     *&#10;     * @return The total income amount&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 0&quot;)&#10;    suspend fun getTotalIncomeSync(): Double&#10;&#10;    /**&#10;     * Synchronously calculates the total amount of expenses.&#10;     * This method is used by TransactionRepository.getTotalExpensesSync().&#10;     *&#10;     * @return The total expenses amount&#10;     */&#10;    @Query(&quot;SELECT SUM(amount) FROM transactions WHERE isExpense = 1&quot;)&#10;    suspend fun getTotalExpensesSync(): Double&#10;&#10;    // ==========================================&#10;    // CRUD OPERATIONS&#10;    // ==========================================&#10;&#10;    /**&#10;     * Inserts a transaction into the database.&#10;     * If a transaction with the same ID already exists, it is replaced.&#10;     *&#10;     * @param transaction The transaction entity to insert&#10;     * @return The ID of the inserted transaction&#10;     */&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertTransaction(transaction: TransactionEntity): Long&#10;&#10;    /**&#10;     * Updates an existing transaction in the database.&#10;     *&#10;     * @param transaction The transaction entity to update&#10;     */&#10;    @Update&#10;    suspend fun updateTransaction(transaction: TransactionEntity)&#10;&#10;    /**&#10;     * Deletes a transaction from the database.&#10;     *&#10;     * @param transaction The transaction entity to delete&#10;     */&#10;    @Delete&#10;    suspend fun deleteTransaction(transaction: TransactionEntity)&#10;&#10;    /**&#10;     * Inserts a list of transactions into the database.&#10;     * If transactions with the same IDs already exist, they are replaced.&#10;     *&#10;     * @param transactions The list of transaction entities to insert&#10;     */&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertAll(transactions: List&lt;TransactionEntity&gt;)&#10;&#10;    // ==========================================&#10;    // DATABASE REPAIR METHODS&#10;    // ==========================================&#10;&#10;    /**&#10;     * Finds all transactions with invalid category references.&#10;     * These transactions refer to categories that don't exist.&#10;     *&#10;     * @return List of transaction entities with invalid category references&#10;     */&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM transactions &#10;        WHERE categoryId NOT IN (SELECT id FROM categories)&#10;    &quot;&quot;&quot;)&#10;    suspend fun getTransactionsWithInvalidCategories(): List&lt;TransactionEntity&gt;&#10;&#10;    /**&#10;     * Updates all transactions with invalid categoryId&#10;     * and assigns them a valid default category.&#10;     *&#10;     * @param defaultCategoryId The ID of the default category to assign&#10;     */&#10;    @Query(&quot;&quot;&quot;&#10;        UPDATE transactions &#10;        SET categoryId = :defaultCategoryId &#10;        WHERE categoryId NOT IN (SELECT id FROM categories)&#10;    &quot;&quot;&quot;)&#10;    suspend fun updateCategoryIdForOrphanedTransactions(defaultCategoryId: Long)&#10;&#10;    /**&#10;     * Checks if transactions with invalid category references exist.&#10;     *&#10;     * @return The count of transactions with invalid category references&#10;     */&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT COUNT(*) FROM transactions &#10;        WHERE categoryId NOT IN (SELECT id FROM categories)&#10;    &quot;&quot;&quot;)&#10;    suspend fun countTransactionsWithInvalidCategories(): Int&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/entity/BudgetEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/entity/BudgetEntity.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.entity&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.ForeignKey&#10;import androidx.room.Index&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(&#10;    tableName = &quot;budgets&quot;,&#10;    foreignKeys = [&#10;        ForeignKey(&#10;            entity = CategoryEntity::class,&#10;            parentColumns = [&quot;id&quot;],&#10;            childColumns = [&quot;categoryId&quot;],&#10;            onDelete = ForeignKey.CASCADE&#10;        )&#10;    ],&#10;    indices = [Index(value = [&quot;categoryId&quot;])]&#10;)&#10;data class BudgetEntity(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val categoryId: Long,&#10;    val amount: Double,&#10;    @ColumnInfo(name = &quot;period&quot;) val periodName: String&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.entity&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.ForeignKey&#10;import androidx.room.Index&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Entity representing a budget in the database.&#10; *&#10; * A budget is linked to a specific category and specifies a spending limit&#10; * for that category over a certain period.&#10; *&#10; * @property id The unique identifier for the budget&#10; * @property categoryId The ID of the category this budget is for&#10; * @property amount The monetary amount of the budget limit&#10; * @property periodName The time period for the budget (e.g., &quot;WEEKLY&quot;, &quot;MONTHLY&quot;)&#10; */&#10;@Entity(&#10;    tableName = &quot;budgets&quot;,&#10;    foreignKeys = [&#10;        ForeignKey(&#10;            entity = CategoryEntity::class,&#10;            parentColumns = [&quot;id&quot;],&#10;            childColumns = [&quot;categoryId&quot;],&#10;            onDelete = ForeignKey.CASCADE&#10;        )&#10;    ],&#10;    indices = [Index(value = [&quot;categoryId&quot;])]&#10;)&#10;data class BudgetEntity(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val categoryId: Long,&#10;    val amount: Double,&#10;    @ColumnInfo(name = &quot;period&quot;) val periodName: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/entity/CategoryEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/entity/CategoryEntity.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class CategoryEntity(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val color: Int,&#10;    val iconResId: Int&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Entity representing a transaction category in the database.&#10; *&#10; * Categories are used to organize transactions and budgets by type&#10; * (e.g., Food, Transportation, Entertainment).&#10; *&#10; * @property id The unique identifier for the category&#10; * @property name The display name of the category&#10; * @property color The color associated with this category (as an integer color value)&#10; * @property iconResId The resource ID for the icon representing this category&#10; */&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class CategoryEntity(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val color: Int,&#10;    val iconResId: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/entity/TransactionEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/entity/TransactionEntity.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;transactions&quot;)&#10;data class TransactionEntity(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val amount: Double,&#10;    val title: String,&#10;    val description: String = &quot;&quot;,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val isExpense: Boolean = true&#10;)&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Entity representing a financial transaction in the database.&#10; *&#10; * A transaction records a financial activity, which can be either an expense&#10; * or income, with an amount, description, and category.&#10; *&#10; * @property id The unique identifier for the transaction&#10; * @property amount The monetary amount of the transaction&#10; * @property title The short title or name of the transaction&#10; * @property description Additional details about the transaction (optional)&#10; * @property categoryId The ID of the category this transaction belongs to&#10; * @property date The timestamp when this transaction occurred (in milliseconds)&#10; * @property isExpense Whether this transaction is an expense (true) or income (false)&#10; */&#10;@Entity(tableName = &quot;transactions&quot;)&#10;data class TransactionEntity(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val amount: Double,&#10;    val title: String,&#10;    val description: String = &quot;&quot;,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val isExpense: Boolean = true&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/relation/BudgetWithCategory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/relation/BudgetWithCategory.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.relation&#10;&#10;import androidx.room.Embedded&#10;import androidx.room.Relation&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;&#10;&#10;data class BudgetWithCategory(&#10;    @Embedded val budget: BudgetEntity,&#10;    @Relation(&#10;        parentColumn = &quot;categoryId&quot;,&#10;        entityColumn = &quot;id&quot;&#10;    )&#10;    val category: CategoryEntity&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.relation&#10;&#10;import androidx.room.Embedded&#10;import androidx.room.Relation&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;&#10;/**&#10; * Represents a relationship between a Budget and its Category.&#10; * &#10; * This class is used by Room to fetch a budget together with its related category&#10; * in a single query, providing a more complete view of budget data.&#10; *&#10; * @property budget The budget entity&#10; * @property category The category entity that this budget is associated with&#10; */&#10;data class BudgetWithCategory(&#10;    @Embedded val budget: BudgetEntity,&#10;    @Relation(&#10;        parentColumn = &quot;categoryId&quot;,&#10;        entityColumn = &quot;id&quot;&#10;    )&#10;    val category: CategoryEntity&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/relation/TransactionWithCategory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/local/relation/TransactionWithCategory.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.local.relation&#10;&#10;import androidx.room.Embedded&#10;import androidx.room.Relation&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;&#10;data class TransactionWithCategory(&#10;    @Embedded val transaction: TransactionEntity,&#10;    @Relation(&#10;        parentColumn = &quot;categoryId&quot;,&#10;        entityColumn = &quot;id&quot;&#10;    )&#10;    val category: CategoryEntity&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.local.relation&#10;&#10;import androidx.room.Embedded&#10;import androidx.room.Relation&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;&#10;/**&#10; * Represents a relationship between a Transaction and its Category.&#10; * &#10; * This class is used by Room to fetch a transaction together with its related category&#10; * in a single query, providing a more complete view of transaction data.&#10; *&#10; * @property transaction The transaction entity&#10; * @property category The category entity that this transaction is associated with&#10; */&#10;data class TransactionWithCategory(&#10;    @Embedded val transaction: TransactionEntity,&#10;    @Relation(&#10;        parentColumn = &quot;categoryId&quot;,&#10;        entityColumn = &quot;id&quot;&#10;    )&#10;    val category: CategoryEntity&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/mapper/BudgetMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/mapper/BudgetMapper.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.mapper&#10;&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.local.relation.BudgetWithCategory&#10;&#10;/**&#10; * Mapper class for converting between Budget domain models and database entities.&#10; *&#10; * This object provides utility methods to transform Budget objects to BudgetEntity&#10; * objects and vice versa.&#10; */&#10;object BudgetMapper {&#10;    /**&#10;     * Converts a Budget domain model to a BudgetEntity database entity.&#10;     *&#10;     * @param budget The Budget domain model to convert&#10;     * @return A BudgetEntity database entity&#10;     */&#10;    fun toEntity(budget: Budget): BudgetEntity {&#10;        return BudgetEntity(&#10;            id = budget.id,&#10;            categoryId = budget.category.id,&#10;            amount = budget.amount,&#10;            periodName = budget.period.name&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Converts a BudgetWithCategory database relation to a Budget domain model.&#10;     *&#10;     * @param entity The BudgetWithCategory database relation to convert&#10;     * @param spent The current amount spent against this budget (default: 0.0)&#10;     * @return A Budget domain model&#10;     */&#10;    fun fromEntity(entity: BudgetWithCategory, spent: Double = 0.0): Budget {&#10;        return Budget(&#10;            id = entity.budget.id,&#10;            category = TransactionCategory(&#10;                id = entity.category.id,&#10;                name = entity.category.name,&#10;                color = entity.category.color,&#10;                icon = entity.category.iconResId&#10;            ),&#10;            amount = entity.budget.amount,&#10;            period = BudgetPeriod.valueOf(entity.budget.periodName),&#10;            spent = spent&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.mapper&#10;&#10;import com.pixelpioneer.moneymaster.data.local.entity.BudgetEntity&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.local.relation.BudgetWithCategory&#10;&#10;/**&#10; * Mapper class for converting between Budget domain models and database entities.&#10; *&#10; * This object provides utility methods to transform Budget objects to BudgetEntity&#10; * objects and vice versa.&#10; */&#10;object BudgetMapper {&#10;    /**&#10;     * Converts a Budget domain model to a BudgetEntity database entity.&#10;     *&#10;     * @param budget The Budget domain model to convert&#10;     * @return A BudgetEntity database entity&#10;     */&#10;    fun toEntity(budget: Budget): BudgetEntity {&#10;        return BudgetEntity(&#10;            id = budget.id,&#10;            categoryId = budget.category.id,&#10;            amount = budget.amount,&#10;            periodName = budget.period.name&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Converts a BudgetWithCategory database relation to a Budget domain model.&#10;     *&#10;     * @param entity The BudgetWithCategory database relation to convert&#10;     * @param spent The current amount spent against this budget (default: 0.0)&#10;     * @return A Budget domain model&#10;     */&#10;    fun fromEntity(entity: BudgetWithCategory, spent: Double = 0.0): Budget {&#10;        return Budget(&#10;            id = entity.budget.id,&#10;            category = TransactionCategory(&#10;                id = entity.category.id,&#10;                name = entity.category.name,&#10;                color = entity.category.color,&#10;                icon = entity.category.iconResId&#10;            ),&#10;            amount = entity.budget.amount,&#10;            period = BudgetPeriod.valueOf(entity.budget.periodName),&#10;            spent = spent&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/mapper/CategoryMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/mapper/CategoryMapper.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.mapper&#10;&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * Mapper class for converting between TransactionCategory domain models and database entities.&#10; *&#10; * This object provides utility methods to transform TransactionCategory objects to&#10; * CategoryEntity objects and vice versa.&#10; */&#10;object CategoryMapper {&#10;    /**&#10;     * Converts a TransactionCategory domain model to a CategoryEntity database entity.&#10;     *&#10;     * @param category The TransactionCategory domain model to convert&#10;     * @return A CategoryEntity database entity&#10;     */&#10;    fun toEntity(category: TransactionCategory): CategoryEntity {&#10;        return CategoryEntity(&#10;            id = category.id,&#10;            name = category.name,&#10;            color = category.color,&#10;            iconResId = category.icon&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Converts a CategoryEntity database entity to a TransactionCategory domain model.&#10;     *&#10;     * @param entity The CategoryEntity database entity to convert&#10;     * @return A TransactionCategory domain model&#10;     */&#10;    fun fromEntity(entity: CategoryEntity): TransactionCategory {&#10;        return TransactionCategory(&#10;            id = entity.id,&#10;            name = entity.name,&#10;            color = entity.color,&#10;            icon = entity.iconResId&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.mapper&#10;&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * Mapper class for converting between TransactionCategory domain models and database entities.&#10; *&#10; * This object provides utility methods to transform TransactionCategory objects to&#10; * CategoryEntity objects and vice versa.&#10; */&#10;object CategoryMapper {&#10;    /**&#10;     * Converts a TransactionCategory domain model to a CategoryEntity database entity.&#10;     *&#10;     * @param category The TransactionCategory domain model to convert&#10;     * @return A CategoryEntity database entity&#10;     */&#10;    fun toEntity(category: TransactionCategory): CategoryEntity {&#10;        return CategoryEntity(&#10;            id = category.id,&#10;            name = category.name,&#10;            color = category.color,&#10;            iconResId = category.icon&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Converts a CategoryEntity database entity to a TransactionCategory domain model.&#10;     *&#10;     * @param entity The CategoryEntity database entity to convert&#10;     * @return A TransactionCategory domain model&#10;     */&#10;    fun fromEntity(entity: CategoryEntity): TransactionCategory {&#10;        return TransactionCategory(&#10;            id = entity.id,&#10;            name = entity.name,&#10;            color = entity.color,&#10;            icon = entity.iconResId&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/mapper/TransactionMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/mapper/TransactionMapper.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.mapper&#10;&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.local.relation.TransactionWithCategory&#10;&#10;/**&#10; * Mapper class for converting between Transaction domain models and database entities.&#10; * &#10; * This object provides utility methods to transform Transaction objects to&#10; * TransactionEntity objects and vice versa.&#10; */&#10;object TransactionMapper {&#10;    /**&#10;     * Converts a Transaction domain model to a TransactionEntity database entity.&#10;     *&#10;     * @param transaction The Transaction domain model to convert&#10;     * @return A TransactionEntity database entity&#10;     */&#10;    fun toEntity(transaction: Transaction): TransactionEntity {&#10;        return TransactionEntity(&#10;            id = transaction.id,&#10;            amount = transaction.amount,&#10;            title = transaction.title,&#10;            description = transaction.description,&#10;            categoryId = transaction.category.id,&#10;            date = transaction.date,&#10;            isExpense = transaction.isExpense&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Converts a TransactionWithCategory database relation to a Transaction domain model.&#10;     *&#10;     * @param entity The TransactionWithCategory database relation to convert&#10;     * @return A Transaction domain model&#10;     */&#10;    fun fromEntity(entity: TransactionWithCategory): Transaction {&#10;        return Transaction(&#10;            id = entity.transaction.id,&#10;            amount = entity.transaction.amount,&#10;            title = entity.transaction.title,&#10;            description = entity.transaction.description,&#10;            category = TransactionCategory(&#10;                id = entity.category.id,&#10;                name = entity.category.name,&#10;                color = entity.category.color,&#10;                icon = entity.category.iconResId&#10;            ),&#10;            date = entity.transaction.date,&#10;            isExpense = entity.transaction.isExpense&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.mapper&#10;&#10;import com.pixelpioneer.moneymaster.data.local.entity.TransactionEntity&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.local.relation.TransactionWithCategory&#10;&#10;/**&#10; * Mapper class for converting between Transaction domain models and database entities.&#10; * &#10; * This object provides utility methods to transform Transaction objects to&#10; * TransactionEntity objects and vice versa.&#10; */&#10;object TransactionMapper {&#10;    /**&#10;     * Converts a Transaction domain model to a TransactionEntity database entity.&#10;     *&#10;     * @param transaction The Transaction domain model to convert&#10;     * @return A TransactionEntity database entity&#10;     */&#10;    fun toEntity(transaction: Transaction): TransactionEntity {&#10;        return TransactionEntity(&#10;            id = transaction.id,&#10;            amount = transaction.amount,&#10;            title = transaction.title,&#10;            description = transaction.description,&#10;            categoryId = transaction.category.id,&#10;            date = transaction.date,&#10;            isExpense = transaction.isExpense&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Converts a TransactionWithCategory database relation to a Transaction domain model.&#10;     *&#10;     * @param entity The TransactionWithCategory database relation to convert&#10;     * @return A Transaction domain model&#10;     */&#10;    fun fromEntity(entity: TransactionWithCategory): Transaction {&#10;        return Transaction(&#10;            id = entity.transaction.id,&#10;            amount = entity.transaction.amount,&#10;            title = entity.transaction.title,&#10;            description = entity.transaction.description,&#10;            category = TransactionCategory(&#10;                id = entity.category.id,&#10;                name = entity.category.name,&#10;                color = entity.category.color,&#10;                icon = entity.category.iconResId&#10;            ),&#10;            date = entity.transaction.date,&#10;            isExpense = entity.transaction.isExpense&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Asset.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Asset.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;/**&#10; * Represents a cryptocurrency asset with market data.&#10; * &#10; * This data class encapsulates all the information about a cryptocurrency asset&#10; * as provided by the CoinCap API.&#10; * &#10; * @property id Unique identifier for the asset&#10; * @property rank Market rank of the asset&#10; * @property symbol Trading symbol/ticker of the asset&#10; * @property name Full name of the cryptocurrency&#10; * @property supply Current circulating supply of the asset&#10; * @property maxSupply Maximum possible supply of the asset, null if unlimited&#10; * @property marketCapUsd Total market capitalization in USD&#10; * @property volumeUsd24Hr Trading volume in the last 24 hours in USD&#10; * @property priceUsd Current price in USD&#10; * @property changePercent24Hr Price change percentage in the last 24 hours&#10; * @property vwap24Hr Volume weighted average price in the last 24 hours&#10; * @property explorer URL to the asset's blockchain explorer&#10; */&#10;data class Asset(&#10;    val id: String,&#10;    val rank: String,&#10;    val symbol: String,&#10;    val name: String,&#10;    val supply: String,&#10;    val maxSupply: String?,&#10;    val marketCapUsd: String,&#10;    val volumeUsd24Hr: String,&#10;    val priceUsd: String,&#10;    val changePercent24Hr: String,&#10;    val vwap24Hr: String?,&#10;    val explorer: String?&#10;)&#10;&#10;data class AssetsResponse(&#10;    val data: List&lt;Asset&gt;,&#10;    val timestamp: Long&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;/**&#10; * Represents a cryptocurrency asset with market data.&#10; * &#10; * This data class encapsulates all the information about a cryptocurrency asset&#10; * as provided by the CoinCap API.&#10; * &#10; * @property id Unique identifier for the asset&#10; * @property rank Market rank of the asset&#10; * @property symbol Trading symbol/ticker of the asset&#10; * @property name Full name of the cryptocurrency&#10; * @property supply Current circulating supply of the asset&#10; * @property maxSupply Maximum possible supply of the asset, null if unlimited&#10; * @property marketCapUsd Total market capitalization in USD&#10; * @property volumeUsd24Hr Trading volume in the last 24 hours in USD&#10; * @property priceUsd Current price in USD&#10; * @property changePercent24Hr Price change percentage in the last 24 hours&#10; * @property vwap24Hr Volume weighted average price in the last 24 hours&#10; * @property explorer URL to the asset's blockchain explorer&#10; */&#10;data class Asset(&#10;    val id: String,&#10;    val rank: String,&#10;    val symbol: String,&#10;    val name: String,&#10;    val supply: String,&#10;    val maxSupply: String?,&#10;    val marketCapUsd: String,&#10;    val volumeUsd24Hr: String,&#10;    val priceUsd: String,&#10;    val changePercent24Hr: String,&#10;    val vwap24Hr: String?,&#10;    val explorer: String?&#10;)&#10;&#10;/**&#10; * Response wrapper for a list of cryptocurrency assets.&#10; * &#10; * @property data The list of cryptocurrency assets&#10; * @property timestamp The server timestamp when the data was generated&#10; */&#10;data class AssetsResponse(&#10;    val data: List&lt;Asset&gt;,&#10;    val timestamp: Long&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Budget.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Budget.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;&#10;data class Budget(&#10;    val id: Long = 0,&#10;    val category: TransactionCategory,&#10;    val amount: Double,&#10;    val period: BudgetPeriod,&#10;    val spent: Double = 0.0&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;&#10;/**&#10; * Represents a spending budget for a specific transaction category.&#10; * &#10; * This class defines a budget with an amount limit for a specific category&#10; * over a defined time period (e.g., weekly, monthly).&#10; *&#10; * @property id Unique identifier for the budget&#10; * @property category The transaction category this budget applies to&#10; * @property amount The maximum amount allocated for this budget&#10; * @property period The time period for which this budget applies&#10; * @property spent The current amount spent against this budget&#10; */&#10;data class Budget(&#10;    val id: Long = 0,&#10;    val category: TransactionCategory,&#10;    val amount: Double,&#10;    val period: BudgetPeriod,&#10;    val spent: Double = 0.0&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/HistoryDataPoint.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/HistoryDataPoint.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;data class HistoryDataPoint(&#10;    val priceUsd: String,&#10;    val time: Long,&#10;    val date: String&#10;)&#10;&#10;data class HistoryResponse(&#10;    val data: List&lt;HistoryDataPoint&gt;,&#10;    val timestamp: Long&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;/**&#10; * Represents a single historical price data point for a cryptocurrency.&#10; * &#10; * @property priceUsd The price in USD at the specified time&#10; * @property time The timestamp in milliseconds&#10; * @property date The formatted date string&#10; */&#10;data class HistoryDataPoint(&#10;    val priceUsd: String,&#10;    val time: Long,&#10;    val date: String&#10;)&#10;&#10;/**&#10; * Response wrapper for historical price data.&#10; * &#10; * @property data The list of historical data points&#10; * @property timestamp The server timestamp when the data was generated&#10; */&#10;data class HistoryResponse(&#10;    val data: List&lt;HistoryDataPoint&gt;,&#10;    val timestamp: Long&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Receipt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Receipt.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;import android.os.Parcelable&#10;import kotlinx.parcelize.Parcelize&#10;&#10;@Parcelize&#10;data class Receipt(&#10;    val storeName: String?,&#10;    val date: String?,&#10;    val items: List&lt;ReceiptItem&gt;&#10;) : Parcelable {&#10;    val totalAmount: Double&#10;        get() = items.sumOf { it.price }&#10;}&#10;&#10;@Parcelize&#10;data class ReceiptItem(&#10;    val name: String,&#10;    val price: Double&#10;) : Parcelable" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;import android.os.Parcelable&#10;import kotlinx.parcelize.Parcelize&#10;&#10;/**&#10; * Represents a scanned receipt with store information and purchased items.&#10; *&#10; * This Parcelable class contains all the information extracted from a&#10; * scanned receipt, including store name, date, and a list of items.&#10; *&#10; * @property storeName The name of the store or merchant&#10; * @property date The date when the purchase was made&#10; * @property items List of items purchased in this receipt&#10; * @property totalAmount Computed total amount of all items in the receipt&#10; */&#10;@Parcelize&#10;data class Receipt(&#10;    val storeName: String?,&#10;    val date: String?,&#10;    val items: List&lt;ReceiptItem&gt;&#10;) : Parcelable {&#10;    val totalAmount: Double&#10;        get() = items.sumOf { it.price }&#10;}&#10;&#10;/**&#10; * Represents a single item in a receipt.&#10; *&#10; * @property name The name or description of the purchased item&#10; * @property price The price of the item&#10; */&#10;@Parcelize&#10;data class ReceiptItem(&#10;    val name: String,&#10;    val price: Double&#10;) : Parcelable" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/SettingsState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/SettingsState.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;data class AdditionalCost(&#10;    val label: String = &quot;&quot;,&#10;    val value: String = &quot;&quot;&#10;)&#10;&#10;data class SettingsState(&#10;    val name: String = &quot;&quot;,&#10;    val income: String = &quot;&quot;,&#10;    val rent: String = &quot;&quot;,&#10;    val electricity: String = &quot;&quot;,&#10;    val gas: String = &quot;&quot;,&#10;    val internet: String = &quot;&quot;,&#10;    val darkMode: Boolean = false,&#10;    val additionalCosts: List&lt;AdditionalCost&gt; = emptyList()&#10;) {&#10;    val appVersion: String = &quot;1.7.3&quot;&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;/**&#10; * Represents an additional cost item in user settings.&#10; * &#10; * @property label The name or description of the additional cost&#10; * @property value The monetary value of the additional cost as a string&#10; */&#10;data class AdditionalCost(&#10;    val label: String = &quot;&quot;,&#10;    val value: String = &quot;&quot;&#10;)&#10;&#10;/**&#10; * Represents the complete settings state of the application.&#10; * &#10; * This class stores all user settings including personal information,&#10; * income, regular expenses, and appearance preferences.&#10; *&#10; * @property name User's name&#10; * @property income User's income as a string&#10; * @property rent Monthly rent payment as a string&#10; * @property electricity Monthly electricity cost as a string&#10; * @property gas Monthly gas cost as a string&#10; * @property internet Monthly internet cost as a string&#10; * @property darkMode Whether dark mode is enabled&#10; * @property additionalCosts List of additional recurring costs defined by the user&#10; * @property appVersion Current version of the application&#10; */&#10;data class SettingsState(&#10;    val name: String = &quot;&quot;,&#10;    val income: String = &quot;&quot;,&#10;    val rent: String = &quot;&quot;,&#10;    val electricity: String = &quot;&quot;,&#10;    val gas: String = &quot;&quot;,&#10;    val internet: String = &quot;&quot;,&#10;    val darkMode: Boolean = false,&#10;    val additionalCosts: List&lt;AdditionalCost&gt; = emptyList()&#10;) {&#10;    val appVersion: String = &quot;1.7.3&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Transaction.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/Transaction.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;data class Transaction(&#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val title: String,&#10;    val description: String = &quot;&quot;,&#10;    val category: TransactionCategory,&#10;    val date: Long,&#10;    val isExpense: Boolean = true&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;/**&#10; * Represents a financial transaction in the application.&#10; *&#10; * This class encapsulates all information about a single financial transaction,&#10; * including amount, category, date, and whether it's an expense or income.&#10; *&#10; * @property id Unique identifier for the transaction&#10; * @property amount The monetary amount of the transaction&#10; * @property title Short title or name of the transaction&#10; * @property description Optional detailed description of the transaction&#10; * @property category The category this transaction belongs to&#10; * @property date Timestamp when this transaction occurred (in milliseconds)&#10; * @property isExpense Whether this transaction is an expense (true) or income (false)&#10; */&#10;data class Transaction(&#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val title: String,&#10;    val description: String = &quot;&quot;,&#10;    val category: TransactionCategory,&#10;    val date: Long,&#10;    val isExpense: Boolean = true&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/TransactionCategory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/model/TransactionCategory.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;&#10;data class TransactionCategory(&#10;    val id: Long = 0,&#10;    val name: String,&#10;    val color: Int,&#10;    val icon: Int&#10;)&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.model&#10;&#10;/**&#10; * Represents a category for classifying transactions.&#10; * &#10; * Categories help organize transactions by type and provide visual identification&#10; * through colors and icons.&#10; *&#10; * @property id Unique identifier for the category&#10; * @property name Display name of the category&#10; * @property color Color associated with this category (as an integer color value)&#10; * @property icon Resource ID for the icon representing this category&#10; */&#10;data class TransactionCategory(&#10;    val id: Long = 0,&#10;    val name: String,&#10;    val color: Int,&#10;    val icon: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/provider/PredefinedCategoriesProvider.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/provider/PredefinedCategoriesProvider.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.provider&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * Provider for predefined transaction categories.&#10; * This class provides a list of standard categories that are &#10; * immediately available in the app without database loading.&#10; */&#10;object PredefinedCategoriesProvider {&#10;    &#10;    /**&#10;     * Returns a list of predefined categories.&#10;     * These categories are always available and don't need to be loaded from the database.&#10;     *&#10;     * @param context The application context to access string resources&#10;     * @return List of predefined TransactionCategory objects&#10;     */&#10;    fun getPredefinedCategories(context: Context): List&lt;TransactionCategory&gt; {&#10;        return listOf(&#10;            TransactionCategory(&#10;                id = 1,&#10;                name = context.getString(R.string.category_groceries),&#10;                color = 0xFF4CAF50.toInt(), // Grün für Lebensmittel&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 2,&#10;                name = context.getString(R.string.category_housing),&#10;                color = 0xFF2196F3.toInt(), // Blau für Wohnen&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 3,&#10;                name = context.getString(R.string.category_transport),&#10;                color = 0xFF9C27B0.toInt(), // Lila für Transport&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 4,&#10;                name = context.getString(R.string.category_entertainment),&#10;                color = 0xFFFF9800.toInt(), // Orange für Unterhaltung&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 5,&#10;                name = context.getString(R.string.category_health),&#10;                color = 0xFFF44336.toInt(), // Rot für Gesundheit&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 6,&#10;                name = context.getString(R.string.category_shopping),&#10;                color = 0xFFE91E63.toInt(), // Pink für Einkaufen&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 7,&#10;                name = context.getString(R.string.category_education),&#10;                color = 0xFF3F51B5.toInt(), // Indigo für Bildung&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 8,&#10;                name = context.getString(R.string.category_salary),&#10;                color = 0xFF00BCD4.toInt(), // Cyan für Gehalt&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 9,&#10;                name = context.getString(R.string.category_gifts),&#10;                color = 0xFF8BC34A.toInt(), // Hellgrün für Geschenke&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 10,&#10;                name = context.getString(R.string.category_other),&#10;                color = 0xFF607D8B.toInt(), // Blaugrau für Sonstiges&#10;                icon = 0&#10;            )&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.provider&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * Provider for predefined transaction categories.&#10; * This class provides a list of standard categories that are &#10; * immediately available in the app without database loading.&#10; */&#10;object PredefinedCategoriesProvider {&#10;    &#10;    /**&#10;     * Returns a list of predefined categories.&#10;     * These categories are always available and don't need to be loaded from the database.&#10;     *&#10;     * @param context The application context to access string resources&#10;     * @return List of predefined TransactionCategory objects&#10;     */&#10;    fun getPredefinedCategories(context: Context): List&lt;TransactionCategory&gt; {&#10;        return listOf(&#10;            TransactionCategory(&#10;                id = 1,&#10;                name = context.getString(R.string.category_groceries),&#10;                color = 0xFF4CAF50.toInt(), // Green for groceries&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 2,&#10;                name = context.getString(R.string.category_housing),&#10;                color = 0xFF2196F3.toInt(), // Blue for housing&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 3,&#10;                name = context.getString(R.string.category_transport),&#10;                color = 0xFF9C27B0.toInt(), // Purple for transport&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 4,&#10;                name = context.getString(R.string.category_entertainment),&#10;                color = 0xFFFF9800.toInt(), // Orange for entertainment&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 5,&#10;                name = context.getString(R.string.category_health),&#10;                color = 0xFFF44336.toInt(), // Red for health&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 6,&#10;                name = context.getString(R.string.category_shopping),&#10;                color = 0xFFE91E63.toInt(), // Pink for shopping&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 7,&#10;                name = context.getString(R.string.category_education),&#10;                color = 0xFF3F51B5.toInt(), // Indigo for education&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 8,&#10;                name = context.getString(R.string.category_salary),&#10;                color = 0xFF00BCD4.toInt(), // Cyan for salary&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 9,&#10;                name = context.getString(R.string.category_gifts),&#10;                color = 0xFF8BC34A.toInt(), // Light green for gifts&#10;                icon = 0&#10;            ),&#10;            TransactionCategory(&#10;                id = 10,&#10;                name = context.getString(R.string.category_other),&#10;                color = 0xFF607D8B.toInt(), // Blue grey for other&#10;                icon = 0&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/repository/CategoryRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/repository/CategoryRepository.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.repository&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.mapper.CategoryMapper&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.provider.PredefinedCategoriesProvider&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.flow.first&#10;&#10;/**&#10; * Repository for managing transaction categories.&#10; * &#10; * Combines database categories with predefined categories and&#10; * automatically repairs database inconsistencies.&#10; *&#10; * @property categoryDao Data access object for category entities&#10; * @property transactionDao Data access object for transaction entities&#10; * @property context The application context for resources access&#10; */&#10;class CategoryRepository(&#10;    private val categoryDao: CategoryDao,&#10;    private val transactionDao: TransactionDao,&#10;    private val context: Context&#10;) {&#10;&#10;    /**&#10;     * Flow of all available categories.&#10;     * &#10;     * If the database is empty, returns predefined categories.&#10;     */&#10;    val allCategories: Flow&lt;List&lt;TransactionCategory&gt;&gt; = categoryDao.getAllCategories()&#10;        .map { dbCategories -&gt;&#10;            if (dbCategories.isEmpty()) {&#10;                // If no categories in DB, return predefined ones&#10;                PredefinedCategoriesProvider.getPredefinedCategories(context)&#10;            } else {&#10;                // Otherwise use DB categories&#10;                dbCategories.map { CategoryMapper.fromEntity(it) }&#10;            }&#10;        }&#10;&#10;    /**&#10;     * Initializes the database with predefined categories and&#10;     * repairs all existing transactions with invalid category references.&#10;     * &#10;     * This method should be called on first app startup.&#10;     */&#10;    suspend fun initializeDefaultCategoriesAndRepairDatabase() {&#10;        // 1. Prüfen ob Kategorien existieren&#10;        val existingCategories = categoryDao.getAllCategories().first()&#10;&#10;        if (existingCategories.isEmpty()) {&#10;            // 2. Standard-Kategorien einfügen&#10;            val defaultCategories = getDefaultCategories()&#10;            categoryDao.insertAll(defaultCategories)&#10;        }&#10;&#10;        // 3. Alle Kategorien nach der Initialisierung laden&#10;        val allCategories = categoryDao.getAllCategories().first()&#10;        val defaultCategoryId = allCategories.firstOrNull()?.id ?: 1&#10;&#10;        // 4. Prüfen ob Transaktionen mit ungültigen categoryId existieren&#10;        val orphanedCount = transactionDao.countTransactionsWithInvalidCategories()&#10;&#10;        if (orphanedCount &gt; 0) {&#10;            // Alle &quot;verwaisten&quot; Transaktionen zur ersten verfügbaren Kategorie zuweisen&#10;            transactionDao.updateCategoryIdForOrphanedTransactions(defaultCategoryId)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Gibt vordefinierte Kategorien als Fallback zurück.&#10;     * Diese werden verwendet, wenn die Datenbank leer ist.&#10;     */&#10;    fun getPredefinedCategories(): List&lt;TransactionCategory&gt; {&#10;        return PredefinedCategoriesProvider.getPredefinedCategories(context)&#10;    }&#10;&#10;    /**&#10;     * Retrieves a specific category by its ID.&#10;     * &#10;     * @param id The ID of the category to retrieve&#10;     * @return Flow emitting the category with the specified ID&#10;     */&#10;    fun getCategoryById(id: Long): Flow&lt;TransactionCategory&gt; {&#10;        return categoryDao.getCategoryById(id)&#10;            .map { CategoryMapper.fromEntity(it) }&#10;    }&#10;&#10;    /**&#10;     * Inserts a new category into the database.&#10;     */&#10;    suspend fun insertCategory(category: TransactionCategory): Long {&#10;        val entity = CategoryMapper.toEntity(category)&#10;        return categoryDao.insertCategory(entity)&#10;    }&#10;&#10;    /**&#10;     * Updates an existing category in the database.&#10;     */&#10;    suspend fun updateCategory(category: TransactionCategory) {&#10;        val entity = CategoryMapper.toEntity(category)&#10;        categoryDao.updateCategory(entity)&#10;    }&#10;&#10;    /**&#10;     * Deletes a category from the database.&#10;     */&#10;    suspend fun deleteCategory(category: TransactionCategory) {&#10;        val entity = CategoryMapper.toEntity(category)&#10;        categoryDao.deleteCategory(entity)&#10;    }&#10;&#10;    /**&#10;     * Erstellt die Standard CategoryEntity-Liste für die Datenbank.&#10;     */&#10;    private fun getDefaultCategories(): List&lt;CategoryEntity&gt; {&#10;        return listOf(&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_groceries),&#10;                color = 0xFF4CAF50.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_housing),&#10;                color = 0xFF2196F3.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_transport),&#10;                color = 0xFF9C27B0.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_entertainment),&#10;                color = 0xFFFF9800.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_health),&#10;                color = 0xFFF44336.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_shopping),&#10;                color = 0xFFE91E63.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_education),&#10;                color = 0xFF3F51B5.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_salary),&#10;                color = 0xFF00BCD4.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_gifts),&#10;                color = 0xFF8BC34A.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_other),&#10;                color = 0xFF607D8B.toInt(),&#10;                iconResId = 0&#10;            )&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.repository&#10;&#10;import android.content.Context&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.CategoryDao&#10;import com.pixelpioneer.moneymaster.data.local.db.dao.TransactionDao&#10;import com.pixelpioneer.moneymaster.data.local.entity.CategoryEntity&#10;import com.pixelpioneer.moneymaster.data.mapper.CategoryMapper&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.provider.PredefinedCategoriesProvider&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.flow.first&#10;&#10;/**&#10; * Repository for managing transaction categories.&#10; * &#10; * Combines database categories with predefined categories and&#10; * automatically repairs database inconsistencies.&#10; *&#10; * @property categoryDao Data access object for category entities&#10; * @property transactionDao Data access object for transaction entities&#10; * @property context The application context for resources access&#10; */&#10;class CategoryRepository(&#10;    private val categoryDao: CategoryDao,&#10;    private val transactionDao: TransactionDao,&#10;    private val context: Context&#10;) {&#10;&#10;    /**&#10;     * Flow of all available categories.&#10;     * &#10;     * If the database is empty, returns predefined categories.&#10;     */&#10;    val allCategories: Flow&lt;List&lt;TransactionCategory&gt;&gt; = categoryDao.getAllCategories()&#10;        .map { dbCategories -&gt;&#10;            if (dbCategories.isEmpty()) {&#10;                // If no categories in DB, return predefined ones&#10;                PredefinedCategoriesProvider.getPredefinedCategories(context)&#10;            } else {&#10;                // Otherwise use DB categories&#10;                dbCategories.map { CategoryMapper.fromEntity(it) }&#10;            }&#10;        }&#10;&#10;    /**&#10;     * Initializes the database with predefined categories and&#10;     * repairs all existing transactions with invalid category references.&#10;     * &#10;     * This method should be called on first app startup.&#10;     */&#10;    suspend fun initializeDefaultCategoriesAndRepairDatabase() {&#10;        // 1. Check if categories exist&#10;        val existingCategories = categoryDao.getAllCategories().first()&#10;&#10;        if (existingCategories.isEmpty()) {&#10;            // 2. Insert default categories&#10;            val defaultCategories = getDefaultCategories()&#10;            categoryDao.insertAll(defaultCategories)&#10;        }&#10;&#10;        // 3. Load all categories after initialization&#10;        val allCategories = categoryDao.getAllCategories().first()&#10;        val defaultCategoryId = allCategories.firstOrNull()?.id ?: 1&#10;&#10;        // 4. Check if transactions with invalid categoryId exist&#10;        val orphanedCount = transactionDao.countTransactionsWithInvalidCategories()&#10;&#10;        if (orphanedCount &gt; 0) {&#10;            // Assign all &quot;orphaned&quot; transactions to the first available category&#10;            transactionDao.updateCategoryIdForOrphanedTransactions(defaultCategoryId)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Returns predefined categories as a fallback.&#10;     * These are used when the database is empty.&#10;     * &#10;     * @return List of predefined transaction categories&#10;     */&#10;    fun getPredefinedCategories(): List&lt;TransactionCategory&gt; {&#10;        return PredefinedCategoriesProvider.getPredefinedCategories(context)&#10;    }&#10;&#10;    /**&#10;     * Retrieves a specific category by its ID.&#10;     * &#10;     * @param id The ID of the category to retrieve&#10;     * @return Flow emitting the category with the specified ID&#10;     */&#10;    fun getCategoryById(id: Long): Flow&lt;TransactionCategory&gt; {&#10;        return categoryDao.getCategoryById(id)&#10;            .map { CategoryMapper.fromEntity(it) }&#10;    }&#10;&#10;    /**&#10;     * Inserts a new category into the database.&#10;     * &#10;     * @param category The category to insert&#10;     * @return The ID of the newly inserted category&#10;     */&#10;    suspend fun insertCategory(category: TransactionCategory): Long {&#10;        val entity = CategoryMapper.toEntity(category)&#10;        return categoryDao.insertCategory(entity)&#10;    }&#10;&#10;    /**&#10;     * Updates an existing category in the database.&#10;     * &#10;     * @param category The category with updated values&#10;     */&#10;    suspend fun updateCategory(category: TransactionCategory) {&#10;        val entity = CategoryMapper.toEntity(category)&#10;        categoryDao.updateCategory(entity)&#10;    }&#10;&#10;    /**&#10;     * Deletes a category from the database.&#10;     * &#10;     * @param category The category to delete&#10;     */&#10;    suspend fun deleteCategory(category: TransactionCategory) {&#10;        val entity = CategoryMapper.toEntity(category)&#10;        categoryDao.deleteCategory(entity)&#10;    }&#10;&#10;    /**&#10;     * Creates the default CategoryEntity list for the database.&#10;     * &#10;     * @return List of default category entities&#10;     */&#10;    private fun getDefaultCategories(): List&lt;CategoryEntity&gt; {&#10;        return listOf(&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_groceries),&#10;                color = 0xFF4CAF50.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_housing),&#10;                color = 0xFF2196F3.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_transport),&#10;                color = 0xFF9C27B0.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_entertainment),&#10;                color = 0xFFFF9800.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_health),&#10;                color = 0xFFF44336.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_shopping),&#10;                color = 0xFFE91E63.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_education),&#10;                color = 0xFF3F51B5.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_salary),&#10;                color = 0xFF00BCD4.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_gifts),&#10;                color = 0xFF8BC34A.toInt(),&#10;                iconResId = 0&#10;            ),&#10;            CategoryEntity(&#10;                name = context.getString(R.string.category_other),&#10;                color = 0xFF607D8B.toInt(),&#10;                iconResId = 0&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/repository/MockRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/repository/MockRepository.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.repository&#10;&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.AssetsResponse&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.HistoryResponse&#10;import com.pixelpioneer.moneymaster.data.model.Receipt&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.preview.SampleData&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import kotlin.random.Random&#10;&#10;/**&#10; * Mock repository for testing and UI preview purposes.&#10; *&#10; * Provides in-memory implementations of all repository functionality with&#10; * artificial delays to simulate network and database operations.&#10; */&#10;class MockRepository {&#10;&#10;    private val _transactions = SampleData.sampleTransactions.toMutableList()&#10;&#10;    /**&#10;     * Returns a flow of all transactions.&#10;     *&#10;     * @return Flow emitting a list of all transactions with artificial delay&#10;     */&#10;    fun getAllTransactions(): Flow&lt;List&lt;Transaction&gt;&gt; = flow {&#10;        delay(500)&#10;        emit(_transactions.toList())&#10;    }&#10;&#10;    /**&#10;     * Inserts a new transaction.&#10;     *&#10;     * @param transaction The transaction to insert&#10;     * @return Generated ID for the new transaction&#10;     */&#10;    suspend fun insertTransaction(transaction: Transaction): Long {&#10;        delay(200)&#10;        val newId = (_transactions.maxOfOrNull { it.id } ?: 0) + 1&#10;        val newTransaction = transaction.copy(id = newId)&#10;        _transactions.add(newTransaction)&#10;        return newId&#10;    }&#10;&#10;    /**&#10;     * Updates an existing transaction.&#10;     *&#10;     * @param transaction The transaction with updated values&#10;     */&#10;    suspend fun updateTransaction(transaction: Transaction) {&#10;        delay(200)&#10;        val index = _transactions.indexOfFirst { it.id == transaction.id }&#10;        if (index != -1) {&#10;            _transactions[index] = transaction&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Deletes a transaction.&#10;     *&#10;     * @param transaction The transaction to delete&#10;     */&#10;    suspend fun deleteTransaction(transaction: Transaction) {&#10;        delay(200)&#10;        _transactions.removeIf { it.id == transaction.id }&#10;    }&#10;&#10;    /**&#10;     * Returns transactions filtered by category ID.&#10;     *&#10;     * @param categoryId The ID of the category to filter by&#10;     * @return Flow emitting transactions for the specified category&#10;     */&#10;    fun getTransactionsByCategory(categoryId: Long): Flow&lt;List&lt;Transaction&gt;&gt; = flow {&#10;        delay(300)&#10;        emit(_transactions.filter { it.category.id == categoryId })&#10;    }&#10;&#10;    private val _categories = SampleData.sampleCategories.toMutableList()&#10;&#10;    /**&#10;     * Returns a flow of all categories.&#10;     *&#10;     * @return Flow emitting a list of all categories with artificial delay&#10;     */&#10;    fun getAllCategories(): Flow&lt;List&lt;TransactionCategory&gt;&gt; = flow {&#10;        delay(300)&#10;        emit(_categories.toList())&#10;    }&#10;&#10;    /**&#10;     * Inserts a new category.&#10;     *&#10;     * @param category The category to insert&#10;     * @return Generated ID for the new category&#10;     */&#10;    suspend fun insertCategory(category: TransactionCategory): Long {&#10;        delay(200)&#10;        val newId = (_categories.maxOfOrNull { it.id } ?: 0) + 1&#10;        val newCategory = category.copy(id = newId)&#10;        _categories.add(newCategory)&#10;        return newId&#10;    }&#10;&#10;    /**&#10;     * Updates an existing category.&#10;     *&#10;     * @param category The category with updated values&#10;     */&#10;    suspend fun updateCategory(category: TransactionCategory) {&#10;        delay(200)&#10;        val index = _categories.indexOfFirst { it.id == category.id }&#10;        if (index != -1) {&#10;            _categories[index] = category&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Deletes a category.&#10;     *&#10;     * @param category The category to delete&#10;     */&#10;    suspend fun deleteCategory(category: TransactionCategory) {&#10;        delay(200)&#10;        _categories.removeIf { it.id == category.id }&#10;    }&#10;&#10;    // Mock Budget Repository&#10;    private val _budgets = SampleData.sampleBudgets.toMutableList()&#10;&#10;    /**&#10;     * Returns a flow of all budgets.&#10;     *&#10;     * @return Flow emitting a list of all budgets with artificial delay&#10;     */&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt; = flow {&#10;        delay(400)&#10;        emit(_budgets.toList())&#10;    }&#10;&#10;    /**&#10;     * Inserts a new budget.&#10;     *&#10;     * @param budget The budget to insert&#10;     * @return Generated ID for the new budget&#10;     */&#10;    suspend fun insertBudget(budget: Budget): Long {&#10;        delay(200)&#10;        val newId = (_budgets.maxOfOrNull { it.id } ?: 0) + 1&#10;        val newBudget = budget.copy(id = newId)&#10;        _budgets.add(newBudget)&#10;        return newId&#10;    }&#10;&#10;    suspend fun updateBudget(budget: Budget) {&#10;        delay(200)&#10;        val index = _budgets.indexOfFirst { it.id == budget.id }&#10;        if (index != -1) {&#10;            _budgets[index] = budget&#10;        }&#10;    }&#10;&#10;    suspend fun deleteBudget(budget: Budget) {&#10;        delay(200)&#10;        _budgets.removeIf { it.id == budget.id }&#10;    }&#10;&#10;    fun getBudgetsByPeriod(period: BudgetPeriod): Flow&lt;List&lt;Budget&gt;&gt; = flow {&#10;        delay(300)&#10;        emit(_budgets.filter { it.period == period })&#10;    }&#10;&#10;    suspend fun getAssets(): Result&lt;AssetsResponse&gt; {&#10;        delay(1000)&#10;        return if (Random.nextBoolean()) {&#10;            Result.success(SampleData.sampleAssetsResponse)&#10;        } else {&#10;            Result.failure(Exception(&quot;Netzwerkfehler&quot;))&#10;        }&#10;    }&#10;&#10;    suspend fun getAssetHistory(assetId: String): Result&lt;HistoryResponse&gt; {&#10;        delay(800)&#10;        return if (Random.nextBoolean()) {&#10;            Result.success(SampleData.sampleHistoryResponse)&#10;        } else {&#10;            Result.failure(Exception(&quot;Historische Daten nicht verfügbar&quot;))&#10;        }&#10;    }&#10;&#10;    suspend fun scanReceipt(imageData: ByteArray): Result&lt;Receipt&gt; {&#10;        delay(2000)&#10;        return if (Random.nextBoolean()) {&#10;            Result.success(SampleData.sampleReceipt)&#10;        } else {&#10;            Result.failure(Exception(&quot;Beleg konnte nicht gescannt werden&quot;))&#10;        }&#10;    }&#10;&#10;    fun getTransactionsByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;Transaction&gt;&gt; = flow {&#10;        delay(400)&#10;        emit(_transactions.filter { it.date in startDate..endDate })&#10;    }&#10;&#10;    fun getExpensesByCategory(): Flow&lt;Map&lt;TransactionCategory, Double&gt;&gt; = flow {&#10;        delay(500)&#10;        val expenses = _transactions.filter { it.isExpense }&#10;            .groupBy { it.category }&#10;            .mapValues { (_, transactions) -&gt; transactions.sumOf { it.amount } }&#10;        emit(expenses)&#10;    }&#10;&#10;    fun getMonthlyTotals(): Flow&lt;Map&lt;String, Double&gt;&gt; = flow {&#10;        delay(600)&#10;        val monthlyData = mapOf(&#10;            &quot;Januar&quot; to 1250.50,&#10;            &quot;Februar&quot; to 1180.25,&#10;            &quot;März&quot; to 1320.75,&#10;            &quot;April&quot; to 1095.30&#10;        )&#10;        emit(monthlyData)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.repository&#10;&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.AssetsResponse&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.HistoryResponse&#10;import com.pixelpioneer.moneymaster.data.model.Receipt&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.preview.SampleData&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import kotlin.random.Random&#10;&#10;/**&#10; * Mock repository for testing and UI preview purposes.&#10; *&#10; * Provides in-memory implementations of all repository functionality with&#10; * artificial delays to simulate network and database operations.&#10; */&#10;class MockRepository {&#10;&#10;    private val _transactions = SampleData.sampleTransactions.toMutableList()&#10;&#10;    /**&#10;     * Returns a flow of all transactions.&#10;     *&#10;     * @return Flow emitting a list of all transactions with artificial delay&#10;     */&#10;    fun getAllTransactions(): Flow&lt;List&lt;Transaction&gt;&gt; = flow {&#10;        delay(500)&#10;        emit(_transactions.toList())&#10;    }&#10;&#10;    /**&#10;     * Inserts a new transaction.&#10;     *&#10;     * @param transaction The transaction to insert&#10;     * @return Generated ID for the new transaction&#10;     */&#10;    suspend fun insertTransaction(transaction: Transaction): Long {&#10;        delay(200)&#10;        val newId = (_transactions.maxOfOrNull { it.id } ?: 0) + 1&#10;        val newTransaction = transaction.copy(id = newId)&#10;        _transactions.add(newTransaction)&#10;        return newId&#10;    }&#10;&#10;    /**&#10;     * Updates an existing transaction.&#10;     *&#10;     * @param transaction The transaction with updated values&#10;     */&#10;    suspend fun updateTransaction(transaction: Transaction) {&#10;        delay(200)&#10;        val index = _transactions.indexOfFirst { it.id == transaction.id }&#10;        if (index != -1) {&#10;            _transactions[index] = transaction&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Deletes a transaction.&#10;     *&#10;     * @param transaction The transaction to delete&#10;     */&#10;    suspend fun deleteTransaction(transaction: Transaction) {&#10;        delay(200)&#10;        _transactions.removeIf { it.id == transaction.id }&#10;    }&#10;&#10;    /**&#10;     * Returns transactions filtered by category ID.&#10;     *&#10;     * @param categoryId The ID of the category to filter by&#10;     * @return Flow emitting transactions for the specified category&#10;     */&#10;    fun getTransactionsByCategory(categoryId: Long): Flow&lt;List&lt;Transaction&gt;&gt; = flow {&#10;        delay(300)&#10;        emit(_transactions.filter { it.category.id == categoryId })&#10;    }&#10;&#10;    private val _categories = SampleData.sampleCategories.toMutableList()&#10;&#10;    /**&#10;     * Returns a flow of all categories.&#10;     *&#10;     * @return Flow emitting a list of all categories with artificial delay&#10;     */&#10;    fun getAllCategories(): Flow&lt;List&lt;TransactionCategory&gt;&gt; = flow {&#10;        delay(300)&#10;        emit(_categories.toList())&#10;    }&#10;&#10;    /**&#10;     * Inserts a new category.&#10;     *&#10;     * @param category The category to insert&#10;     * @return Generated ID for the new category&#10;     */&#10;    suspend fun insertCategory(category: TransactionCategory): Long {&#10;        delay(200)&#10;        val newId = (_categories.maxOfOrNull { it.id } ?: 0) + 1&#10;        val newCategory = category.copy(id = newId)&#10;        _categories.add(newCategory)&#10;        return newId&#10;    }&#10;&#10;    /**&#10;     * Updates an existing category.&#10;     *&#10;     * @param category The category with updated values&#10;     */&#10;    suspend fun updateCategory(category: TransactionCategory) {&#10;        delay(200)&#10;        val index = _categories.indexOfFirst { it.id == category.id }&#10;        if (index != -1) {&#10;            _categories[index] = category&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Deletes a category.&#10;     *&#10;     * @param category The category to delete&#10;     */&#10;    suspend fun deleteCategory(category: TransactionCategory) {&#10;        delay(200)&#10;        _categories.removeIf { it.id == category.id }&#10;    }&#10;&#10;    // Mock Budget Repository&#10;    private val _budgets = SampleData.sampleBudgets.toMutableList()&#10;&#10;    /**&#10;     * Returns a flow of all budgets.&#10;     *&#10;     * @return Flow emitting a list of all budgets with artificial delay&#10;     */&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt; = flow {&#10;        delay(400)&#10;        emit(_budgets.toList())&#10;    }&#10;&#10;    /**&#10;     * Inserts a new budget.&#10;     *&#10;     * @param budget The budget to insert&#10;     * @return Generated ID for the new budget&#10;     */&#10;    suspend fun insertBudget(budget: Budget): Long {&#10;        delay(200)&#10;        val newId = (_budgets.maxOfOrNull { it.id } ?: 0) + 1&#10;        val newBudget = budget.copy(id = newId)&#10;        _budgets.add(newBudget)&#10;        return newId&#10;    }&#10;&#10;    /**&#10;     * Updates an existing budget.&#10;     *&#10;     * @param budget The budget with updated values&#10;     */&#10;    suspend fun updateBudget(budget: Budget) {&#10;        delay(200)&#10;        val index = _budgets.indexOfFirst { it.id == budget.id }&#10;        if (index != -1) {&#10;            _budgets[index] = budget&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Deletes a budget.&#10;     *&#10;     * @param budget The budget to delete&#10;     */&#10;    suspend fun deleteBudget(budget: Budget) {&#10;        delay(200)&#10;        _budgets.removeIf { it.id == budget.id }&#10;    }&#10;&#10;    /**&#10;     * Returns budgets filtered by period.&#10;     *&#10;     * @param period The budget period to filter by&#10;     * @return Flow emitting budgets for the specified period&#10;     */&#10;    fun getBudgetsByPeriod(period: BudgetPeriod): Flow&lt;List&lt;Budget&gt;&gt; = flow {&#10;        delay(300)&#10;        emit(_budgets.filter { it.period == period })&#10;    }&#10;&#10;    /**&#10;     * Simulates fetching cryptocurrency assets.&#10;     *&#10;     * @return Result containing either sample assets or a simulated error&#10;     */&#10;    suspend fun getAssets(): Result&lt;AssetsResponse&gt; {&#10;        delay(1000)&#10;        return if (Random.nextBoolean()) {&#10;            Result.success(SampleData.sampleAssetsResponse)&#10;        } else {&#10;            Result.failure(Exception(&quot;Network error&quot;))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Simulates fetching historical data for a cryptocurrency asset.&#10;     *&#10;     * @param assetId The ID of the asset to fetch history for&#10;     * @return Result containing either sample history data or a simulated error&#10;     */&#10;    suspend fun getAssetHistory(assetId: String): Result&lt;HistoryResponse&gt; {&#10;        delay(800)&#10;        return if (Random.nextBoolean()) {&#10;            Result.success(SampleData.sampleHistoryResponse)&#10;        } else {&#10;            Result.failure(Exception(&quot;Historical data not available&quot;))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Simulates scanning a receipt from image data.&#10;     *&#10;     * @param imageData The image data of the receipt to scan&#10;     * @return Result containing either a sample receipt or a simulated error&#10;     */&#10;    suspend fun scanReceipt(imageData: ByteArray): Result&lt;Receipt&gt; {&#10;        delay(2000)&#10;        return if (Random.nextBoolean()) {&#10;            Result.success(SampleData.sampleReceipt)&#10;        } else {&#10;            Result.failure(Exception(&quot;Receipt could not be scanned&quot;))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Returns transactions filtered by date range.&#10;     *&#10;     * @param startDate The start timestamp of the date range&#10;     * @param endDate The end timestamp of the date range&#10;     * @return Flow emitting transactions within the specified date range&#10;     */&#10;    fun getTransactionsByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;Transaction&gt;&gt; = flow {&#10;        delay(400)&#10;        emit(_transactions.filter { it.date in startDate..endDate })&#10;    }&#10;&#10;    /**&#10;     * Returns expenses grouped by category.&#10;     *&#10;     * @return Flow emitting a map of categories to their total expense amounts&#10;     */&#10;    fun getExpensesByCategory(): Flow&lt;Map&lt;TransactionCategory, Double&gt;&gt; = flow {&#10;        delay(500)&#10;        val expenses = _transactions.filter { it.isExpense }&#10;            .groupBy { it.category }&#10;            .mapValues { (_, transactions) -&gt; transactions.sumOf { it.amount } }&#10;        emit(expenses)&#10;    }&#10;&#10;    /**&#10;     * Returns monthly totals for expenses.&#10;     *&#10;     * @return Flow emitting a map of month names to their total expense amounts&#10;     */&#10;    fun getMonthlyTotals(): Flow&lt;Map&lt;String, Double&gt;&gt; = flow {&#10;        delay(600)&#10;        val monthlyData = mapOf(&#10;            &quot;January&quot; to 1250.50,&#10;            &quot;February&quot; to 1180.25,&#10;            &quot;March&quot; to 1320.75,&#10;            &quot;April&quot; to 1095.30&#10;        )&#10;        emit(monthlyData)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/repository/SettingsRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/data/repository/SettingsRepository.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.data.repository&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import com.pixelpioneer.moneymaster.data.model.AdditionalCost&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;&#10;class SettingsRepository(context: Context) {&#10;    private val prefs: SharedPreferences =&#10;        context.getSharedPreferences(&quot;settings&quot;, Context.MODE_PRIVATE)&#10;&#10;    fun saveName(name: String) = prefs.edit { putString(&quot;name&quot;, name) }&#10;    fun getName(): String = prefs.getString(&quot;name&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    fun saveIncome(income: String) = prefs.edit { putString(&quot;income&quot;, income) }&#10;    fun getIncome(): String = prefs.getString(&quot;income&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    fun saveDarkMode(enabled: Boolean) = prefs.edit { putBoolean(&quot;darkMode&quot;, enabled) }&#10;    fun isDarkMode(): Boolean = prefs.getBoolean(&quot;darkMode&quot;, false)&#10;&#10;    fun saveRent(rent: String) = prefs.edit { putString(&quot;rent&quot;, rent) }&#10;    fun getRent(): String = prefs.getString(&quot;rent&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    fun saveElectricity(electricity: String) = prefs.edit { putString(&quot;electricity&quot;, electricity) }&#10;    fun getElectricity(): String = prefs.getString(&quot;electricity&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    fun saveGas(gas: String) = prefs.edit { putString(&quot;gas&quot;, gas) }&#10;    fun getGas(): String = prefs.getString(&quot;gas&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    fun saveInternet(internet: String) = prefs.edit { putString(&quot;internet&quot;, internet) }&#10;    fun getInternet(): String = prefs.getString(&quot;internet&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    fun saveAdditionalCosts(costs: List&lt;AdditionalCost&gt;) {&#10;        val jsonArray = JSONArray()&#10;        costs.forEach {&#10;            val obj = JSONObject()&#10;            obj.put(&quot;label&quot;, it.label)&#10;            obj.put(&quot;value&quot;, it.value)&#10;            jsonArray.put(obj)&#10;        }&#10;        prefs.edit().putString(&quot;additionalCosts&quot;, jsonArray.toString()).apply()&#10;    }&#10;&#10;    fun getAdditionalCosts(): List&lt;AdditionalCost&gt; {&#10;        val json = prefs.getString(&quot;additionalCosts&quot;, null) ?: return emptyList()&#10;        val result = mutableListOf&lt;AdditionalCost&gt;()&#10;        try {&#10;            val array = JSONArray(json)&#10;            for (i in 0 until array.length()) {&#10;                val obj = array.getJSONObject(i)&#10;                result.add(&#10;                    AdditionalCost(&#10;                        label = obj.optString(&quot;label&quot;, &quot;&quot;),&#10;                        value = obj.optString(&quot;value&quot;, &quot;&quot;)&#10;                    )&#10;                )&#10;            }&#10;        } catch (_: Exception) {&#10;        }&#10;        return result&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.data.repository&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import com.pixelpioneer.moneymaster.data.model.AdditionalCost&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;&#10;/**&#10; * Repository for managing application settings and user preferences.&#10; *&#10; * Handles storing and retrieving user settings using SharedPreferences,&#10; * including personal details, financial information, and app appearance preferences.&#10; *&#10; * @property context The application context for SharedPreferences access&#10; */&#10;class SettingsRepository(context: Context) {&#10;    private val prefs: SharedPreferences =&#10;        context.getSharedPreferences(&quot;settings&quot;, Context.MODE_PRIVATE)&#10;&#10;    /**&#10;     * Saves the user's name.&#10;     *&#10;     * @param name The user's name to save&#10;     */&#10;    fun saveName(name: String) = prefs.edit { putString(&quot;name&quot;, name) }&#10;&#10;    /**&#10;     * Retrieves the user's name.&#10;     *&#10;     * @return The user's name, or empty string if not set&#10;     */&#10;    fun getName(): String = prefs.getString(&quot;name&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    /**&#10;     * Saves the user's income.&#10;     *&#10;     * @param income The user's income to save&#10;     */&#10;    fun saveIncome(income: String) = prefs.edit { putString(&quot;income&quot;, income) }&#10;&#10;    /**&#10;     * Retrieves the user's income.&#10;     *&#10;     * @return The user's income, or empty string if not set&#10;     */&#10;    fun getIncome(): String = prefs.getString(&quot;income&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    /**&#10;     * Saves the dark mode setting.&#10;     *&#10;     * @param enabled Whether dark mode should be enabled&#10;     */&#10;    fun saveDarkMode(enabled: Boolean) = prefs.edit { putBoolean(&quot;darkMode&quot;, enabled) }&#10;&#10;    /**&#10;     * Checks if dark mode is enabled.&#10;     *&#10;     * @return True if dark mode is enabled, false otherwise&#10;     */&#10;    fun isDarkMode(): Boolean = prefs.getBoolean(&quot;darkMode&quot;, false)&#10;&#10;    /**&#10;     * Saves the user's rent expense.&#10;     *&#10;     * @param rent The rent amount to save&#10;     */&#10;    fun saveRent(rent: String) = prefs.edit { putString(&quot;rent&quot;, rent) }&#10;&#10;    /**&#10;     * Retrieves the user's rent expense.&#10;     *&#10;     * @return The rent amount, or empty string if not set&#10;     */&#10;    fun getRent(): String = prefs.getString(&quot;rent&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    /**&#10;     * Saves the user's electricity expense.&#10;     *&#10;     * @param electricity The electricity amount to save&#10;     */&#10;    fun saveElectricity(electricity: String) = prefs.edit { putString(&quot;electricity&quot;, electricity) }&#10;&#10;    /**&#10;     * Retrieves the user's electricity expense.&#10;     *&#10;     * @return The electricity amount, or empty string if not set&#10;     */&#10;    fun getElectricity(): String = prefs.getString(&quot;electricity&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    /**&#10;     * Saves the user's gas expense.&#10;     *&#10;     * @param gas The gas amount to save&#10;     */&#10;    fun saveGas(gas: String) = prefs.edit { putString(&quot;gas&quot;, gas) }&#10;&#10;    /**&#10;     * Retrieves the user's gas expense.&#10;     *&#10;     * @return The gas amount, or empty string if not set&#10;     */&#10;    fun getGas(): String = prefs.getString(&quot;gas&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    /**&#10;     * Saves the user's internet expense.&#10;     *&#10;     * @param internet The internet amount to save&#10;     */&#10;    fun saveInternet(internet: String) = prefs.edit { putString(&quot;internet&quot;, internet) }&#10;&#10;    /**&#10;     * Retrieves the user's internet expense.&#10;     *&#10;     * @return The internet amount, or empty string if not set&#10;     */&#10;    fun getInternet(): String = prefs.getString(&quot;internet&quot;, &quot;&quot;) ?: &quot;&quot;&#10;&#10;    /**&#10;     * Saves the list of additional costs defined by the user.&#10;     *&#10;     * Converts the list to JSON format before storing in SharedPreferences.&#10;     *&#10;     * @param costs The list of additional costs to save&#10;     */&#10;    fun saveAdditionalCosts(costs: List&lt;AdditionalCost&gt;) {&#10;        val jsonArray = JSONArray()&#10;        costs.forEach {&#10;            val obj = JSONObject()&#10;            obj.put(&quot;label&quot;, it.label)&#10;            obj.put(&quot;value&quot;, it.value)&#10;            jsonArray.put(obj)&#10;        }&#10;        prefs.edit().putString(&quot;additionalCosts&quot;, jsonArray.toString()).apply()&#10;    }&#10;&#10;    /**&#10;     * Retrieves the list of additional costs defined by the user.&#10;     *&#10;     * Parses the stored JSON data back into a list of AdditionalCost objects.&#10;     *&#10;     * @return The list of additional costs, or empty list if none are set or an error occurs&#10;     */&#10;    fun getAdditionalCosts(): List&lt;AdditionalCost&gt; {&#10;        val json = prefs.getString(&quot;additionalCosts&quot;, null) ?: return emptyList()&#10;        val result = mutableListOf&lt;AdditionalCost&gt;()&#10;        try {&#10;            val array = JSONArray(json)&#10;            for (i in 0 until array.length()) {&#10;                val obj = array.getJSONObject(i)&#10;                result.add(&#10;                    AdditionalCost(&#10;                        label = obj.optString(&quot;label&quot;, &quot;&quot;),&#10;                        value = obj.optString(&quot;value&quot;, &quot;&quot;)&#10;                    )&#10;                )&#10;            }&#10;        } catch (_: Exception) {&#10;        }&#10;        return result&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/preview/DashboardScreenPreview.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/preview/DashboardScreenPreview.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.preview&#10;&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.pixelpioneer.moneymaster.ui.components.common.buttons.ViewAllTransactionsButton&#10;import com.pixelpioneer.moneymaster.ui.components.features.dashboard.BudgetOverview&#10;import com.pixelpioneer.moneymaster.ui.components.common.cards.FinancialSummaryCards&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.RecentTransactionItem&#10;import com.pixelpioneer.moneymaster.ui.components.common.empty.EmptyBudgetsList&#10;import com.pixelpioneer.moneymaster.ui.components.common.empty.EmptyTransactionsList&#10;import com.pixelpioneer.moneymaster.ui.navigation.MoneyMasterBottomNavigation&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.FinancialSummary&#10;&#10;@Composable&#10;@Preview(&#10;    showBackground = true,&#10;&#10;    )&#10;fun DashboardScreenPreview() {&#10;    MoneyMasterTheme(&#10;        darkTheme = true,&#10;        dynamicColor = false&#10;    ) {&#10;&#10;        val navController = rememberNavController()&#10;&#10;        DashboardScreenMock(&#10;            navController = navController&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun DashboardScreenMock(&#10;    navController: NavController&#10;) {&#10;    // Statische Mock-Daten für Preview&#10;    val mockTransactions = SampleData.sampleTransactions&#10;    val mockBudgets = SampleData.sampleBudgets&#10;&#10;    // Calculate financial summary from mock data&#10;    val totalIncome = mockTransactions.filter { !it.isExpense }.sumOf { it.amount }&#10;    val totalExpenses = mockTransactions.filter { it.isExpense }.sumOf { it.amount }&#10;    val balance = totalIncome - totalExpenses&#10;&#10;    val financialSummary = FinancialSummary(&#10;        totalIncome = totalIncome,&#10;        totalExpenses = totalExpenses,&#10;        balance = balance&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = { /* Mock action */ }) {&#10;                        Icon(Icons.Filled.Add, contentDescription = &quot;Add Transaction&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = { MoneyMasterBottomNavigation(navController) },&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // Financial Summary Cards&#10;            item {&#10;                FinancialSummaryCards(financialSummary)&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                Text(&#10;                    text = &quot;Recent Transactions&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;&#10;            // Recent Transactions&#10;            if (mockTransactions.isNotEmpty()) {&#10;                val recentTransactions = mockTransactions.take(5)&#10;&#10;                items(recentTransactions) { transaction -&gt;&#10;                    RecentTransactionItem(&#10;                        transaction = transaction,&#10;                        onClick = { /* Mock click */ }&#10;                    )&#10;                }&#10;&#10;                if (mockTransactions.size &gt; 5) {&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        ViewAllTransactionsButton(&#10;                            onClick = { /* Mock click */ }&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                item {&#10;                    EmptyTransactionsList(&#10;                        onAddTransaction = { /* Mock action */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Budget Overview Section&#10;            item {&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                Text(&#10;                    text = &quot;Budget Overview&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (mockBudgets.isNotEmpty()) {&#10;                    BudgetOverview(&#10;                        budgets = mockBudgets,&#10;                        onBudgetsClick = { /* Mock click */ }&#10;                    )&#10;                } else {&#10;                    EmptyBudgetsList(&#10;                        onAddBudget = { /* Mock action */ }&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.preview&#10;&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.pixelpioneer.moneymaster.ui.components.common.buttons.ViewAllTransactionsButton&#10;import com.pixelpioneer.moneymaster.ui.components.features.dashboard.BudgetOverview&#10;import com.pixelpioneer.moneymaster.ui.components.common.cards.FinancialSummaryCards&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.RecentTransactionItem&#10;import com.pixelpioneer.moneymaster.ui.components.common.empty.EmptyBudgetsList&#10;import com.pixelpioneer.moneymaster.ui.components.common.empty.EmptyTransactionsList&#10;import com.pixelpioneer.moneymaster.ui.navigation.MoneyMasterBottomNavigation&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.FinancialSummary&#10;&#10;/**&#10; * Preview composable for the Dashboard screen.&#10; *&#10; * This composable demonstrates how the Dashboard screen appears&#10; * in the Android Studio preview panel with mock data.&#10; */&#10;@Composable&#10;@Preview(&#10;    showBackground = true,&#10;)&#10;fun DashboardScreenPreview() {&#10;    MoneyMasterTheme(&#10;        darkTheme = true,&#10;        dynamicColor = false&#10;    ) {&#10;        val navController = rememberNavController()&#10;&#10;        DashboardScreenMock(&#10;            navController = navController&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Mock implementation of the Dashboard screen for previews.&#10; *&#10; * This composable creates a static representation of the Dashboard&#10; * using sample data for previewing purposes.&#10; *&#10; * @param navController Navigation controller for screen transitions&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun DashboardScreenMock(&#10;    navController: NavController&#10;) {&#10;    // Static mock data for preview&#10;    val mockTransactions = SampleData.sampleTransactions&#10;    val mockBudgets = SampleData.sampleBudgets&#10;&#10;    // Calculate financial summary from mock data&#10;    val totalIncome = mockTransactions.filter { !it.isExpense }.sumOf { it.amount }&#10;    val totalExpenses = mockTransactions.filter { it.isExpense }.sumOf { it.amount }&#10;    val balance = totalIncome - totalExpenses&#10;&#10;    val financialSummary = FinancialSummary(&#10;        totalIncome = totalIncome,&#10;        totalExpenses = totalExpenses,&#10;        balance = balance&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = { /* Mock action */ }) {&#10;                        Icon(Icons.Filled.Add, contentDescription = &quot;Add Transaction&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = { MoneyMasterBottomNavigation(navController) },&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // Financial Summary Cards&#10;            item {&#10;                FinancialSummaryCards(financialSummary)&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                Text(&#10;                    text = &quot;Recent Transactions&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;&#10;            // Recent Transactions&#10;            if (mockTransactions.isNotEmpty()) {&#10;                val recentTransactions = mockTransactions.take(5)&#10;&#10;                items(recentTransactions) { transaction -&gt;&#10;                    RecentTransactionItem(&#10;                        transaction = transaction,&#10;                        onClick = { /* Mock click */ }&#10;                    )&#10;                }&#10;&#10;                if (mockTransactions.size &gt; 5) {&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        ViewAllTransactionsButton(&#10;                            onClick = { /* Mock click */ }&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                item {&#10;                    EmptyTransactionsList(&#10;                        onAddTransaction = { /* Mock action */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Budget Overview Section&#10;            item {&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                Text(&#10;                    text = &quot;Budget Overview&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (mockBudgets.isNotEmpty()) {&#10;                    BudgetOverview(&#10;                        budgets = mockBudgets,&#10;                        onBudgetsClick = { /* Mock click */ }&#10;                    )&#10;                } else {&#10;                    EmptyBudgetsList(&#10;                        onAddBudget = { /* Mock action */ }&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/preview/SampleData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/preview/SampleData.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.preview&#10;&#10;import android.graphics.Color&#10;import androidx.core.graphics.toColorInt&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.AssetsResponse&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.data.model.HistoryResponse&#10;import com.pixelpioneer.moneymaster.data.model.Receipt&#10;import com.pixelpioneer.moneymaster.data.model.ReceiptItem&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;object SampleData {&#10;&#10;    // Sample Transaction Categories&#10;    val sampleCategories = listOf(&#10;        TransactionCategory(&#10;            id = 1,&#10;            name = &quot;Lebensmittel&quot;,&#10;            color = &quot;#4CAF50&quot;.toColorInt(),&#10;            icon = R.drawable.ic_food&#10;        ),&#10;        TransactionCategory(&#10;            id = 2,&#10;            name = &quot;Transport&quot;,&#10;            color = &quot;#2196F3&quot;.toColorInt(),&#10;            icon = R.drawable.ic_transport&#10;        ),&#10;        TransactionCategory(&#10;            id = 3,&#10;            name = &quot;Unterhaltung&quot;,&#10;            color = Color.parseColor(&quot;#FF9800&quot;),&#10;            icon = R.drawable.ic_entertainment&#10;        ),&#10;        TransactionCategory(&#10;            id = 4,&#10;            name = &quot;Gesundheit&quot;,&#10;            color = Color.parseColor(&quot;#E91E63&quot;),&#10;            icon = R.drawable.ic_heart&#10;        ),&#10;        TransactionCategory(&#10;            id = 5,&#10;            name = &quot;Bildung&quot;,&#10;            color = Color.parseColor(&quot;#9C27B0&quot;),&#10;            icon = R.drawable.ic_school&#10;        )&#10;    )&#10;&#10;    // Sample Transactions&#10;    val sampleTransactions = listOf(&#10;        Transaction(&#10;            id = 1,&#10;            amount = 45.67,&#10;            title = &quot;Supermarkt Einkauf&quot;,&#10;            description = &quot;Wocheneinkauf bei Rewe&quot;,&#10;            category = sampleCategories[0],&#10;            date = System.currentTimeMillis() - 86400000, // Yesterday&#10;            isExpense = true&#10;        ),&#10;        Transaction(&#10;            id = 2,&#10;            amount = 12.50,&#10;            title = &quot;Bus Ticket&quot;,&#10;            description = &quot;Monatskarte&quot;,&#10;            category = sampleCategories[1],&#10;            date = System.currentTimeMillis() - 172800000, // 2 days ago&#10;            isExpense = true&#10;        ),&#10;        Transaction(&#10;            id = 3,&#10;            amount = 25.00,&#10;            title = &quot;Kino&quot;,&#10;            description = &quot;Avengers Endgame&quot;,&#10;            category = sampleCategories[2],&#10;            date = System.currentTimeMillis() - 259200000, // 3 days ago&#10;            isExpense = true&#10;        ),&#10;        Transaction(&#10;            id = 4,&#10;            amount = 2500.00,&#10;            title = &quot;Gehalt&quot;,&#10;            description = &quot;Monatliches Gehalt&quot;,&#10;            category = TransactionCategory(&#10;                6,&#10;                &quot;Einkommen&quot;,&#10;                Color.parseColor(&quot;#4CAF50&quot;),&#10;                R.drawable.ic_finance_chip&#10;            ),&#10;            date = System.currentTimeMillis() - 604800000, // 1 week ago&#10;            isExpense = false&#10;        ),&#10;        Transaction(&#10;            id = 5,&#10;            amount = 15.99,&#10;            title = &quot;Netflix&quot;,&#10;            description = &quot;Monatliches Abo&quot;,&#10;            category = sampleCategories[2],&#10;            date = System.currentTimeMillis() - 86400000,&#10;            isExpense = true&#10;        )&#10;    )&#10;&#10;    // Sample Budgets&#10;    val sampleBudgets = listOf(&#10;        Budget(&#10;            id = 1,&#10;            category = sampleCategories[0],&#10;            amount = 300.0,&#10;            period = BudgetPeriod.MONTHLY,&#10;            spent = 125.67&#10;        ),&#10;        Budget(&#10;            id = 2,&#10;            category = sampleCategories[1],&#10;            amount = 100.0,&#10;            period = BudgetPeriod.MONTHLY,&#10;            spent = 45.50&#10;        ),&#10;        Budget(&#10;            id = 3,&#10;            category = sampleCategories[2],&#10;            amount = 150.0,&#10;            period = BudgetPeriod.MONTHLY,&#10;            spent = 89.99&#10;        )&#10;    )&#10;&#10;    // Sample Assets (Crypto)&#10;    val sampleAssets = listOf(&#10;        Asset(&#10;            id = &quot;bitcoin&quot;,&#10;            rank = &quot;1&quot;,&#10;            symbol = &quot;BTC&quot;,&#10;            name = &quot;Bitcoin&quot;,&#10;            supply = &quot;19757131.0000000000000000&quot;,&#10;            maxSupply = &quot;21000000.0000000000000000&quot;,&#10;            marketCapUsd = &quot;846479297648.9018896394645431&quot;,&#10;            volumeUsd24Hr = &quot;14213755025.8648956275756091&quot;,&#10;            priceUsd = &quot;42853.7890123456789012345678&quot;,&#10;            changePercent24Hr = &quot;2.4567890123456789&quot;,&#10;            vwap24Hr = &quot;42500.1234567890123456789012&quot;,&#10;            explorer = &quot;https://blockchain.info/&quot;&#10;        ),&#10;        Asset(&#10;            id = &quot;ethereum&quot;,&#10;            rank = &quot;2&quot;,&#10;            symbol = &quot;ETH&quot;,&#10;            name = &quot;Ethereum&quot;,&#10;            supply = &quot;120426315.8734050000000000&quot;,&#10;            maxSupply = null,&#10;            marketCapUsd = &quot;301479297648.9018896394645431&quot;,&#10;            volumeUsd24Hr = &quot;8213755025.8648956275756091&quot;,&#10;            priceUsd = &quot;2502.3456789012345678901234&quot;,&#10;            changePercent24Hr = &quot;-1.2345678901234567&quot;,&#10;            vwap24Hr = &quot;2485.6789012345678901234567&quot;,&#10;            explorer = &quot;https://etherscan.io/&quot;&#10;        ),&#10;        Asset(&#10;            id = &quot;tether&quot;,&#10;            rank = &quot;3&quot;,&#10;            symbol = &quot;USDT&quot;,&#10;            name = &quot;Tether&quot;,&#10;            supply = &quot;91426315.8734050000000000&quot;,&#10;            maxSupply = null,&#10;            marketCapUsd = &quot;91426315.8734050000000000&quot;,&#10;            volumeUsd24Hr = &quot;24213755025.8648956275756091&quot;,&#10;            priceUsd = &quot;1.0001234567890123456789&quot;,&#10;            changePercent24Hr = &quot;0.0123456789012345&quot;,&#10;            vwap24Hr = &quot;1.0000000000000000000000&quot;,&#10;            explorer = &quot;https://www.omniexplorer.info/&quot;&#10;        )&#10;    )&#10;&#10;    // Sample History Data Points&#10;    val sampleHistoryDataPoints = listOf(&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;42000.1234567890123456789&quot;,&#10;            time = System.currentTimeMillis() - 86400000,&#10;            date = &quot;2024-01-15&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;41500.9876543210987654321&quot;,&#10;            time = System.currentTimeMillis() - 172800000,&#10;            date = &quot;2024-01-14&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;43200.5555555555555555555&quot;,&#10;            time = System.currentTimeMillis() - 259200000,&#10;            date = &quot;2024-01-13&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;42800.7777777777777777777&quot;,&#10;            time = System.currentTimeMillis() - 345600000,&#10;            date = &quot;2024-01-12&quot;&#10;        )&#10;    )&#10;&#10;    // Sample Receipt Items&#10;    val sampleReceiptItems = listOf(&#10;        ReceiptItem(name = &quot;Milch 1L&quot;, price = 1.29),&#10;        ReceiptItem(name = &quot;Brot Vollkorn&quot;, price = 2.49),&#10;        ReceiptItem(name = &quot;Bananen 1kg&quot;, price = 1.99),&#10;        ReceiptItem(name = &quot;Joghurt Natur&quot;, price = 0.89),&#10;        ReceiptItem(name = &quot;Käse Gouda&quot;, price = 3.99)&#10;    )&#10;&#10;    // Sample Receipt&#10;    val sampleReceipt = Receipt(&#10;        storeName = &quot;REWE Supermarkt&quot;,&#10;        date = &quot;2024-01-15&quot;,&#10;        items = sampleReceiptItems&#10;    )&#10;&#10;    // Sample Assets Response&#10;    val sampleAssetsResponse = AssetsResponse(&#10;        data = sampleAssets,&#10;        timestamp = System.currentTimeMillis()&#10;    )&#10;&#10;    // Sample History Response&#10;    val sampleHistoryResponse = HistoryResponse(&#10;        data = sampleHistoryDataPoints,&#10;        timestamp = System.currentTimeMillis()&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.preview&#10;&#10;import android.graphics.Color&#10;import androidx.core.graphics.toColorInt&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.AssetsResponse&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.data.model.HistoryResponse&#10;import com.pixelpioneer.moneymaster.data.model.Receipt&#10;import com.pixelpioneer.moneymaster.data.model.ReceiptItem&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * Sample data provider for preview and testing purposes.&#10; *&#10; * This object contains predefined sample data used throughout the application&#10; * for UI previews, testing, and as placeholder data where needed.&#10; */&#10;object SampleData {&#10;&#10;    /**&#10;     * Sample transaction categories representing different spending types.&#10;     * Each category includes a name, color, and icon resource.&#10;     */&#10;    val sampleCategories = listOf(&#10;        TransactionCategory(&#10;            id = 1,&#10;            name = &quot;Lebensmittel&quot;,&#10;            color = &quot;#4CAF50&quot;.toColorInt(),&#10;            icon = R.drawable.ic_food&#10;        ),&#10;        TransactionCategory(&#10;            id = 2,&#10;            name = &quot;Transport&quot;,&#10;            color = &quot;#2196F3&quot;.toColorInt(),&#10;            icon = R.drawable.ic_transport&#10;        ),&#10;        TransactionCategory(&#10;            id = 3,&#10;            name = &quot;Unterhaltung&quot;,&#10;            color = Color.parseColor(&quot;#FF9800&quot;),&#10;            icon = R.drawable.ic_entertainment&#10;        ),&#10;        TransactionCategory(&#10;            id = 4,&#10;            name = &quot;Gesundheit&quot;,&#10;            color = Color.parseColor(&quot;#E91E63&quot;),&#10;            icon = R.drawable.ic_heart&#10;        ),&#10;        TransactionCategory(&#10;            id = 5,&#10;            name = &quot;Bildung&quot;,&#10;            color = Color.parseColor(&quot;#9C27B0&quot;),&#10;            icon = R.drawable.ic_school&#10;        )&#10;    )&#10;&#10;    /**&#10;     * Sample transactions representing financial activities.&#10;     * Includes both expenses and income with varied timestamps.&#10;     */&#10;    val sampleTransactions = listOf(&#10;        Transaction(&#10;            id = 1,&#10;            amount = 45.67,&#10;            title = &quot;Supermarkt Einkauf&quot;,&#10;            description = &quot;Wocheneinkauf bei Rewe&quot;,&#10;            category = sampleCategories[0],&#10;            date = System.currentTimeMillis() - 86400000, // Yesterday&#10;            isExpense = true&#10;        ),&#10;        Transaction(&#10;            id = 2,&#10;            amount = 12.50,&#10;            title = &quot;Bus Ticket&quot;,&#10;            description = &quot;Monatskarte&quot;,&#10;            category = sampleCategories[1],&#10;            date = System.currentTimeMillis() - 172800000, // 2 days ago&#10;            isExpense = true&#10;        ),&#10;        Transaction(&#10;            id = 3,&#10;            amount = 25.00,&#10;            title = &quot;Kino&quot;,&#10;            description = &quot;Avengers Endgame&quot;,&#10;            category = sampleCategories[2],&#10;            date = System.currentTimeMillis() - 259200000, // 3 days ago&#10;            isExpense = true&#10;        ),&#10;        Transaction(&#10;            id = 4,&#10;            amount = 2500.00,&#10;            title = &quot;Gehalt&quot;,&#10;            description = &quot;Monatliches Gehalt&quot;,&#10;            category = TransactionCategory(&#10;                6,&#10;                &quot;Einkommen&quot;,&#10;                Color.parseColor(&quot;#4CAF50&quot;),&#10;                R.drawable.ic_finance_chip&#10;            ),&#10;            date = System.currentTimeMillis() - 604800000, // 1 week ago&#10;            isExpense = false&#10;        ),&#10;        Transaction(&#10;            id = 5,&#10;            amount = 15.99,&#10;            title = &quot;Netflix&quot;,&#10;            description = &quot;Monatliches Abo&quot;,&#10;            category = sampleCategories[2],&#10;            date = System.currentTimeMillis() - 86400000,&#10;            isExpense = true&#10;        )&#10;    )&#10;&#10;    /**&#10;     * Sample budgets representing spending limits for different categories.&#10;     * Each budget includes a category, amount limit, period, and current spending.&#10;     */&#10;    val sampleBudgets = listOf(&#10;        Budget(&#10;            id = 1,&#10;            category = sampleCategories[0],&#10;            amount = 300.0,&#10;            period = BudgetPeriod.MONTHLY,&#10;            spent = 125.67&#10;        ),&#10;        Budget(&#10;            id = 2,&#10;            category = sampleCategories[1],&#10;            amount = 100.0,&#10;            period = BudgetPeriod.MONTHLY,&#10;            spent = 45.50&#10;        ),&#10;        Budget(&#10;            id = 3,&#10;            category = sampleCategories[2],&#10;            amount = 150.0,&#10;            period = BudgetPeriod.MONTHLY,&#10;            spent = 89.99&#10;        )&#10;    )&#10;&#10;    /**&#10;     * Sample cryptocurrency assets for use in the crypto tracking feature.&#10;     * Includes common cryptocurrencies with realistic market data.&#10;     */&#10;    val sampleAssets = listOf(&#10;        Asset(&#10;            id = &quot;bitcoin&quot;,&#10;            rank = &quot;1&quot;,&#10;            symbol = &quot;BTC&quot;,&#10;            name = &quot;Bitcoin&quot;,&#10;            supply = &quot;19757131.0000000000000000&quot;,&#10;            maxSupply = &quot;21000000.0000000000000000&quot;,&#10;            marketCapUsd = &quot;846479297648.9018896394645431&quot;,&#10;            volumeUsd24Hr = &quot;14213755025.8648956275756091&quot;,&#10;            priceUsd = &quot;42853.7890123456789012345678&quot;,&#10;            changePercent24Hr = &quot;2.4567890123456789&quot;,&#10;            vwap24Hr = &quot;42500.1234567890123456789012&quot;,&#10;            explorer = &quot;https://blockchain.info/&quot;&#10;        ),&#10;        Asset(&#10;            id = &quot;ethereum&quot;,&#10;            rank = &quot;2&quot;,&#10;            symbol = &quot;ETH&quot;,&#10;            name = &quot;Ethereum&quot;,&#10;            supply = &quot;120426315.8734050000000000&quot;,&#10;            maxSupply = null,&#10;            marketCapUsd = &quot;301479297648.9018896394645431&quot;,&#10;            volumeUsd24Hr = &quot;8213755025.8648956275756091&quot;,&#10;            priceUsd = &quot;2502.3456789012345678901234&quot;,&#10;            changePercent24Hr = &quot;-1.2345678901234567&quot;,&#10;            vwap24Hr = &quot;2485.6789012345678901234567&quot;,&#10;            explorer = &quot;https://etherscan.io/&quot;&#10;        ),&#10;        Asset(&#10;            id = &quot;tether&quot;,&#10;            rank = &quot;3&quot;,&#10;            symbol = &quot;USDT&quot;,&#10;            name = &quot;Tether&quot;,&#10;            supply = &quot;91426315.8734050000000000&quot;,&#10;            maxSupply = null,&#10;            marketCapUsd = &quot;91426315.8734050000000000&quot;,&#10;            volumeUsd24Hr = &quot;24213755025.8648956275756091&quot;,&#10;            priceUsd = &quot;1.0001234567890123456789&quot;,&#10;            changePercent24Hr = &quot;0.0123456789012345&quot;,&#10;            vwap24Hr = &quot;1.0000000000000000000000&quot;,&#10;            explorer = &quot;https://www.omniexplorer.info/&quot;&#10;        )&#10;    )&#10;&#10;    /**&#10;     * Sample historical price data points for cryptocurrency price charts.&#10;     * Each data point includes a price, timestamp, and formatted date.&#10;     */&#10;    val sampleHistoryDataPoints = listOf(&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;42000.1234567890123456789&quot;,&#10;            time = System.currentTimeMillis() - 86400000,&#10;            date = &quot;2024-01-15&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;41500.9876543210987654321&quot;,&#10;            time = System.currentTimeMillis() - 172800000,&#10;            date = &quot;2024-01-14&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;43200.5555555555555555555&quot;,&#10;            time = System.currentTimeMillis() - 259200000,&#10;            date = &quot;2024-01-13&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;42800.7777777777777777777&quot;,&#10;            time = System.currentTimeMillis() - 345600000,&#10;            date = &quot;2024-01-12&quot;&#10;        )&#10;    )&#10;&#10;    /**&#10;     * Sample receipt items for the receipt scanning feature.&#10;     * Each item includes a name and price.&#10;     */&#10;    val sampleReceiptItems = listOf(&#10;        ReceiptItem(name = &quot;Milch 1L&quot;, price = 1.29),&#10;        ReceiptItem(name = &quot;Brot Vollkorn&quot;, price = 2.49),&#10;        ReceiptItem(name = &quot;Bananen 1kg&quot;, price = 1.99),&#10;        ReceiptItem(name = &quot;Joghurt Natur&quot;, price = 0.89),&#10;        ReceiptItem(name = &quot;Käse Gouda&quot;, price = 3.99)&#10;    )&#10;&#10;    /**&#10;     * Sample receipt for the receipt scanning feature.&#10;     * Includes store name, date, and a list of purchased items.&#10;     */&#10;    val sampleReceipt = Receipt(&#10;        storeName = &quot;REWE Supermarkt&quot;,&#10;        date = &quot;2024-01-15&quot;,&#10;        items = sampleReceiptItems&#10;    )&#10;&#10;    /**&#10;     * Sample response from the cryptocurrency API containing assets.&#10;     * Includes a list of assets and a timestamp.&#10;     */&#10;    val sampleAssetsResponse = AssetsResponse(&#10;        data = sampleAssets,&#10;        timestamp = System.currentTimeMillis()&#10;    )&#10;&#10;    /**&#10;     * Sample response for historical cryptocurrency price data.&#10;     * Includes a list of price data points and a timestamp.&#10;     */&#10;    val sampleHistoryResponse = HistoryResponse(&#10;        data = sampleHistoryDataPoints,&#10;        timestamp = System.currentTimeMillis()&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/buttons/AddAllTransactionsButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/buttons/AddAllTransactionsButton.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.buttons&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;@Composable&#10;fun AddAllTransactionsButton(&#10;    totalAmount: Double,&#10;    onAddAll: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;${stringResource(R.string.receipts_total_amount)}:&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;%.2f €&quot;.format(totalAmount),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            Button(&#10;                onClick = onAddAll,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = null&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    stringResource(R.string.receipts_add_all_transactions),&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.buttons&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A card button that displays the total amount of a receipt and allows&#10; * the user to add all items from the receipt as transactions.&#10; *&#10; * This component is used in the receipt scanning workflow to create&#10; * transactions from all scanned items at once.&#10; *&#10; * @param totalAmount The total amount of all items in the receipt&#10; * @param onAddAll Callback invoked when the user clicks the &quot;Add All&quot; button&#10; */&#10;@Composable&#10;fun AddAllTransactionsButton(&#10;    totalAmount: Double,&#10;    onAddAll: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;${stringResource(R.string.receipts_total_amount)}:&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;%.2f €&quot;.format(totalAmount),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            Button(&#10;                onClick = onAddAll,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = null&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    stringResource(R.string.receipts_add_all_transactions),&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/buttons/ScanButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/buttons/ScanButton.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.buttons&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Camera&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;@Composable&#10;fun ScanButton(&#10;    isEnabled: Boolean,&#10;    isLoading: Boolean,&#10;    onScan: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.padding(16.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            if (isLoading) {&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    CircularProgressIndicator()&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(stringResource(R.string.receipts_scanning_progress))&#10;                }&#10;            } else {&#10;                Button(&#10;                    onClick = onScan,&#10;                    enabled = isEnabled,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Camera,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(stringResource(R.string.receipts_scan_button))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.buttons&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Camera&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A button component for initiating the receipt scanning process.&#10; *&#10; * This component displays either a scan button or a loading indicator&#10; * depending on the current scanning state. When pressed, it triggers&#10; * the receipt scanning workflow.&#10; *&#10; * @param isEnabled Whether the scan button is enabled&#10; * @param isLoading Whether the scanning process is currently running&#10; * @param onScan Callback invoked when the scan button is pressed&#10; */&#10;@Composable&#10;fun ScanButton(&#10;    isEnabled: Boolean,&#10;    isLoading: Boolean,&#10;    onScan: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.padding(16.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            if (isLoading) {&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    CircularProgressIndicator()&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(stringResource(R.string.receipts_scanning_progress))&#10;                }&#10;            } else {&#10;                Button(&#10;                    onClick = onScan,&#10;                    enabled = isEnabled,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Camera,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(stringResource(R.string.receipts_scan_button))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/buttons/ViewAllTransactionsButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/buttons/ViewAllTransactionsButton.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.buttons&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A button to view all transactions&#10; */&#10;@Composable&#10;fun ViewAllTransactionsButton(&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Button(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(text = stringResource(R.string.transactions_view_all))&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.buttons&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A button that navigates the user to the full transactions list.&#10; * &#10; * This component is typically displayed at the bottom of a limited &#10; * transactions list to provide access to the complete transaction history.&#10; *&#10; * @param onClick Callback invoked when the button is clicked&#10; */&#10;@Composable&#10;fun ViewAllTransactionsButton(&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Button(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(text = stringResource(R.string.transactions_view_all))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/BudgetDetailCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/BudgetDetailCard.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.ui.components.utils.getBudgetPeriodText&#10;import kotlin.math.min&#10;&#10;@Composable&#10;fun BudgetDetailCard(budget: com.pixelpioneer.moneymaster.data.model.Budget) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(32.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color(budget.category.color))&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = budget.category.name,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Text(&#10;                        text = getBudgetPeriodText(budget.period),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            val progress = if (budget.amount &gt; 0) {&#10;                min(budget.spent / budget.amount, 1.0)&#10;            } else {&#10;                0.0&#10;            }&#10;&#10;            val progressColor = when {&#10;                progress &gt;= 0.9 -&gt; MaterialTheme.colorScheme.error&#10;                progress &gt;= 0.7 -&gt; MaterialTheme.colorScheme.errorContainer&#10;                else -&gt; MaterialTheme.colorScheme.primary&#10;            }&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress.toFloat() },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = progressColor&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_amount),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(budget.amount),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_spent),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(budget.spent),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = progressColor&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_amount),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(budget.amount - budget.spent),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_progress),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = progressColor&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.ui.components.utils.getBudgetPeriodText&#10;import kotlin.math.min&#10;&#10;/**&#10; * A card that displays detailed information about a budget.&#10; *&#10; * This component shows budget details including the category,&#10; * time period, allocated amount, spent amount, remaining amount,&#10; * and a visual progress indicator showing budget consumption.&#10; *&#10; * @param budget The budget to display details for&#10; */&#10;@Composable&#10;fun BudgetDetailCard(budget: com.pixelpioneer.moneymaster.data.model.Budget) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(32.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color(budget.category.color))&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = budget.category.name,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Text(&#10;                        text = getBudgetPeriodText(budget.period),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            val progress = if (budget.amount &gt; 0) {&#10;                min(budget.spent / budget.amount, 1.0)&#10;            } else {&#10;                0.0&#10;            }&#10;&#10;            val progressColor = when {&#10;                progress &gt;= 0.9 -&gt; MaterialTheme.colorScheme.error&#10;                progress &gt;= 0.7 -&gt; MaterialTheme.colorScheme.errorContainer&#10;                else -&gt; MaterialTheme.colorScheme.primary&#10;            }&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress.toFloat() },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = progressColor&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_amount),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(budget.amount),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_spent),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(budget.spent),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = progressColor&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_amount),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(budget.amount - budget.spent),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_progress),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = progressColor&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/CategorySelectionCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/CategorySelectionCard.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.ui.components.utils.DropdownMenuCategorySelector&#10;&#10;@Composable&#10;fun CategorySelectionCard(&#10;    categories: List&lt;TransactionCategory&gt;,&#10;    selectedCategory: TransactionCategory?,&#10;    onCategorySelected: (TransactionCategory) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&#10;                text = stringResource(R.string.label_category),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Die Kategorien sollten immer verfügbar sein&#10;            // durch die vordefinierte Liste&#10;            DropdownMenuCategorySelector(&#10;                categories = categories,&#10;                selectedCategory = selectedCategory,&#10;                onCategorySelected = onCategorySelected&#10;            )&#10;&#10;            // Info-Text für Benutzer&#10;            if (categories.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;${categories.size} ${stringResource(R.string.categories_available)}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.ui.components.utils.DropdownMenuCategorySelector&#10;&#10;/**&#10; * A card component for selecting a transaction category.&#10; *&#10; * This component displays a dropdown menu for selecting from available&#10; * categories and shows information about how many categories are available.&#10; *&#10; * @param categories List of available categories to choose from&#10; * @param selectedCategory The currently selected category, or null if none selected&#10; * @param onCategorySelected Callback invoked when a category is selected&#10; * @param modifier Optional modifier for customizing the component's layout&#10; */&#10;@Composable&#10;fun CategorySelectionCard(&#10;    categories: List&lt;TransactionCategory&gt;,&#10;    selectedCategory: TransactionCategory?,&#10;    onCategorySelected: (TransactionCategory) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Text(&#10;                text = stringResource(R.string.label_category),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Categories should always be available&#10;            // through the predefined list&#10;            DropdownMenuCategorySelector(&#10;                categories = categories,&#10;                selectedCategory = selectedCategory,&#10;                onCategorySelected = onCategorySelected&#10;            )&#10;&#10;            // Information text for user&#10;            if (categories.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;${categories.size} ${stringResource(R.string.categories_available)}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/ErrorCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/ErrorCard.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;@Composable&#10;fun ErrorCard(error: String) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.error_card_message, error),&#10;            modifier = Modifier.padding(16.dp),&#10;            color = MaterialTheme.colorScheme.onErrorContainer,&#10;            style = MaterialTheme.typography.bodyMedium&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A card that displays an error message.&#10; *&#10; * This component is used to show error states throughout the application&#10; * with a consistent style using the error color scheme.&#10; *&#10; * @param error The error message to display&#10; */&#10;@Composable&#10;fun ErrorCard(error: String) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.error_card_message, error),&#10;            modifier = Modifier.padding(16.dp),&#10;            color = MaterialTheme.colorScheme.onErrorContainer,&#10;            style = MaterialTheme.typography.bodyMedium&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/FinancialSummaryCards.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/FinancialSummaryCards.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowDownward&#10;import androidx.compose.material.icons.filled.ArrowUpward&#10;import androidx.compose.material.icons.filled.Balance&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.FinancialSummary&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;@Composable&#10;fun FinancialSummaryCards(summary: FinancialSummary) {&#10;    Column {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Balance,&#10;                            contentDescription = stringResource(R.string.dashboard_current_balance),&#10;                            tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.dashboard_current_balance),&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            modifier = Modifier.padding(start = 8.dp),&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Text(&#10;                    text = FormatUtils.formatCurrency(summary.balance),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(vertical = 8.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowUpward,&#10;                            contentDescription = stringResource(R.string.dashboard_income),&#10;                            tint = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.dashboard_income),&#10;                            fontWeight = FontWeight.Bold,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            modifier = Modifier.padding(start = 8.dp),&#10;                            color = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(summary.totalIncome),&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        modifier = Modifier.padding(top = 8.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Card(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(vertical = 8.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowDownward,&#10;                            contentDescription = stringResource(R.string.dashboard_expenses),&#10;                            tint = MaterialTheme.colorScheme.error&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.dashboard_expenses),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            modifier = Modifier.padding(start = 8.dp),&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(summary.totalExpenses),&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onErrorContainer,&#10;                        modifier = Modifier.padding(top = 8.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun FinancialSummaryCardsDarkPreview() {&#10;    MoneyMasterTheme(darkTheme = false) {&#10;        FinancialSummaryCards(&#10;            summary = FinancialSummary(&#10;                balance = -150.75,&#10;                totalIncome = 1200.00,&#10;                totalExpenses = 1350.75&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;@Preview()&#10;@Composable&#10;fun FinancialSummaryCardsDarkPreviewDark() {&#10;    MoneyMasterTheme(darkTheme = true) {&#10;        FinancialSummaryCards(&#10;            summary = FinancialSummary(&#10;                balance = -150.75,&#10;                totalIncome = 1200.00,&#10;                totalExpenses = 1350.75&#10;            )&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowDownward&#10;import androidx.compose.material.icons.filled.ArrowUpward&#10;import androidx.compose.material.icons.filled.Balance&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.FinancialSummary&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;/**&#10; * A component that displays financial summary information.&#10; *&#10; * This component shows the current balance, total income, and total expenses&#10; * in a visually appealing card layout with appropriate icons and colors.&#10; *&#10; * @param summary The financial summary data to display&#10; */&#10;@Composable&#10;fun FinancialSummaryCards(summary: FinancialSummary) {&#10;    Column {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Balance,&#10;                            contentDescription = stringResource(R.string.dashboard_current_balance),&#10;                            tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.dashboard_current_balance),&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            modifier = Modifier.padding(start = 8.dp),&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Text(&#10;                    text = FormatUtils.formatCurrency(summary.balance),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(vertical = 8.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowUpward,&#10;                            contentDescription = stringResource(R.string.dashboard_income),&#10;                            tint = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.dashboard_income),&#10;                            fontWeight = FontWeight.Bold,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            modifier = Modifier.padding(start = 8.dp),&#10;                            color = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(summary.totalIncome),&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        modifier = Modifier.padding(top = 8.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Card(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(vertical = 8.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowDownward,&#10;                            contentDescription = stringResource(R.string.dashboard_expenses),&#10;                            tint = MaterialTheme.colorScheme.error&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.dashboard_expenses),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            modifier = Modifier.padding(start = 8.dp),&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(summary.totalExpenses),&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onErrorContainer,&#10;                        modifier = Modifier.padding(top = 8.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Preview of the FinancialSummaryCards component in light theme.&#10; */&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun FinancialSummaryCardsDarkPreview() {&#10;    MoneyMasterTheme(darkTheme = false) {&#10;        FinancialSummaryCards(&#10;            summary = FinancialSummary(&#10;                balance = -150.75,&#10;                totalIncome = 1200.00,&#10;                totalExpenses = 1350.75&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Preview of the FinancialSummaryCards component in dark theme.&#10; */&#10;@Preview()&#10;@Composable&#10;fun FinancialSummaryCardsDarkPreviewDark() {&#10;    MoneyMasterTheme(darkTheme = true) {&#10;        FinancialSummaryCards(&#10;            summary = FinancialSummary(&#10;                balance = -150.75,&#10;                totalIncome = 1200.00,&#10;                totalExpenses = 1350.75&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/ImageSelectionCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/ImageSelectionCard.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.PhotoLibrary&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;@Composable&#10;fun ImageSelectionCard(&#10;    selectedImageUri: Uri?,&#10;    onImageSelect: () -&gt; Unit,&#10;    onCameraCapture: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            if (selectedImageUri != null) {&#10;                AsyncImage(&#10;                    model = selectedImageUri,&#10;                    contentDescription = stringResource(R.string.image_selection_selected_receipt),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = onCameraCapture,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Icon(Icons.Default.CameraAlt, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(stringResource(R.string.image_selection_camera))&#10;                }&#10;&#10;                Button(&#10;                    onClick = onImageSelect,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Icon(Icons.Default.PhotoLibrary, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(stringResource(R.string.image_selection_gallery))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.PhotoLibrary&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A card that allows users to select or capture an image.&#10; *&#10; * This component is used in the receipt scanning feature to let users&#10; * select an image from the gallery or capture a new photo with the camera.&#10; * If an image is already selected, it displays a preview of the image.&#10; *&#10; * @param selectedImageUri The URI of the currently selected image, or null if none selected&#10; * @param onImageSelect Callback invoked when the user wants to select an image from gallery&#10; * @param onCameraCapture Callback invoked when the user wants to capture a new photo&#10; */&#10;@Composable&#10;fun ImageSelectionCard(&#10;    selectedImageUri: Uri?,&#10;    onImageSelect: () -&gt; Unit,&#10;    onCameraCapture: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            if (selectedImageUri != null) {&#10;                AsyncImage(&#10;                    model = selectedImageUri,&#10;                    contentDescription = stringResource(R.string.image_selection_selected_receipt),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = onCameraCapture,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Icon(Icons.Default.CameraAlt, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(stringResource(R.string.image_selection_camera))&#10;                }&#10;&#10;                Button(&#10;                    onClick = onImageSelect,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Icon(Icons.Default.PhotoLibrary, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(stringResource(R.string.image_selection_gallery))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/InfoCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/InfoCard.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun InfoCard(message: String) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            modifier = Modifier.padding(16.dp),&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * A card component for displaying informational messages.&#10; *&#10; * This component presents information to the user in a visually distinct card&#10; * with a surface variant background to differentiate it from regular content.&#10; *&#10; * @param message The informational message to display in the card&#10; */&#10;@Composable&#10;fun InfoCard(message: String) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            modifier = Modifier.padding(16.dp),&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/PriceChart.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/PriceChart.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import com.github.mikephil.charting.charts.LineChart&#10;import com.github.mikephil.charting.components.XAxis&#10;import com.github.mikephil.charting.data.Entry&#10;import com.github.mikephil.charting.data.LineData&#10;import com.github.mikephil.charting.data.LineDataSet&#10;import com.github.mikephil.charting.formatter.ValueFormatter&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun PriceChart(&#10;    historyData: List&lt;HistoryDataPoint&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;    val materialTextColor = MaterialTheme.colorScheme.onSecondaryContainer.toArgb()&#10;    val priceLable = stringResource(R.string.crypto_price_label)&#10;&#10;    AndroidView(&#10;        factory = { context -&gt;&#10;            LineChart(context).apply {&#10;                description.isEnabled = true&#10;                setTouchEnabled(true)&#10;                isDragEnabled = true&#10;                setScaleEnabled(true)&#10;                legend.isEnabled = false&#10;&#10;                xAxis.apply {&#10;                    position = XAxis.XAxisPosition.BOTTOM&#10;                    setDrawGridLines(false)&#10;                    textColor = materialTextColor&#10;                    textSize = 10f&#10;                    valueFormatter = object : ValueFormatter() {&#10;                        private val dateFormat = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;                        override fun getFormattedValue(value: Float): String {&#10;                            return dateFormat.format(Date(value.toLong()))&#10;                        }&#10;                    }&#10;                }&#10;&#10;                axisLeft.apply {&#10;                    setDrawGridLines(true)&#10;                    textColor = materialTextColor&#10;                    textSize = 10f&#10;                    valueFormatter = object : ValueFormatter() {&#10;                        override fun getFormattedValue(value: Float): String {&#10;                            return FormatUtils.formatCurrency(value.toDouble())&#10;                        }&#10;                    }&#10;                }&#10;&#10;                axisRight.isEnabled = false&#10;            }&#10;        },&#10;        modifier = modifier,&#10;        update = { chart -&gt;&#10;            if (historyData.isNotEmpty()) {&#10;                val entries = historyData.mapIndexed { index, dataPoint -&gt;&#10;                    Entry(&#10;                        dataPoint.time.toFloat(),&#10;                        dataPoint.priceUsd.toFloatOrNull() ?: 0f&#10;                    )&#10;                }&#10;&#10;                val dataSet = LineDataSet(entries, priceLable).apply {&#10;                    color = Color(0xFFA921F3).toArgb()&#10;                    setCircleColor(Color(color = 0xFFEEA73D).toArgb())&#10;                    lineWidth = 2f&#10;                    circleRadius = 3f&#10;                    setDrawCircleHole(false)&#10;                    valueTextSize = 10f&#10;                    setDrawValues(true)&#10;                    mode = LineDataSet.Mode.CUBIC_BEZIER&#10;                    setDrawFilled(true)&#10;                    fillColor = Color(0xB5673AB7).copy(alpha = 0.3f).toArgb()&#10;                }&#10;&#10;                chart.data = LineData(dataSet)&#10;                chart.invalidate()&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(&#10;    showBackground = true,&#10;)&#10;@Composable&#10;private fun PriceChartPreview() {&#10;    val sampleHistoryData = listOf(&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;50000.123&quot;,&#10;            time = System.currentTimeMillis() - 24 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;51500.456&quot;,&#10;            time = System.currentTimeMillis() - 18 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;49800.789&quot;,&#10;            time = System.currentTimeMillis() - 12 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;52200.012&quot;,&#10;            time = System.currentTimeMillis() - 6 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;53100.345&quot;,&#10;            time = System.currentTimeMillis(),&#10;            date = &quot;&quot;&#10;        )&#10;    )&#10;&#10;    PriceChart(&#10;        historyData = sampleHistoryData,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(200.dp)&#10;    )&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import com.github.mikephil.charting.charts.LineChart&#10;import com.github.mikephil.charting.components.XAxis&#10;import com.github.mikephil.charting.data.Entry&#10;import com.github.mikephil.charting.data.LineData&#10;import com.github.mikephil.charting.data.LineDataSet&#10;import com.github.mikephil.charting.formatter.ValueFormatter&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * A chart component for displaying cryptocurrency price history.&#10; *&#10; * This component uses the MPAndroidChart library to render a line chart&#10; * showing historical price data points. The chart is styled according to&#10; * the app's material theme colors and includes formatted time and price labels.&#10; *&#10; * @param historyData List of historical price data points to display in the chart&#10; * @param modifier Optional modifier for customizing the component's layout&#10; */&#10;@Composable&#10;fun PriceChart(&#10;    historyData: List&lt;HistoryDataPoint&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;    val materialTextColor = MaterialTheme.colorScheme.onSecondaryContainer.toArgb()&#10;    val priceLable = stringResource(R.string.crypto_price_label)&#10;&#10;    AndroidView(&#10;        factory = { context -&gt;&#10;            LineChart(context).apply {&#10;                description.isEnabled = true&#10;                setTouchEnabled(true)&#10;                isDragEnabled = true&#10;                setScaleEnabled(true)&#10;                legend.isEnabled = false&#10;&#10;                xAxis.apply {&#10;                    position = XAxis.XAxisPosition.BOTTOM&#10;                    setDrawGridLines(false)&#10;                    textColor = materialTextColor&#10;                    textSize = 10f&#10;                    valueFormatter = object : ValueFormatter() {&#10;                        private val dateFormat = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;                        override fun getFormattedValue(value: Float): String {&#10;                            return dateFormat.format(Date(value.toLong()))&#10;                        }&#10;                    }&#10;                }&#10;&#10;                axisLeft.apply {&#10;                    setDrawGridLines(true)&#10;                    textColor = materialTextColor&#10;                    textSize = 10f&#10;                    valueFormatter = object : ValueFormatter() {&#10;                        override fun getFormattedValue(value: Float): String {&#10;                            return FormatUtils.formatCurrency(value.toDouble())&#10;                        }&#10;                    }&#10;                }&#10;&#10;                axisRight.isEnabled = false&#10;            }&#10;        },&#10;        modifier = modifier,&#10;        update = { chart -&gt;&#10;            if (historyData.isNotEmpty()) {&#10;                val entries = historyData.mapIndexed { index, dataPoint -&gt;&#10;                    Entry(&#10;                        dataPoint.time.toFloat(),&#10;                        dataPoint.priceUsd.toFloatOrNull() ?: 0f&#10;                    )&#10;                }&#10;&#10;                val dataSet = LineDataSet(entries, priceLable).apply {&#10;                    color = Color(0xFFA921F3).toArgb()&#10;                    setCircleColor(Color(color = 0xFFEEA73D).toArgb())&#10;                    lineWidth = 2f&#10;                    circleRadius = 3f&#10;                    setDrawCircleHole(false)&#10;                    valueTextSize = 10f&#10;                    setDrawValues(true)&#10;                    mode = LineDataSet.Mode.CUBIC_BEZIER&#10;                    setDrawFilled(true)&#10;                    fillColor = Color(0xB5673AB7).copy(alpha = 0.3f).toArgb()&#10;                }&#10;&#10;                chart.data = LineData(dataSet)&#10;                chart.invalidate()&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;/**&#10; * Preview of the PriceChart component with sample data.&#10; */&#10;@Preview(&#10;    showBackground = true,&#10;)&#10;@Composable&#10;private fun PriceChartPreview() {&#10;    val sampleHistoryData = listOf(&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;50000.123&quot;,&#10;            time = System.currentTimeMillis() - 24 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;51500.456&quot;,&#10;            time = System.currentTimeMillis() - 18 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;49800.789&quot;,&#10;            time = System.currentTimeMillis() - 12 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;52200.012&quot;,&#10;            time = System.currentTimeMillis() - 6 * 60 * 60 * 1000,&#10;            date = &quot;&quot;&#10;        ),&#10;        HistoryDataPoint(&#10;            priceUsd = &quot;53100.345&quot;,&#10;            time = System.currentTimeMillis(),&#10;            date = &quot;&quot;&#10;        )&#10;    )&#10;&#10;    PriceChart(&#10;        historyData = sampleHistoryData,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(200.dp)&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/ScannedItemCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/cards/ScannedItemCard.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.ui.components.features.receipt.EditableItemContent&#10;import com.pixelpioneer.moneymaster.ui.components.features.receipt.ReadOnlyItemContent&#10;&#10;@Composable&#10;fun ScannedItemCard(&#10;    item: Transaction,&#10;    index: Int,&#10;    onItemUpdated: (Transaction) -&gt; Unit,&#10;    onItemRemoved: () -&gt; Unit&#10;) {&#10;    var isEditing by remember { mutableStateOf(false) }&#10;    var editedTitle by remember { mutableStateOf(item.title) }&#10;    var editedAmount by remember { mutableStateOf(item.amount.toString()) }&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        if (isEditing) {&#10;            EditableItemContent(&#10;                index = index,&#10;                title = editedTitle,&#10;                amount = editedAmount,&#10;                onTitleChange = { editedTitle = it },&#10;                onAmountChange = { editedAmount = it },&#10;                onSave = {&#10;                    val newAmount = editedAmount.toDoubleOrNull()&#10;                    if (newAmount != null &amp;&amp; editedTitle.isNotBlank()) {&#10;                        val updatedItem = item.copy(&#10;                            title = editedTitle.trim(),&#10;                            amount = newAmount&#10;                        )&#10;                        onItemUpdated(updatedItem)&#10;                        isEditing = false&#10;                    }&#10;                },&#10;                onCancel = {&#10;                    editedTitle = item.title&#10;                    editedAmount = item.amount.toString()&#10;                    isEditing = false&#10;                },&#10;                onRemove = {&#10;                    onItemRemoved()&#10;                    isEditing = false&#10;                }&#10;            )&#10;        } else {&#10;            ReadOnlyItemContent(&#10;                item = item,&#10;                index = index,&#10;                onEdit = { isEditing = true }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.cards&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.ui.components.features.receipt.EditableItemContent&#10;import com.pixelpioneer.moneymaster.ui.components.features.receipt.ReadOnlyItemContent&#10;&#10;/**&#10; * A card component for displaying and editing scanned receipt items.&#10; *&#10; * This component manages the state for viewing and editing a transaction item&#10; * that was created from a scanned receipt. It allows users to edit the title&#10; * and amount of the transaction and supports removal.&#10; *&#10; * @param item The transaction representing a scanned receipt item&#10; * @param index The position index of this item in the list (for display purposes)&#10; * @param onItemUpdated Callback invoked when the item is updated with new values&#10; * @param onItemRemoved Callback invoked when the item is removed&#10; */&#10;@Composable&#10;fun ScannedItemCard(&#10;    item: Transaction,&#10;    index: Int,&#10;    onItemUpdated: (Transaction) -&gt; Unit,&#10;    onItemRemoved: () -&gt; Unit&#10;) {&#10;    var isEditing by remember { mutableStateOf(false) }&#10;    var editedTitle by remember { mutableStateOf(item.title) }&#10;    var editedAmount by remember { mutableStateOf(item.amount.toString()) }&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        if (isEditing) {&#10;            EditableItemContent(&#10;                index = index,&#10;                title = editedTitle,&#10;                amount = editedAmount,&#10;                onTitleChange = { editedTitle = it },&#10;                onAmountChange = { editedAmount = it },&#10;                onSave = {&#10;                    val newAmount = editedAmount.toDoubleOrNull()&#10;                    if (newAmount != null &amp;&amp; editedTitle.isNotBlank()) {&#10;                        val updatedItem = item.copy(&#10;                            title = editedTitle.trim(),&#10;                            amount = newAmount&#10;                        )&#10;                        onItemUpdated(updatedItem)&#10;                        isEditing = false&#10;                    }&#10;                },&#10;                onCancel = {&#10;                    editedTitle = item.title&#10;                    editedAmount = item.amount.toString()&#10;                    isEditing = false&#10;                },&#10;                onRemove = {&#10;                    onItemRemoved()&#10;                    isEditing = false&#10;                }&#10;            )&#10;        } else {&#10;            ReadOnlyItemContent(&#10;                item = item,&#10;                index = index,&#10;                onEdit = { isEditing = true }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/dialogs/CategorySelectorDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/dialogs/CategorySelectorDialog.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.dialogs&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.CategoryItem&#10;&#10;@Composable&#10;fun CategorySelectorDialog(&#10;    categoriesState: UiState&lt;List&lt;TransactionCategory&gt;&gt;,&#10;    onCategorySelected: (TransactionCategory) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(&#10;        onDismissRequest = onDismiss&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(400.dp),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = stringResource(R.string.select_category),&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                when (categoriesState) {&#10;                    is UiState.Loading -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;&#10;                    is UiState.Success -&gt; {&#10;                        LazyColumn(&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(categoriesState.data) { category -&gt;&#10;                                CategoryItem(&#10;                                    category = category,&#10;                                    onClick = { onCategorySelected(category) }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is UiState.Error -&gt; {&#10;                        ErrorMessage(&#10;                            message = categoriesState.message,&#10;                            onRetry = { /* Reload categories */ }&#10;                        )&#10;                    }&#10;&#10;                    is UiState.Empty -&gt; {&#10;                        Text(&#10;                            text = stringResource(R.string.empty_categories),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.dialogs&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.CategoryItem&#10;&#10;/**&#10; * A dialog for selecting a transaction category.&#10; *&#10; * This component displays a modal dialog containing a list of available&#10; * categories. It handles different states (loading, error, empty list)&#10; * and allows the user to select a category from the list.&#10; *&#10; * @param categoriesState The current UI state of the categories list&#10; * @param onCategorySelected Callback invoked when a category is selected&#10; * @param onDismiss Callback invoked when the dialog is dismissed&#10; */&#10;@Composable&#10;fun CategorySelectorDialog(&#10;    categoriesState: UiState&lt;List&lt;TransactionCategory&gt;&gt;,&#10;    onCategorySelected: (TransactionCategory) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(&#10;        onDismissRequest = onDismiss&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(400.dp),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = stringResource(R.string.select_category),&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                when (categoriesState) {&#10;                    is UiState.Loading -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;&#10;                    is UiState.Success -&gt; {&#10;                        LazyColumn(&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(categoriesState.data) { category -&gt;&#10;                                CategoryItem(&#10;                                    category = category,&#10;                                    onClick = { onCategorySelected(category) }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is UiState.Error -&gt; {&#10;                        ErrorMessage(&#10;                            message = categoriesState.message,&#10;                            onRetry = { /* Reload categories */ }&#10;                        )&#10;                    }&#10;&#10;                    is UiState.Empty -&gt; {&#10;                        Text(&#10;                            text = stringResource(R.string.empty_categories),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/dialogs/DeleteBudgetDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/dialogs/DeleteBudgetDialog.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.dialogs&#10;&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;&#10;@Composable&#10;fun DeleteBudgetDialog(&#10;    budget: Budget,&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = stringResource(R.string.dialog_delete_budget_title),&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = stringResource(R.string.dialog_delete_budget_message, budget.category.name)&#10;            )&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.textButtonColors(&#10;                    contentColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(stringResource(R.string.action_delete))&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(stringResource(R.string.action_cancel))&#10;            }&#10;        }&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.dialogs&#10;&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;&#10;/**&#10; * A confirmation dialog for deleting a budget.&#10; *&#10; * This component displays an alert dialog asking the user to confirm&#10; * that they want to delete a specific budget. It includes the name of&#10; * the category associated with the budget in the confirmation message.&#10; *&#10; * @param budget The budget to be deleted&#10; * @param onConfirm Callback invoked when the user confirms the deletion&#10; * @param onDismiss Callback invoked when the user cancels or dismisses the dialog&#10; */&#10;@Composable&#10;fun DeleteBudgetDialog(&#10;    budget: Budget,&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = stringResource(R.string.dialog_delete_budget_title),&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = stringResource(R.string.dialog_delete_budget_message, budget.category.name)&#10;            )&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.textButtonColors(&#10;                    contentColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(stringResource(R.string.action_delete))&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(stringResource(R.string.action_cancel))&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/dialogs/UpdateDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/dialogs/UpdateDialog.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.dialogs&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.network.AppUpdateManager&#10;&#10;@Composable&#10;fun UpdateDialog(&#10;    updateState: AppUpdateManager.UpdateState,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    when (updateState) {&#10;        is AppUpdateManager.UpdateState.Checking -&gt; {&#10;            Dialog(onDismissRequest = onDismiss) {&#10;                Card {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(stringResource(R.string.update_checking))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        is AppUpdateManager.UpdateState.Downloading -&gt; {&#10;            Dialog(onDismissRequest = { }) {&#10;                Card {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        val progress = if (updateState.total &gt; 0) {&#10;                            updateState.downloaded.toFloat() / updateState.total.toFloat()&#10;                        } else 0f&#10;&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(stringResource(R.string.update_downloading))&#10;                        Text(&quot;${(progress * 100).toInt()}%&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        is AppUpdateManager.UpdateState.Error -&gt; {&#10;            Dialog(onDismissRequest = onDismiss) {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(stringResource(R.string.update_error))&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(updateState.message)&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(onClick = onDismiss) {&#10;                            Text(stringResource(R.string.action_ok))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        is AppUpdateManager.UpdateState.NoUpdate -&gt; {&#10;            Dialog(onDismissRequest = onDismiss) {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(stringResource(R.string.update_no_update))&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(onClick = onDismiss) {&#10;                            Text(stringResource(R.string.action_ok))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        else -&gt; { /* Idle oder Success - kein Dialog */&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.dialogs&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.network.AppUpdateManager&#10;&#10;/**&#10; * A dialog for handling the app update process.&#10; *&#10; * This component displays different dialogs based on the current update state,&#10; * including checking for updates, downloading progress, errors, and when no&#10; * update is available. The dialog adapts its content and behavior accordingly.&#10; *&#10; * @param updateState The current state of the update process&#10; * @param onDismiss Callback invoked when the dialog is dismissed (where applicable)&#10; */&#10;@Composable&#10;fun UpdateDialog(&#10;    updateState: AppUpdateManager.UpdateState,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    when (updateState) {&#10;        is AppUpdateManager.UpdateState.Checking -&gt; {&#10;            Dialog(onDismissRequest = onDismiss) {&#10;                Card {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(stringResource(R.string.update_checking))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        is AppUpdateManager.UpdateState.Downloading -&gt; {&#10;            Dialog(onDismissRequest = { }) {&#10;                Card {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        val progress = if (updateState.total &gt; 0) {&#10;                            updateState.downloaded.toFloat() / updateState.total.toFloat()&#10;                        } else 0f&#10;&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(stringResource(R.string.update_downloading))&#10;                        Text(&quot;${(progress * 100).toInt()}%&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        is AppUpdateManager.UpdateState.Error -&gt; {&#10;            Dialog(onDismissRequest = onDismiss) {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(stringResource(R.string.update_error))&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(updateState.message)&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(onClick = onDismiss) {&#10;                            Text(stringResource(R.string.action_ok))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        is AppUpdateManager.UpdateState.NoUpdate -&gt; {&#10;            Dialog(onDismissRequest = onDismiss) {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(stringResource(R.string.update_no_update))&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(onClick = onDismiss) {&#10;                            Text(stringResource(R.string.action_ok))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        else -&gt; { /* Idle oder Success - kein Dialog */&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyBudgetsList.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyBudgetsList.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A component for displaying empty budgets list&#10; */&#10;@Composable&#10;fun EmptyBudgetsList(&#10;    onAddBudget: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.no_budgets_yet),&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = stringResource(R.string.empty_budgets_description),&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Button(&#10;            onClick = onAddBudget&#10;        ) {&#10;            Text(text = stringResource(R.string.budgets_create))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A component for displaying an empty state when no budgets exist.&#10; *&#10; * This component shows a message indicating that no budgets have been created&#10; * yet, along with a brief explanation and a button to create a new budget.&#10; * It is typically used when the budgets list is empty.&#10; *&#10; * @param onAddBudget Callback invoked when the &quot;Create Budget&quot; button is clicked&#10; */&#10;@Composable&#10;fun EmptyBudgetsList(&#10;    onAddBudget: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.no_budgets_yet),&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = stringResource(R.string.empty_budgets_description),&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Button(&#10;            onClick = onAddBudget&#10;        ) {&#10;            Text(text = stringResource(R.string.budgets_create))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyBudgetsView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyBudgetsView.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;@Composable&#10;fun EmptyBudgetsView(onAddButtonClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.no_budgets_yet),&#10;                style = MaterialTheme.typography.titleLarge&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.empty_budgets_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = onAddButtonClick&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = stringResource(R.string.action_add),&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(stringResource(R.string.budgets_create))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A full-screen component for displaying an empty state when no budgets exist.&#10; *&#10; * This component fills the entire screen with a message indicating that no&#10; * budgets have been created yet, along with a button to create a new budget.&#10; * It's used to display an empty state on the budgets screen.&#10; *&#10; * @param onAddButtonClick Callback invoked when the add budget button is clicked&#10; */&#10;@Composable&#10;fun EmptyBudgetsView(onAddButtonClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.no_budgets_yet),&#10;                style = MaterialTheme.typography.titleLarge&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.empty_budgets_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = onAddButtonClick&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = stringResource(R.string.action_add),&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(stringResource(R.string.budgets_create))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyFinancialSummary.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyFinancialSummary.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A component for displaying empty financial summary state&#10; */&#10;@Composable&#10;fun EmptyFinancialSummary() {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.empty_financial_summary_title),&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.empty_financial_summary_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A card component for displaying an empty state when no financial data exists.&#10; *&#10; * This component shows a message indicating that no financial data is available&#10; * yet, along with a brief explanation. It is displayed on the dashboard when&#10; * there are no transactions to calculate financial summaries from.&#10; */&#10;@Composable&#10;fun EmptyFinancialSummary() {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.empty_financial_summary_title),&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.empty_financial_summary_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyTransactionsList.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/empty/EmptyTransactionsList.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A component for displaying empty transactions list&#10; */&#10;@Composable&#10;fun EmptyTransactionsList(&#10;    onAddTransaction: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.empty_transactions_title),&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = stringResource(R.string.empty_transactions_description),&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Button(&#10;            onClick = onAddTransaction&#10;        ) {&#10;            Text(text = stringResource(R.string.transactions_add))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.empty&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A component for displaying an empty state when no transactions exist.&#10; *&#10; * This component shows a message indicating that no transactions have been&#10; * created yet, along with a brief explanation and a button to add a new&#10; * transaction. It is typically used when the transactions list is empty.&#10; *&#10; * @param onAddTransaction Callback invoked when the &quot;Add Transaction&quot; button is clicked&#10; */&#10;@Composable&#10;fun EmptyTransactionsList(&#10;    onAddTransaction: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.empty_transactions_title),&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = stringResource(R.string.empty_transactions_description),&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Button(&#10;            onClick = onAddTransaction&#10;        ) {&#10;            Text(text = stringResource(R.string.transactions_add))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/indicators/ErrorMessage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/indicators/ErrorMessage.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.indicators&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A reusable error message card component.&#10; *&#10; * Displays an error message with a retry button. This component is used to show&#10; * error states in the UI and allows the user to retry the failed action.&#10; *&#10; * @param message The error message to display.&#10; * @param onRetry Callback invoked when the retry button is clicked.&#10; */&#10;@Composable&#10;fun ErrorMessage(&#10;    message: String,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.error_generic),&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = MaterialTheme.colorScheme.error&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = message,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = onRetry&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Refresh,&#10;                    contentDescription = stringResource(R.string.action_retry)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Text(&#10;                    text = stringResource(R.string.action_retry),&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.indicators&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A reusable error message card component.&#10; *&#10; * Displays an error message with a retry button. This component is used to show&#10; * error states in the UI and allows the user to retry the failed action.&#10; *&#10; * @param message The error message to display.&#10; * @param onRetry Callback invoked when the retry button is clicked.&#10; */&#10;@Composable&#10;fun ErrorMessage(&#10;    message: String,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.error_generic),&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = MaterialTheme.colorScheme.error&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = message,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = onRetry&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Refresh,&#10;                    contentDescription = stringResource(R.string.action_retry)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Text(&#10;                    text = stringResource(R.string.action_retry),&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/BudgetItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/BudgetItem.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.ui.components.utils.getBudgetPeriodText&#10;import kotlin.math.min&#10;&#10;/**&#10; * A card component that displays a single budget with its progress and actions.&#10; *&#10; * Shows the budget's category, amount, spent amount, remaining amount, and a progress bar.&#10; * Provides options to edit or delete the budget via a context menu.&#10; *&#10; * @param budget The budget to display.&#10; * @param onClick Callback when the card is clicked.&#10; * @param onEdit Callback when the edit action is selected.&#10; * @param onDelete Callback when the delete action is selected.&#10; */&#10;@Composable&#10;fun BudgetItem(&#10;    budget: Budget,&#10;    onClick: () -&gt; Unit,&#10;    onEdit: () -&gt; Unit = {},&#10;    onDelete: () -&gt; Unit = {}&#10;) {&#10;    var showContextMenu by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick() }&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(24.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color(budget.category.color))&#10;                )&#10;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .padding(start = 12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = budget.category.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Text(&#10;                        text = getBudgetPeriodText(budget.period),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = FormatUtils.formatCurrency(budget.amount),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Box {&#10;                    IconButton(onClick = { showContextMenu = true }) {&#10;                        Icon(&#10;                            painterResource(R.drawable.more_vert),&#10;                            contentDescription = stringResource(R.string.budgets_more_options)&#10;                        )&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = showContextMenu,&#10;                        onDismissRequest = { showContextMenu = false }&#10;                    ) {&#10;                        DropdownMenuItem(&#10;                            text = { Text(stringResource(R.string.action_edit)) },&#10;                            onClick = {&#10;                                onEdit()&#10;                                showContextMenu = false&#10;                            }&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = { Text(stringResource(R.string.action_delete)) },&#10;                            onClick = {&#10;                                onDelete()&#10;                                showContextMenu = false&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            val progress = if (budget.amount &gt; 0) {&#10;                min(budget.spent / budget.amount, 1.0)&#10;            } else {&#10;                0.0&#10;            }&#10;&#10;            val progressColor = when {&#10;                progress &gt;= 0.9 -&gt; MaterialTheme.colorScheme.error&#10;                progress &gt;= 0.7 -&gt; MaterialTheme.colorScheme.errorContainer&#10;                else -&gt; MaterialTheme.colorScheme.primary&#10;            }&#10;&#10;            if (progress &gt;= 0.9) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Warning,&#10;                        contentDescription = stringResource(R.string.label_warning),&#10;                        tint = MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_warning_almost_used),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.padding(start = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress.toFloat() },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = progressColor,&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = stringResource(&#10;                        R.string.budgets_spent_format,&#10;                        FormatUtils.formatCurrency(budget.spent)&#10;                    ),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(&#10;                        R.string.budgets_remaining_format,&#10;                        FormatUtils.formatCurrency(budget.amount - budget.spent)&#10;                    ),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.format_percentage_used, (progress * 100).toInt()),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = progressColor&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.ui.components.utils.getBudgetPeriodText&#10;import kotlin.math.min&#10;&#10;/**&#10; * A card component that displays a single budget with its progress and actions.&#10; *&#10; * Shows the budget's category, amount, spent amount, remaining amount, and a progress bar.&#10; * Provides options to edit or delete the budget via a context menu.&#10; *&#10; * @param budget The budget to display.&#10; * @param onClick Callback when the card is clicked.&#10; * @param onEdit Callback when the edit action is selected.&#10; * @param onDelete Callback when the delete action is selected.&#10; */&#10;@Composable&#10;fun BudgetItem(&#10;    budget: Budget,&#10;    onClick: () -&gt; Unit,&#10;    onEdit: () -&gt; Unit = {},&#10;    onDelete: () -&gt; Unit = {}&#10;) {&#10;    var showContextMenu by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick() }&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(24.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color(budget.category.color))&#10;                )&#10;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .padding(start = 12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = budget.category.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Text(&#10;                        text = getBudgetPeriodText(budget.period),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = FormatUtils.formatCurrency(budget.amount),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Box {&#10;                    IconButton(onClick = { showContextMenu = true }) {&#10;                        Icon(&#10;                            painterResource(R.drawable.more_vert),&#10;                            contentDescription = stringResource(R.string.budgets_more_options)&#10;                        )&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = showContextMenu,&#10;                        onDismissRequest = { showContextMenu = false }&#10;                    ) {&#10;                        DropdownMenuItem(&#10;                            text = { Text(stringResource(R.string.action_edit)) },&#10;                            onClick = {&#10;                                onEdit()&#10;                                showContextMenu = false&#10;                            }&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = { Text(stringResource(R.string.action_delete)) },&#10;                            onClick = {&#10;                                onDelete()&#10;                                showContextMenu = false&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            val progress = if (budget.amount &gt; 0) {&#10;                min(budget.spent / budget.amount, 1.0)&#10;            } else {&#10;                0.0&#10;            }&#10;&#10;            val progressColor = when {&#10;                progress &gt;= 0.9 -&gt; MaterialTheme.colorScheme.error&#10;                progress &gt;= 0.7 -&gt; MaterialTheme.colorScheme.errorContainer&#10;                else -&gt; MaterialTheme.colorScheme.primary&#10;            }&#10;&#10;            if (progress &gt;= 0.9) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Warning,&#10;                        contentDescription = stringResource(R.string.label_warning),&#10;                        tint = MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = stringResource(R.string.budgets_warning_almost_used),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.padding(start = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress.toFloat() },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = progressColor,&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = stringResource(&#10;                        R.string.budgets_spent_format,&#10;                        FormatUtils.formatCurrency(budget.spent)&#10;                    ),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(&#10;                        R.string.budgets_remaining_format,&#10;                        FormatUtils.formatCurrency(budget.amount - budget.spent)&#10;                    ),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.format_percentage_used, (progress * 100).toInt()),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = progressColor&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/BudgetOverviewItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/BudgetOverviewItem.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;&#10;/**&#10; * A component for displaying a single budget item in the budget overview&#10; *&#10; * Shows the category, progress percentage, spent and remaining amounts, and a progress bar.&#10; *&#10; * @param budget The budget to display in the overview.&#10; */&#10;@Composable&#10;fun BudgetOverviewItem(&#10;    budget: Budget&#10;) {&#10;    val progress = if (budget.amount &gt; 0) {&#10;        (budget.spent / budget.amount).coerceIn(0.0, 1.0)&#10;    } else {&#10;        0.0&#10;    }&#10;&#10;    val progressColor = when {&#10;        progress &gt;= 0.9 -&gt; MaterialTheme.colorScheme.error&#10;        progress &gt;= 0.7 -&gt; MaterialTheme.colorScheme.errorContainer&#10;        else -&gt; MaterialTheme.colorScheme.primary&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(16.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color(budget.category.color))&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Text(&#10;                    text = budget.category.name,&#10;                    style = MaterialTheme.typography.titleSmall&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = FormatUtils.formatPercentage(progress),&#10;                style = MaterialTheme.typography.titleSmall,&#10;                color = progressColor&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        LinearProgressIndicator(&#10;            progress = { progress.toFloat() },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = progressColor,&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;${FormatUtils.formatCurrency(budget.spent)} ${stringResource(R.string.common_of)} ${&#10;                    FormatUtils.formatCurrency(&#10;                        budget.amount&#10;                    )&#10;                }&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Text(&#10;                text = &quot;${stringResource(R.string.budgets_remaining)}: ${&#10;                    FormatUtils.formatCurrency(&#10;                        budget.amount - budget.spent&#10;                    )&#10;                }&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;&#10;/**&#10; * A component for displaying a single budget item in the budget overview&#10; *&#10; * Shows the category, progress percentage, spent and remaining amounts, and a progress bar.&#10; *&#10; * @param budget The budget to display in the overview.&#10; */&#10;@Composable&#10;fun BudgetOverviewItem(&#10;    budget: Budget&#10;) {&#10;    val progress = if (budget.amount &gt; 0) {&#10;        (budget.spent / budget.amount).coerceIn(0.0, 1.0)&#10;    } else {&#10;        0.0&#10;    }&#10;&#10;    val progressColor = when {&#10;        progress &gt;= 0.9 -&gt; MaterialTheme.colorScheme.error&#10;        progress &gt;= 0.7 -&gt; MaterialTheme.colorScheme.errorContainer&#10;        else -&gt; MaterialTheme.colorScheme.primary&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(16.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color(budget.category.color))&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Text(&#10;                    text = budget.category.name,&#10;                    style = MaterialTheme.typography.titleSmall&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = FormatUtils.formatPercentage(progress),&#10;                style = MaterialTheme.typography.titleSmall,&#10;                color = progressColor&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        LinearProgressIndicator(&#10;            progress = { progress.toFloat() },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = progressColor,&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;${FormatUtils.formatCurrency(budget.spent)} ${stringResource(R.string.common_of)} ${&#10;                    FormatUtils.formatCurrency(&#10;                        budget.amount&#10;                    )&#10;                }&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Text(&#10;                text = &quot;${stringResource(R.string.budgets_remaining)}: ${&#10;                    FormatUtils.formatCurrency(&#10;                        budget.amount - budget.spent&#10;                    )&#10;                }&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/CategoryItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/CategoryItem.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * A card component for displaying a transaction category.&#10; *&#10; * Shows the category's color and name. Can be clicked to select the category.&#10; *&#10; * @param category The transaction category to display.&#10; * @param onClick Callback when the category is clicked.&#10; */&#10;@Composable&#10;fun CategoryItem(&#10;    category: TransactionCategory,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(24.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(category.color))&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Text(&#10;                text = category.name,&#10;                style = MaterialTheme.typography.bodyLarge&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * A card component for displaying a transaction category.&#10; *&#10; * Shows the category's color and name. Can be clicked to select the category.&#10; *&#10; * @param category The transaction category to display.&#10; * @param onClick Callback when the category is clicked.&#10; */&#10;@Composable&#10;fun CategoryItem(&#10;    category: TransactionCategory,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(24.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(category.color))&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Text(&#10;                text = category.name,&#10;                style = MaterialTheme.typography.bodyLarge&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/CategoryStatsItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/CategoryStatsItem.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CategoryStats&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;/**&#10; * A card component for displaying statistics of a transaction category.&#10; *&#10; * Shows the category's name, color, transaction count, total amount, percentage,&#10; * and a progress bar representing the share of the total.&#10; *&#10; * @param categoryStats The statistics data for the category.&#10; * @param totalAmount The total amount for all categories (used for percentage calculation).&#10; */&#10;@Composable&#10;fun CategoryStatsItem(&#10;    categoryStats: CategoryStats,&#10;    totalAmount: Double&#10;) {&#10;    val percentage = if (totalAmount &gt; 0) (categoryStats.amount / totalAmount) * 100 else 0.0&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(24.dp)&#10;                            .clip(CircleShape)&#10;                            .background(Color(categoryStats.category.color))&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier.padding(start = 12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = categoryStats.category.name,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(&#10;                                R.string.statistics_category_transactions,&#10;                                categoryStats.transactionCount&#10;                            ),&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.End&#10;                ) {&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(categoryStats.amount),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatPercentage(percentage / 100, 1),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp)&#10;                    .clip(RoundedCornerShape(4.dp))&#10;                    .background(MaterialTheme.colorScheme.surfaceVariant)&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(fraction = (percentage / 100).toFloat())&#10;                        .height(8.dp)&#10;                        .clip(RoundedCornerShape(4.dp))&#10;                        .background(Color(categoryStats.category.color))&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CategoryStats&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;/**&#10; * A card component for displaying statistics of a transaction category.&#10; *&#10; * Shows the category's name, color, transaction count, total amount, percentage,&#10; * and a progress bar representing the share of the total.&#10; *&#10; * @param categoryStats The statistics data for the category.&#10; * @param totalAmount The total amount for all categories (used for percentage calculation).&#10; */&#10;@Composable&#10;fun CategoryStatsItem(&#10;    categoryStats: CategoryStats,&#10;    totalAmount: Double&#10;) {&#10;    val percentage = if (totalAmount &gt; 0) (categoryStats.amount / totalAmount) * 100 else 0.0&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(24.dp)&#10;                            .clip(CircleShape)&#10;                            .background(Color(categoryStats.category.color))&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier.padding(start = 12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = categoryStats.category.name,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(&#10;                                R.string.statistics_category_transactions,&#10;                                categoryStats.transactionCount&#10;                            ),&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.End&#10;                ) {&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(categoryStats.amount),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatPercentage(percentage / 100, 1),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp)&#10;                    .clip(RoundedCornerShape(4.dp))&#10;                    .background(MaterialTheme.colorScheme.surfaceVariant)&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(fraction = (percentage / 100).toFloat())&#10;                        .height(8.dp)&#10;                        .clip(RoundedCornerShape(4.dp))&#10;                        .background(Color(categoryStats.category.color))&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/MonthlyTrendItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/MonthlyTrendItem.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.MonthlyTrend&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;/**&#10; * A card component for displaying monthly financial trends.&#10; *&#10; * Shows the month, transaction count, income, expenses, and balance with trend icon.&#10; *&#10; * @param monthlyTrend The monthly trend data to display.&#10; */&#10;@Composable&#10;fun MonthlyTrendItem(monthlyTrend: MonthlyTrend) {&#10;    val isPositive = monthlyTrend.balance &gt;= 0&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = monthlyTrend.monthYear,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Text(&#10;                        text = stringResource(&#10;                            R.string.statistics_category_transactions,&#10;                            monthlyTrend.transactionCount&#10;                        ),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        painter = painterResource(if (isPositive) R.drawable.trending_up else R.drawable.trending_down),&#10;                        contentDescription = stringResource(if (isPositive) R.string.statistics_positive else R.string.statistics_negative),&#10;                        tint = if (isPositive) Color.Green else Color.Red,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(monthlyTrend.balance),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isPositive) Color.Green else Color.Red,&#10;                        modifier = Modifier.padding(start = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.transaction_income),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(monthlyTrend.income),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color.Green&#10;                    )&#10;                }&#10;&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.transaction_expense),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(monthlyTrend.expenses),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color.Red&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.MonthlyTrend&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;/**&#10; * A card component for displaying monthly financial trends.&#10; *&#10; * Shows the month, transaction count, income, expenses, and balance with trend icon.&#10; *&#10; * @param monthlyTrend The monthly trend data to display.&#10; */&#10;@Composable&#10;fun MonthlyTrendItem(monthlyTrend: MonthlyTrend) {&#10;    val isPositive = monthlyTrend.balance &gt;= 0&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = monthlyTrend.monthYear,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Text(&#10;                        text = stringResource(&#10;                            R.string.statistics_category_transactions,&#10;                            monthlyTrend.transactionCount&#10;                        ),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        painter = painterResource(if (isPositive) R.drawable.trending_up else R.drawable.trending_down),&#10;                        contentDescription = stringResource(if (isPositive) R.string.statistics_positive else R.string.statistics_negative),&#10;                        tint = if (isPositive) Color.Green else Color.Red,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(monthlyTrend.balance),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isPositive) Color.Green else Color.Red,&#10;                        modifier = Modifier.padding(start = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.transaction_income),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(monthlyTrend.income),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color.Green&#10;                    )&#10;                }&#10;&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.transaction_expense),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = FormatUtils.formatCurrency(monthlyTrend.expenses),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color.Red&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/RecentTransactionItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/RecentTransactionItem.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.graphics.toColorInt&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;/**&#10; * A component for displaying a single transaction in the recent transactions list&#10; */&#10;@Composable&#10;fun RecentTransactionItem(&#10;    transaction: Transaction,&#10;    onClick: () -&gt; Unit,&#10;    onEdit: (() -&gt; Unit)? = null&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .padding(16.dp),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(CircleShape)&#10;                .background(Color(transaction.category.color)),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&#10;                text = transaction.category.name.first().toString(),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = MaterialTheme.colorScheme.onPrimary&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        Column(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Text(&#10;                text = transaction.title,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            Text(&#10;                text = transaction.category.name,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            Text(&#10;                text = FormatUtils.formatDate(transaction.date),&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            val amountColor = if (transaction.isExpense) {&#10;                MaterialTheme.colorScheme.error&#10;            } else {&#10;                MaterialTheme.colorScheme.tertiary&#10;            }&#10;&#10;            val prefix = if (transaction.isExpense) &quot;-&quot; else &quot;+&quot;&#10;&#10;            Text(&#10;                text = &quot;$prefix${FormatUtils.formatCurrency(transaction.amount)}&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = amountColor,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                if (onEdit != null) {&#10;                    Icon(&#10;                        painter = painterResource(R.drawable.ic_edit),&#10;                        contentDescription = stringResource(R.string.action_edit),&#10;                        tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier&#10;                            .size(20.dp)&#10;                            .clickable { onEdit() }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                }&#10;&#10;                Icon(&#10;                    painter = painterResource(R.drawable.keyboard_arrow_right),&#10;                    contentDescription = stringResource(R.string.label_details),&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun RecentTransactionItemPreview() {&#10;    MoneyMasterTheme {&#10;        Column {&#10;            RecentTransactionItem(&#10;                transaction = Transaction(&#10;                    id = 1,&#10;                    amount = 45.67,&#10;                    title = &quot;Supermarkt Einkauf&quot;,&#10;                    description = &quot;Wocheneinkauf bei Rewe&quot;,&#10;                    category = TransactionCategory(&#10;                        id = 1,&#10;                        name = &quot;Lebensmittel&quot;,&#10;                        color = &quot;#4CAF50&quot;.toColorInt(),&#10;                        icon = R.drawable.ic_food&#10;                    ),&#10;                    date = System.currentTimeMillis() - 86400000,&#10;                    isExpense = true&#10;                ),&#10;                onClick = { }&#10;            )&#10;&#10;            RecentTransactionItem(&#10;                transaction = Transaction(&#10;                    id = 2,&#10;                    amount = 2500.00,&#10;                    title = &quot;Gehalt&quot;,&#10;                    description = &quot;Monatliches Gehalt&quot;,&#10;                    category = TransactionCategory(&#10;                        id = 6,&#10;                        name = &quot;Einkommen&quot;,&#10;                        color = &quot;#2196F3&quot;.toColorInt(),&#10;                        icon = R.drawable.ic_finance_chip&#10;                    ),&#10;                    date = System.currentTimeMillis() - 172800000,&#10;                    isExpense = false&#10;                ),&#10;                onClick = { }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun RecentTransactionItemDarkPreview() {&#10;    MoneyMasterTheme(darkTheme = true) {&#10;        RecentTransactionItem(&#10;            transaction = Transaction(&#10;                id = 3,&#10;                amount = 89.99,&#10;                title = &quot;Netflix Premium&quot;,&#10;                description = &quot;Monatliches Streaming-Abo&quot;,&#10;                category = TransactionCategory(&#10;                    id = 3,&#10;                    name = &quot;Unterhaltung&quot;,&#10;                    color = &quot;#FF9800&quot;.toColorInt(),&#10;                    icon = R.drawable.ic_entertainment&#10;                ),&#10;                date = System.currentTimeMillis() - 259200000,&#10;                isExpense = true&#10;            ),&#10;            onClick = { }&#10;        )&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.graphics.toColorInt&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;&#10;/**&#10; * A component for displaying a single transaction in the recent transactions list&#10; */&#10;@Composable&#10;fun RecentTransactionItem(&#10;    transaction: Transaction,&#10;    onClick: () -&gt; Unit,&#10;    onEdit: (() -&gt; Unit)? = null&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .padding(16.dp),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(CircleShape)&#10;                .background(Color(transaction.category.color)),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&#10;                text = transaction.category.name.first().toString(),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = MaterialTheme.colorScheme.onPrimary&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        Column(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Text(&#10;                text = transaction.title,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            Text(&#10;                text = transaction.category.name,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            Text(&#10;                text = FormatUtils.formatDate(transaction.date),&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            val amountColor = if (transaction.isExpense) {&#10;                MaterialTheme.colorScheme.error&#10;            } else {&#10;                MaterialTheme.colorScheme.tertiary&#10;            }&#10;&#10;            val prefix = if (transaction.isExpense) &quot;-&quot; else &quot;+&quot;&#10;&#10;            Text(&#10;                text = &quot;$prefix${FormatUtils.formatCurrency(transaction.amount)}&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = amountColor,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                if (onEdit != null) {&#10;                    Icon(&#10;                        painter = painterResource(R.drawable.ic_edit),&#10;                        contentDescription = stringResource(R.string.action_edit),&#10;                        tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier&#10;                            .size(20.dp)&#10;                            .clickable { onEdit() }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                }&#10;&#10;                Icon(&#10;                    painter = painterResource(R.drawable.keyboard_arrow_right),&#10;                    contentDescription = stringResource(R.string.label_details),&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun RecentTransactionItemPreview() {&#10;    MoneyMasterTheme {&#10;        Column {&#10;            RecentTransactionItem(&#10;                transaction = Transaction(&#10;                    id = 1,&#10;                    amount = 45.67,&#10;                    title = &quot;Supermarkt Einkauf&quot;,&#10;                    description = &quot;Wocheneinkauf bei Rewe&quot;,&#10;                    category = TransactionCategory(&#10;                        id = 1,&#10;                        name = &quot;Lebensmittel&quot;,&#10;                        color = &quot;#4CAF50&quot;.toColorInt(),&#10;                        icon = R.drawable.ic_food&#10;                    ),&#10;                    date = System.currentTimeMillis() - 86400000,&#10;                    isExpense = true&#10;                ),&#10;                onClick = { }&#10;            )&#10;&#10;            RecentTransactionItem(&#10;                transaction = Transaction(&#10;                    id = 2,&#10;                    amount = 2500.00,&#10;                    title = &quot;Gehalt&quot;,&#10;                    description = &quot;Monatliches Gehalt&quot;,&#10;                    category = TransactionCategory(&#10;                        id = 6,&#10;                        name = &quot;Einkommen&quot;,&#10;                        color = &quot;#2196F3&quot;.toColorInt(),&#10;                        icon = R.drawable.ic_finance_chip&#10;                    ),&#10;                    date = System.currentTimeMillis() - 172800000,&#10;                    isExpense = false&#10;                ),&#10;                onClick = { }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun RecentTransactionItemDarkPreview() {&#10;    MoneyMasterTheme(darkTheme = true) {&#10;        RecentTransactionItem(&#10;            transaction = Transaction(&#10;                id = 3,&#10;                amount = 89.99,&#10;                title = &quot;Netflix Premium&quot;,&#10;                description = &quot;Monatliches Streaming-Abo&quot;,&#10;                category = TransactionCategory(&#10;                    id = 3,&#10;                    name = &quot;Unterhaltung&quot;,&#10;                    color = &quot;#FF9800&quot;.toColorInt(),&#10;                    icon = R.drawable.ic_entertainment&#10;                ),&#10;                date = System.currentTimeMillis() - 259200000,&#10;                isExpense = true&#10;            ),&#10;            onClick = { }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/TransactionItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/common/items/TransactionItem.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DeleteOutline&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun TransactionItem(&#10;    transaction: Transaction,&#10;    onClick: () -&gt; Unit,&#10;    onDeleteClick: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;dd MMM yyyy, HH:mm&quot;, Locale.getDefault())&#10;    val date = Date(transaction.date)&#10;    val formattedDate = dateFormat.format(date)&#10;&#10;    val amountColor = if (transaction.isExpense) Color.Red else Color.Green&#10;    val amountPrefix = if (transaction.isExpense) &quot;-&quot; else &quot;+&quot;&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = transaction.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                Text(&#10;                    text = transaction.category.name,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color(transaction.category.color)&#10;                )&#10;&#10;                Text(&#10;                    text = formattedDate,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                if (transaction.description.isNotBlank()) {&#10;                    Text(&#10;                        text = transaction.description,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 2&#10;                    )&#10;                } else {&#10;                    Text(&#10;                        text = stringResource(R.string.transaction_no_description),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 2&#10;                    )&#10;                }&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = &quot;$amountPrefix${FormatUtils.formatCurrency(transaction.amount)}&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = amountColor,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                IconButton(&#10;                    onClick = onDeleteClick,&#10;                    modifier = Modifier.size(24.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DeleteOutline,&#10;                        contentDescription = stringResource(R.string.action_delete),&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.common.items&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DeleteOutline&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * A card component for displaying a transaction with details and delete action.&#10; *&#10; * Shows the transaction's title, category, date, description, and amount.&#10; * Provides a delete button for removing the transaction.&#10; *&#10; * @param transaction The transaction to display.&#10; * @param onClick Callback when the card is clicked.&#10; * @param onDeleteClick Callback when the delete button is clicked.&#10; */&#10;@Composable&#10;fun TransactionItem(&#10;    transaction: Transaction,&#10;    onClick: () -&gt; Unit,&#10;    onDeleteClick: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;dd MMM yyyy, HH:mm&quot;, Locale.getDefault())&#10;    val date = Date(transaction.date)&#10;    val formattedDate = dateFormat.format(date)&#10;&#10;    val amountColor = if (transaction.isExpense) Color.Red else Color.Green&#10;    val amountPrefix = if (transaction.isExpense) &quot;-&quot; else &quot;+&quot;&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = transaction.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                Text(&#10;                    text = transaction.category.name,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color(transaction.category.color)&#10;                )&#10;&#10;                Text(&#10;                    text = formattedDate,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                if (transaction.description.isNotBlank()) {&#10;                    Text(&#10;                        text = transaction.description,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 2&#10;                    )&#10;                } else {&#10;                    Text(&#10;                        text = stringResource(R.string.transaction_no_description),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 2&#10;                    )&#10;                }&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = &quot;$amountPrefix${FormatUtils.formatCurrency(transaction.amount)}&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = amountColor,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                IconButton(&#10;                    onClick = onDeleteClick,&#10;                    modifier = Modifier.size(24.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DeleteOutline,&#10;                        contentDescription = stringResource(R.string.action_delete),&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/AssetChip.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/AssetChip.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;&#10;@Composable&#10;fun AssetChip(&#10;    asset: Asset,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.surfaceVariant&#10;    }&#10;&#10;    val textColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.onPrimary&#10;    } else {&#10;        MaterialTheme.colorScheme.onSurfaceVariant&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(backgroundColor)&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 12.dp, vertical = 6.dp)&#10;    ) {&#10;        Text(&#10;            text = asset.symbol,&#10;            color = textColor,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;&#10;/**&#10; * A chip component for displaying a cryptocurrency asset symbol.&#10; *&#10; * Highlights the chip if selected and allows the user to select an asset.&#10; *&#10; * @param asset The cryptocurrency asset to display.&#10; * @param isSelected Whether this asset is currently selected.&#10; * @param onClick Callback invoked when the chip is clicked.&#10; */&#10;@Composable&#10;fun AssetChip(&#10;    asset: Asset,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.surfaceVariant&#10;    }&#10;&#10;    val textColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.onPrimary&#10;    } else {&#10;        MaterialTheme.colorScheme.onSurfaceVariant&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(backgroundColor)&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 12.dp, vertical = 6.dp)&#10;    ) {&#10;        Text(&#10;            text = asset.symbol,&#10;            color = textColor,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/CryptoAssetsScreenContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/CryptoAssetsScreenContent.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.ui.components.common.cards.PriceChart&#10;&#10;@Composable&#10;fun CryptoAssetsScreenContent(&#10;    cryptoAssetsState: UiState&lt;List&lt;Asset&gt;&gt;,&#10;    cryptoHistoryState: UiState&lt;List&lt;HistoryDataPoint&gt;&gt;,&#10;    selectedAsset: Asset?,&#10;    onAssetSelected: (Asset) -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        when (val assetsState = cryptoAssetsState) {&#10;            is UiState.Success -&gt; {&#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(assetsState.data) { asset -&gt;&#10;                        AssetChip(&#10;                            asset = asset,&#10;                            isSelected = selectedAsset?.id == asset.id,&#10;                            onClick = { onAssetSelected(asset) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Loading -&gt; {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(60.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                Text(&#10;                    text = stringResource(R.string.error_loading_assets, assetsState.message),&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                Text(stringResource(R.string.empty_crypto_data))&#10;            }&#10;        }&#10;&#10;        selectedAsset?.let { asset -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = asset.name,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = asset.symbol,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;&#10;                        Column(&#10;                            horizontalAlignment = Alignment.End&#10;                        ) {&#10;                            Text(&#10;                                text = FormatUtils.formatCurrency(&#10;                                    asset.priceUsd.toDoubleOrNull() ?: 0.0&#10;                                ),&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            val changePercent = asset.changePercent24Hr.toDoubleOrNull() ?: 0.0&#10;                            Text(&#10;                                text = &quot;${if (changePercent &gt;= 0) &quot;+&quot; else &quot;&quot;}${&#10;                                    FormatUtils.formatPercentage(&#10;                                        changePercent / 100,&#10;                                        2&#10;                                    )&#10;                                }&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = if (changePercent &gt;= 0) Color.Green else Color.Red,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    when (val historyState = cryptoHistoryState) {&#10;                        is UiState.Success -&gt; {&#10;                            PriceChart(&#10;                                historyData = historyState.data,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp)&#10;                            )&#10;                        }&#10;&#10;                        is UiState.Loading -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                CircularProgressIndicator()&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Error -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = stringResource(&#10;                                        R.string.error_loading_chart,&#10;                                        historyState.message&#10;                                    ),&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Empty -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(stringResource(R.string.empty_chart_data))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.crypto_market_data),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_market_cap),&#10;                        FormatUtils.formatCurrency(asset.marketCapUsd.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_volume_24h),&#10;                        FormatUtils.formatCurrency(asset.volumeUsd24Hr.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(stringResource(R.string.crypto_rank), &quot;#${asset.rank}&quot;)&#10;                    asset.maxSupply?.let { maxSupply -&gt;&#10;                        InfoRow(&#10;                            stringResource(R.string.crypto_max_supply),&#10;                            FormatUtils.formatCurrency(maxSupply.toDoubleOrNull() ?: 0.0)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.ui.components.common.cards.PriceChart&#10;&#10;/**&#10; * Main content composable for the crypto assets screen.&#10; *&#10; * Displays a row of asset chips, selected asset details, price chart, and market data.&#10; *&#10; * @param cryptoAssetsState The UI state containing the list of crypto assets.&#10; * @param cryptoHistoryState The UI state containing the price history for the selected asset.&#10; * @param selectedAsset The currently selected asset, or null if none is selected.&#10; * @param onAssetSelected Callback invoked when an asset is selected.&#10; */&#10;@Composable&#10;fun CryptoAssetsScreenContent(&#10;    cryptoAssetsState: UiState&lt;List&lt;Asset&gt;&gt;,&#10;    cryptoHistoryState: UiState&lt;List&lt;HistoryDataPoint&gt;&gt;,&#10;    selectedAsset: Asset?,&#10;    onAssetSelected: (Asset) -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        when (val assetsState = cryptoAssetsState) {&#10;            is UiState.Success -&gt; {&#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(assetsState.data) { asset -&gt;&#10;                        AssetChip(&#10;                            asset = asset,&#10;                            isSelected = selectedAsset?.id == asset.id,&#10;                            onClick = { onAssetSelected(asset) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Loading -&gt; {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(60.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                Text(&#10;                    text = stringResource(R.string.error_loading_assets, assetsState.message),&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                Text(stringResource(R.string.empty_crypto_data))&#10;            }&#10;        }&#10;&#10;        selectedAsset?.let { asset -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = asset.name,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = asset.symbol,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;&#10;                        Column(&#10;                            horizontalAlignment = Alignment.End&#10;                        ) {&#10;                            Text(&#10;                                text = FormatUtils.formatCurrency(&#10;                                    asset.priceUsd.toDoubleOrNull() ?: 0.0&#10;                                ),&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            val changePercent = asset.changePercent24Hr.toDoubleOrNull() ?: 0.0&#10;                            Text(&#10;                                text = &quot;${if (changePercent &gt;= 0) &quot;+&quot; else &quot;&quot;}${&#10;                                    FormatUtils.formatPercentage(&#10;                                        changePercent / 100,&#10;                                        2&#10;                                    )&#10;                                }&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = if (changePercent &gt;= 0) Color.Green else Color.Red,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    when (val historyState = cryptoHistoryState) {&#10;                        is UiState.Success -&gt; {&#10;                            PriceChart(&#10;                                historyData = historyState.data,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp)&#10;                            )&#10;                        }&#10;&#10;                        is UiState.Loading -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                CircularProgressIndicator()&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Error -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = stringResource(&#10;                                        R.string.error_loading_chart,&#10;                                        historyState.message&#10;                                    ),&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Empty -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(stringResource(R.string.empty_chart_data))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.crypto_market_data),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_market_cap),&#10;                        FormatUtils.formatCurrency(asset.marketCapUsd.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_volume_24h),&#10;                        FormatUtils.formatCurrency(asset.volumeUsd24Hr.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(stringResource(R.string.crypto_rank), &quot;#${asset.rank}&quot;)&#10;                    asset.maxSupply?.let { maxSupply -&gt;&#10;                        InfoRow(&#10;                            stringResource(R.string.crypto_max_supply),&#10;                            FormatUtils.formatCurrency(maxSupply.toDoubleOrNull() ?: 0.0)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/InfoRow.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/InfoRow.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun InfoRow(label: String, value: String) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 2.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * A row component for displaying a label and value pair.&#10; *&#10; * Used for showing market data fields in the crypto asset details.&#10; *&#10; * @param label The label to display on the left.&#10; * @param value The value to display on the right.&#10; */&#10;@Composable&#10;fun InfoRow(label: String, value: String) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 2.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/dashboard/BudgetOverview.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/dashboard/BudgetOverview.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.dashboard&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.BudgetOverviewItem&#10;&#10;/**&#10; * A component for displaying a compact version of recent transactions (for dashboard)&#10; */&#10;@Composable&#10;fun BudgetOverview(&#10;    budgets: List&lt;Budget&gt;,&#10;    onBudgetsClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;            .clickable(onClick = onBudgetsClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            val topBudgets = budgets.sortedByDescending { it.spent / it.amount }.take(2)&#10;&#10;            topBudgets.forEach { budget -&gt;&#10;                BudgetOverviewItem(budget = budget)&#10;&#10;                if (budget != topBudgets.last()) {&#10;                    HorizontalDivider(modifier = Modifier.padding(vertical = 12.dp))&#10;                }&#10;            }&#10;&#10;            if (budgets.size &gt; 2) {&#10;                HorizontalDivider(modifier = Modifier.padding(vertical = 12.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.Center,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.dashboard_view_all_budgets),&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;&#10;                    Icon(&#10;                        painter = painterResource(R.drawable.keyboard_arrow_right),&#10;                        contentDescription = stringResource(R.string.action_view_all),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.dashboard&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.BudgetOverviewItem&#10;&#10;/**&#10; * A card component for displaying a compact overview of top budgets on the dashboard.&#10; *&#10; * Shows the two budgets with the highest usage and a link to view all budgets if more exist.&#10; *&#10; * @param budgets The list of budgets to display.&#10; * @param onBudgetsClick Callback when the card or &quot;view all&quot; is clicked.&#10; */&#10;@Composable&#10;fun BudgetOverview(&#10;    budgets: List&lt;Budget&gt;,&#10;    onBudgetsClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;            .clickable(onClick = onBudgetsClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            val topBudgets = budgets.sortedByDescending { it.spent / it.amount }.take(2)&#10;&#10;            topBudgets.forEach { budget -&gt;&#10;                BudgetOverviewItem(budget = budget)&#10;&#10;                if (budget != topBudgets.last()) {&#10;                    HorizontalDivider(modifier = Modifier.padding(vertical = 12.dp))&#10;                }&#10;            }&#10;&#10;            if (budgets.size &gt; 2) {&#10;                HorizontalDivider(modifier = Modifier.padding(vertical = 12.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.Center,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.dashboard_view_all_budgets),&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;&#10;                    Icon(&#10;                        painter = painterResource(R.drawable.keyboard_arrow_right),&#10;                        contentDescription = stringResource(R.string.action_view_all),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/dashboard/RecentTransactionsList.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/dashboard/RecentTransactionsList.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.dashboard&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.RecentTransactionItem&#10;&#10;/**&#10; * A component for displaying a list of recent transactions&#10; */&#10;@Composable&#10;fun RecentTransactionsList(&#10;    transactions: List&lt;Transaction&gt;,&#10;    onTransactionClick: (Transaction) -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        items(transactions) { transaction -&gt;&#10;            RecentTransactionItem(&#10;                transaction = transaction,&#10;                onClick = { onTransactionClick(transaction) }&#10;            )&#10;&#10;            HorizontalDivider(&#10;                modifier = Modifier.padding(horizontal = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.dashboard&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.RecentTransactionItem&#10;&#10;/**&#10; * A list component for displaying recent transactions on the dashboard.&#10; *&#10; * Renders each transaction using RecentTransactionItem and separates them with dividers.&#10; *&#10; * @param transactions The list of recent transactions to display.&#10; * @param onTransactionClick Callback when a transaction is clicked.&#10; */&#10;@Composable&#10;fun RecentTransactionsList(&#10;    transactions: List&lt;Transaction&gt;,&#10;    onTransactionClick: (Transaction) -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        items(transactions) { transaction -&gt;&#10;            RecentTransactionItem(&#10;                transaction = transaction,&#10;                onClick = { onTransactionClick(transaction) }&#10;            )&#10;&#10;            HorizontalDivider(&#10;                modifier = Modifier.padding(horizontal = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/receipt/EditableItemContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/receipt/EditableItemContent.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.receipt&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;@Composable&#10;fun EditableItemContent(&#10;    index: Int,&#10;    title: String,&#10;    amount: String,&#10;    onTitleChange: (String) -&gt; Unit,&#10;    onAmountChange: (String) -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    onCancel: () -&gt; Unit,&#10;    onRemove: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.receipt_edit_item_title, index),&#10;            style = MaterialTheme.typography.titleSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = title,&#10;            onValueChange = onTitleChange,&#10;            label = { Text(stringResource(R.string.receipt_edit_item_name)) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = amount,&#10;            onValueChange = onAmountChange,&#10;            label = { Text(stringResource(R.string.receipt_edit_item_amount)) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Decimal,&#10;                imeAction = ImeAction.Done&#10;            ),&#10;            singleLine = true&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = onRemove,&#10;                modifier = Modifier.weight(1f),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    contentColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(stringResource(R.string.receipt_edit_item_remove))&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = onCancel,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(stringResource(R.string.action_cancel))&#10;            }&#10;&#10;            Button(&#10;                onClick = onSave,&#10;                modifier = Modifier.weight(1f),&#10;                enabled = title.isNotBlank() &amp;&amp; amount.toDoubleOrNull() != null&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Check,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(stringResource(R.string.action_save))&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.receipt&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A component for editing a scanned receipt item.&#10; *&#10; * Allows the user to edit the title and amount, save changes, cancel editing, or remove the item.&#10; *&#10; * @param index The index of the item in the list.&#10; * @param title The current title of the item.&#10; * @param amount The current amount as a string.&#10; * @param onTitleChange Callback when the title is changed.&#10; * @param onAmountChange Callback when the amount is changed.&#10; * @param onSave Callback when the save button is clicked.&#10; * @param onCancel Callback when the cancel button is clicked.&#10; * @param onRemove Callback when the remove button is clicked.&#10; */&#10;@Composable&#10;fun EditableItemContent(&#10;    index: Int,&#10;    title: String,&#10;    amount: String,&#10;    onTitleChange: (String) -&gt; Unit,&#10;    onAmountChange: (String) -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    onCancel: () -&gt; Unit,&#10;    onRemove: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.receipt_edit_item_title, index),&#10;            style = MaterialTheme.typography.titleSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = title,&#10;            onValueChange = onTitleChange,&#10;            label = { Text(stringResource(R.string.receipt_edit_item_name)) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true&#10;        )&#10;&#10;        OutlinedTextField(&#10;            value = amount,&#10;            onValueChange = onAmountChange,&#10;            label = { Text(stringResource(R.string.receipt_edit_item_amount)) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Decimal,&#10;                imeAction = ImeAction.Done&#10;            ),&#10;            singleLine = true&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = onRemove,&#10;                modifier = Modifier.weight(1f),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    contentColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(stringResource(R.string.receipt_edit_item_remove))&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = onCancel,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(stringResource(R.string.action_cancel))&#10;            }&#10;&#10;            Button(&#10;                onClick = onSave,&#10;                modifier = Modifier.weight(1f),&#10;                enabled = title.isNotBlank() &amp;&amp; amount.toDoubleOrNull() != null&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Check,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(stringResource(R.string.action_save))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/receipt/ReadOnlyItemContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/receipt/ReadOnlyItemContent.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.receipt&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.ListItem&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;&#10;@Composable&#10;fun ReadOnlyItemContent(&#10;    item: Transaction,&#10;    index: Int,&#10;    onEdit: () -&gt; Unit&#10;) {&#10;    ListItem(&#10;        headlineContent = {&#10;            Text(&#10;                text = stringResource(R.string.receipt_readonly_title, index, item.title),&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        },&#10;        supportingContent = {&#10;            Text(&#10;                text = stringResource(&#10;                    R.string.receipt_readonly_amount,&#10;                    item.amount&#10;                ).format(item.amount),&#10;                color = MaterialTheme.colorScheme.primary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        trailingContent = {&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;%.2f €&quot;.format(item.amount),&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = onEdit,&#10;                    modifier = Modifier.size(32.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = stringResource(R.string.receipt_readonly_edit),&#10;                        modifier = Modifier.size(18.dp),&#10;                        tint = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.receipt&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.ListItem&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;&#10;/**&#10; * A component for displaying a scanned receipt item in read-only mode.&#10; *&#10; * Shows the item title and amount, and provides an edit button.&#10; *&#10; * @param item The transaction item to display.&#10; * @param index The index of the item in the list.&#10; * @param onEdit Callback when the edit button is clicked.&#10; */&#10;@Composable&#10;fun ReadOnlyItemContent(&#10;    item: Transaction,&#10;    index: Int,&#10;    onEdit: () -&gt; Unit&#10;) {&#10;    ListItem(&#10;        headlineContent = {&#10;            Text(&#10;                text = stringResource(R.string.receipt_readonly_title, index, item.title),&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        },&#10;        supportingContent = {&#10;            Text(&#10;                text = stringResource(&#10;                    R.string.receipt_readonly_amount,&#10;                    item.amount&#10;                ).format(item.amount),&#10;                color = MaterialTheme.colorScheme.primary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        trailingContent = {&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;%.2f €&quot;.format(item.amount),&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = onEdit,&#10;                    modifier = Modifier.size(32.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = stringResource(R.string.receipt_readonly_edit),&#10;                        modifier = Modifier.size(18.dp),&#10;                        tint = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/statistics/CategoriesTab.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/statistics/CategoriesTab.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.statistics&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CategoryStats&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.CategoryStatsItem&#10;&#10;@Composable&#10;fun CategoriesTab(categoryStatsState: UiState&lt;List&lt;CategoryStats&gt;&gt;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        item { Spacer(modifier = Modifier.height(8.dp)) }&#10;&#10;        when (categoryStatsState) {&#10;            is UiState.Loading -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Success -&gt; {&#10;                val totalAmount = categoryStatsState.data.sumOf { it.amount }&#10;&#10;                items(categoryStatsState.data) { categoryStats -&gt;&#10;                    CategoryStatsItem(&#10;                        categoryStats = categoryStats,&#10;                        totalAmount = totalAmount&#10;                    )&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                item {&#10;                    ErrorMessage(&#10;                        message = categoryStatsState.message,&#10;                        onRetry = { /* Reload data */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = stringResource(R.string.empty_category_statistics),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(modifier = Modifier.height(16.dp)) }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.statistics&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CategoryStats&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.CategoryStatsItem&#10;&#10;/**&#10; * Tab for displaying statistics grouped by transaction category.&#10; *&#10; * Shows a list of categories with their statistics, or loading/error/empty states.&#10; *&#10; * @param categoryStatsState The UI state containing the list of category statistics.&#10; */&#10;@Composable&#10;fun CategoriesTab(categoryStatsState: UiState&lt;List&lt;CategoryStats&gt;&gt;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        item { Spacer(modifier = Modifier.height(8.dp)) }&#10;&#10;        when (categoryStatsState) {&#10;            is UiState.Loading -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Success -&gt; {&#10;                val totalAmount = categoryStatsState.data.sumOf { it.amount }&#10;&#10;                items(categoryStatsState.data) { categoryStats -&gt;&#10;                    CategoryStatsItem(&#10;                        categoryStats = categoryStats,&#10;                        totalAmount = totalAmount&#10;                    )&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                item {&#10;                    ErrorMessage(&#10;                        message = categoryStatsState.message,&#10;                        onRetry = { /* Reload data */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = stringResource(R.string.empty_category_statistics),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(modifier = Modifier.height(16.dp)) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/statistics/OverviewTab.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/statistics/OverviewTab.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.statistics&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowDownward&#10;import androidx.compose.material.icons.filled.ArrowUpward&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.StatisticsOverview&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;&#10;@Composable&#10;fun OverviewTab(statisticsState: UiState&lt;StatisticsOverview&gt;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        item { Spacer(modifier = Modifier.height(8.dp)) }&#10;&#10;        item {&#10;            when (statisticsState) {&#10;                is UiState.Loading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;&#10;                is UiState.Success -&gt; {&#10;                    val stats = statisticsState.data&#10;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = stringResource(R.string.statistics_this_month),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Column {&#10;                                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                        Icon(&#10;                                            Icons.Default.ArrowUpward,&#10;                                            contentDescription = stringResource(R.string.statistics_income),&#10;                                            tint = Color.Green,&#10;                                            modifier = Modifier.size(16.dp)&#10;                                        )&#10;                                        Text(&#10;                                            text = stringResource(R.string.statistics_income),&#10;                                            style = MaterialTheme.typography.bodyMedium&#10;                                        )&#10;                                    }&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.monthlyIncome),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Green&#10;                                    )&#10;                                }&#10;&#10;                                Column {&#10;                                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                        Icon(&#10;                                            Icons.Default.ArrowDownward,&#10;                                            contentDescription = stringResource(R.string.statistics_expenses),&#10;                                            tint = Color.Red,&#10;                                            modifier = Modifier.size(16.dp)&#10;                                        )&#10;                                        Text(&#10;                                            text = stringResource(R.string.statistics_expenses),&#10;                                            style = MaterialTheme.typography.bodyMedium&#10;                                        )&#10;                                    }&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.monthlyExpenses),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Red&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Text(&#10;                                text = stringResource(&#10;                                    R.string.format_balance,&#10;                                    FormatUtils.formatCurrency(stats.monthlyBalance)&#10;                                ),&#10;                                style = MaterialTheme.typography.titleLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = if (stats.monthlyBalance &gt;= 0) Color.Green else Color.Red&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = stringResource(R.string.statistics_avg_expense),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_daily),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.avgDailyExpenses),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_weekly),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.avgWeeklyExpenses),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = stringResource(R.string.statistics_transactions),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_total),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;${stats.totalTransactions}&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_this_month),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;${stats.monthlyTransactions}&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                is UiState.Error -&gt; {&#10;                    ErrorMessage(&#10;                        message = statisticsState.message,&#10;                        onRetry = { /* Reload data */ }&#10;                    )&#10;                }&#10;&#10;                is UiState.Empty -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = stringResource(R.string.statistics_no_data),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(modifier = Modifier.height(16.dp)) }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.statistics&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowDownward&#10;import androidx.compose.material.icons.filled.ArrowUpward&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.StatisticsOverview&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;&#10;/**&#10; * Tab for displaying an overview of financial statistics.&#10; *&#10; * Shows monthly summary, average expenses, and transaction counts, or loading/error/empty states.&#10; *&#10; * @param statisticsState The UI state containing the statistics overview.&#10; */&#10;@Composable&#10;fun OverviewTab(statisticsState: UiState&lt;StatisticsOverview&gt;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        item { Spacer(modifier = Modifier.height(8.dp)) }&#10;&#10;        item {&#10;            when (statisticsState) {&#10;                is UiState.Loading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;&#10;                is UiState.Success -&gt; {&#10;                    val stats = statisticsState.data&#10;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = stringResource(R.string.statistics_this_month),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Column {&#10;                                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                        Icon(&#10;                                            Icons.Default.ArrowUpward,&#10;                                            contentDescription = stringResource(R.string.statistics_income),&#10;                                            tint = Color.Green,&#10;                                            modifier = Modifier.size(16.dp)&#10;                                        )&#10;                                        Text(&#10;                                            text = stringResource(R.string.statistics_income),&#10;                                            style = MaterialTheme.typography.bodyMedium&#10;                                        )&#10;                                    }&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.monthlyIncome),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Green&#10;                                    )&#10;                                }&#10;&#10;                                Column {&#10;                                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                        Icon(&#10;                                            Icons.Default.ArrowDownward,&#10;                                            contentDescription = stringResource(R.string.statistics_expenses),&#10;                                            tint = Color.Red,&#10;                                            modifier = Modifier.size(16.dp)&#10;                                        )&#10;                                        Text(&#10;                                            text = stringResource(R.string.statistics_expenses),&#10;                                            style = MaterialTheme.typography.bodyMedium&#10;                                        )&#10;                                    }&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.monthlyExpenses),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Red&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Text(&#10;                                text = stringResource(&#10;                                    R.string.format_balance,&#10;                                    FormatUtils.formatCurrency(stats.monthlyBalance)&#10;                                ),&#10;                                style = MaterialTheme.typography.titleLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = if (stats.monthlyBalance &gt;= 0) Color.Green else Color.Red&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = stringResource(R.string.statistics_avg_expense),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_daily),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.avgDailyExpenses),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_weekly),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = FormatUtils.formatCurrency(stats.avgWeeklyExpenses),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = stringResource(R.string.statistics_transactions),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_total),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;${stats.totalTransactions}&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.statistics_this_month),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;${stats.monthlyTransactions}&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                is UiState.Error -&gt; {&#10;                    ErrorMessage(&#10;                        message = statisticsState.message,&#10;                        onRetry = { /* Reload data */ }&#10;                    )&#10;                }&#10;&#10;                is UiState.Empty -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = stringResource(R.string.statistics_no_data),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(modifier = Modifier.height(16.dp)) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/statistics/TrendsTab.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/statistics/TrendsTab.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.statistics&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.MonthlyTrend&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.MonthlyTrendItem&#10;&#10;@Composable&#10;fun TrendsTab(monthlyTrendsState: UiState&lt;List&lt;MonthlyTrend&gt;&gt;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        item { Spacer(modifier = Modifier.height(8.dp)) }&#10;&#10;        when (monthlyTrendsState) {&#10;            is UiState.Loading -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Success -&gt; {&#10;                items(monthlyTrendsState.data) { monthlyTrend -&gt;&#10;                    MonthlyTrendItem(monthlyTrend = monthlyTrend)&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                item {&#10;                    ErrorMessage(&#10;                        message = monthlyTrendsState.message,&#10;                        onRetry = { /* Reload data */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = stringResource(R.string.statistics_no_trend_data),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(modifier = Modifier.height(16.dp)) }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.statistics&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.ui.components.common.indicators.ErrorMessage&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.MonthlyTrend&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.ui.components.common.items.MonthlyTrendItem&#10;&#10;/**&#10; * Tab for displaying monthly financial trends.&#10; *&#10; * Shows a list of monthly trends, or loading/error/empty states.&#10; *&#10; * @param monthlyTrendsState The UI state containing the list of monthly trends.&#10; */&#10;@Composable&#10;fun TrendsTab(monthlyTrendsState: UiState&lt;List&lt;MonthlyTrend&gt;&gt;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        item { Spacer(modifier = Modifier.height(8.dp)) }&#10;&#10;        when (monthlyTrendsState) {&#10;            is UiState.Loading -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Success -&gt; {&#10;                items(monthlyTrendsState.data) { monthlyTrend -&gt;&#10;                    MonthlyTrendItem(monthlyTrend = monthlyTrend)&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                item {&#10;                    ErrorMessage(&#10;                        message = monthlyTrendsState.message,&#10;                        onRetry = { /* Reload data */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                item {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = stringResource(R.string.statistics_no_trend_data),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(modifier = Modifier.height(16.dp)) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/transactions/EmptyTransactionsView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/transactions/EmptyTransactionsView.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.transactions&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;@Composable&#10;fun EmptyTransactionsView(onAddButtonClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.empty_transactions_title),&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.empty_transactions_description),&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = onAddButtonClick&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = stringResource(R.string.action_add),&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    stringResource(R.string.transactions_add),&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.transactions&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * A full-screen component for displaying an empty state when no transactions exist.&#10; *&#10; * Shows a message and a button to add a new transaction.&#10; *&#10; * @param onAddButtonClick Callback invoked when the add transaction button is clicked.&#10; */&#10;@Composable&#10;fun EmptyTransactionsView(onAddButtonClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.empty_transactions_title),&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = stringResource(R.string.empty_transactions_description),&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = onAddButtonClick&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = stringResource(R.string.action_add),&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    stringResource(R.string.transactions_add),&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/utils/DropdownMenuCategorySelector.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/utils/DropdownMenuCategorySelector.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.utils&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;@Composable&#10;fun DropdownMenuCategorySelector(&#10;    categories: List&lt;TransactionCategory&gt;,&#10;    selectedCategory: TransactionCategory?,&#10;    onCategorySelected: (TransactionCategory) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;&#10;    Box(modifier = modifier) {&#10;        OutlinedButton(&#10;            onClick = { expanded = true },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Farbindikator für die ausgewählte Kategorie&#10;                selectedCategory?.let { category -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(16.dp)&#10;                            .clip(CircleShape)&#10;                            .background(Color(category.color))&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                }&#10;&#10;                Text(&#10;                    text = selectedCategory?.name ?: stringResource(R.string.select_category)&#10;                )&#10;            }&#10;        }&#10;&#10;        DropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            categories.forEach { category -&gt;&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Farbindikator für jede Kategorie&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .size(16.dp)&#10;                                    .clip(CircleShape)&#10;                                    .background(Color(category.color))&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(category.name)&#10;                        }&#10;                    },&#10;                    onClick = {&#10;                        onCategorySelected(category)&#10;                        expanded = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.utils&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;&#10;/**&#10; * A dropdown menu for selecting a transaction category.&#10; *&#10; * Displays a button with the currently selected category and opens a dropdown&#10; * with all available categories for selection.&#10; *&#10; * @param categories List of available categories.&#10; * @param selectedCategory The currently selected category, or null if none selected.&#10; * @param onCategorySelected Callback invoked when a category is selected.&#10; * @param modifier Optional modifier for customizing the component's layout.&#10; */&#10;@Composable&#10;fun DropdownMenuCategorySelector(&#10;    categories: List&lt;TransactionCategory&gt;,&#10;    selectedCategory: TransactionCategory?,&#10;    onCategorySelected: (TransactionCategory) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;&#10;    Box(modifier = modifier) {&#10;        OutlinedButton(&#10;            onClick = { expanded = true },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Farbindikator für die ausgewählte Kategorie&#10;                selectedCategory?.let { category -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(16.dp)&#10;                            .clip(CircleShape)&#10;                            .background(Color(category.color))&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                }&#10;&#10;                Text(&#10;                    text = selectedCategory?.name ?: stringResource(R.string.select_category)&#10;                )&#10;            }&#10;        }&#10;&#10;        DropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            categories.forEach { category -&gt;&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Farbindikator für jede Kategorie&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .size(16.dp)&#10;                                    .clip(CircleShape)&#10;                                    .background(Color(category.color))&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(category.name)&#10;                        }&#10;                    },&#10;                    onClick = {&#10;                        onCategorySelected(category)&#10;                        expanded = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/utils/getAppVersion.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/utils/getAppVersion.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.utils&#10;&#10;import android.content.pm.PackageManager&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;@Composable&#10;fun getNewAppVersion(): String {&#10;    val context = LocalContext.current&#10;    return try {&#10;        val pInfo = context.packageManager.getPackageInfo(context.packageName, 0)&#10;        pInfo.versionName ?: &quot;?&quot;&#10;    } catch (e: PackageManager.NameNotFoundException) {&#10;        &quot;?&quot;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.utils&#10;&#10;import android.content.pm.PackageManager&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;/**&#10; * Retrieves the current version name of the application.&#10; *&#10; * @return The version name as defined in the app's build configuration, or &quot;?&quot; if not found.&#10; */&#10;@Composable&#10;fun getNewAppVersion(): String {&#10;    val context = LocalContext.current&#10;    return try {&#10;        val pInfo = context.packageManager.getPackageInfo(context.packageName, 0)&#10;        pInfo.versionName ?: &quot;?&quot;&#10;    } catch (e: PackageManager.NameNotFoundException) {&#10;        &quot;?&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/utils/getBudgetPeriodText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/utils/getBudgetPeriodText.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.utils&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.res.stringResource&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;&#10;@Composable&#10;fun getBudgetPeriodText(period: BudgetPeriod): String {&#10;    return when (period) {&#10;        BudgetPeriod.DAILY -&gt; stringResource(R.string.budget_period_daily_full)&#10;        BudgetPeriod.WEEKLY -&gt; stringResource(R.string.budget_period_weekly_full)&#10;        BudgetPeriod.MONTHLY -&gt; stringResource(R.string.budget_period_monthly_full)&#10;        BudgetPeriod.YEARLY -&gt; stringResource(R.string.budget_period_yearly_full)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.utils&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.res.stringResource&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;&#10;/**&#10; * Returns a localized string representing the given budget period.&#10; *&#10; * @param period The budget period to be displayed.&#10; * @return The localized string for the specified period.&#10; */&#10;@Composable&#10;fun getBudgetPeriodText(period: BudgetPeriod): String {&#10;    return when (period) {&#10;        BudgetPeriod.DAILY -&gt; stringResource(R.string.budget_period_daily_full)&#10;        BudgetPeriod.WEEKLY -&gt; stringResource(R.string.budget_period_weekly_full)&#10;        BudgetPeriod.MONTHLY -&gt; stringResource(R.string.budget_period_monthly_full)&#10;        BudgetPeriod.YEARLY -&gt; stringResource(R.string.budget_period_yearly_full)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/navigation/MoneyMasterBottomNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/navigation/MoneyMasterBottomNavigation.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.navigation&#10;&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavDestination.Companion.hierarchy&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;&#10;@Composable&#10;fun MoneyMasterBottomNavigation(navController: NavController) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentDestination = navBackStackEntry?.destination&#10;    val context = LocalContext.current&#10;&#10;    NavigationBar {&#10;        bottomNavItems.forEach { screen -&gt;&#10;            NavigationBarItem(&#10;                icon = {&#10;                    screen.icon?.let {&#10;                        Icon(&#10;                            it,&#10;                            contentDescription = screen.getTitle(context)&#10;                        )&#10;                    }&#10;                },&#10;                label = { Text(screen.getTitle(context)) },&#10;                selected = currentDestination?.hierarchy?.any { it.route == screen.route } == true,&#10;                onClick = {&#10;                    navController.navigate(screen.route) {&#10;                        popUpTo(navController.graph.findStartDestination().id) {&#10;                            saveState = true&#10;                        }&#10;                        launchSingleTop = true&#10;                        restoreState = true&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.navigation&#10;&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavDestination.Companion.hierarchy&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;&#10;/**&#10; * Displays the bottom navigation bar for the MoneyMaster app.&#10; *&#10; * Shows navigation items for each main screen and handles navigation logic.&#10; *&#10; * @param navController The NavController used for navigation actions.&#10; */&#10;@Composable&#10;fun MoneyMasterBottomNavigation(navController: NavController) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentDestination = navBackStackEntry?.destination&#10;    val context = LocalContext.current&#10;&#10;    NavigationBar {&#10;        bottomNavItems.forEach { screen -&gt;&#10;            NavigationBarItem(&#10;                icon = {&#10;                    screen.icon?.let {&#10;                        Icon(&#10;                            it,&#10;                            contentDescription = screen.getTitle(context)&#10;                        )&#10;                    }&#10;                },&#10;                label = { Text(screen.getTitle(context)) },&#10;                selected = currentDestination?.hierarchy?.any { it.route == screen.route } == true,&#10;                onClick = {&#10;                    navController.navigate(screen.route) {&#10;                        popUpTo(navController.graph.findStartDestination().id) {&#10;                            saveState = true&#10;                        }&#10;                        launchSingleTop = true&#10;                        restoreState = true&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/navigation/MoneyMasterNavHost.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/navigation/MoneyMasterNavHost.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.AddBudgetScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.BudgetDetailScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.BudgetsScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.EditBudgetScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.dashboard.DashboardScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.receipts.ReceiptScanScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.settings.SettingsScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.statistics.StatisticsScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.AddTransactionScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.EditTransactionScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.TransactionDetailScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.TransactionsScreen&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.BudgetViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CategoryViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CryptoViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.ReceiptScanViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.SettingsViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.StatisticsViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.TransactionViewModel&#10;&#10;@Composable&#10;fun MoneyMasterNavHost(&#10;    navController: NavHostController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Dashboard.route,&#10;        modifier = modifier&#10;    ) {&#10;        composable(Screen.Dashboard.route) {&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            DashboardScreen(&#10;                navController = navController,&#10;                transactionViewModel = transactionViewModel,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Transactions.route) {&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            TransactionsScreen(&#10;                navController = navController,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.AddTransaction.route) {&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            AddTransactionScreen(&#10;                navController = navController,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.TransactionDetail.route,&#10;            arguments = listOf(navArgument(&quot;transactionId&quot;) { type = NavType.LongType })&#10;        ) { backStackEntry -&gt;&#10;            val transactionId = backStackEntry.arguments?.getLong(&quot;transactionId&quot;) ?: 0L&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            TransactionDetailScreen(&#10;                navController = navController,&#10;                transactionId = transactionId,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Budgets.route) {&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            BudgetsScreen(&#10;                navController = navController,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.AddBudget.route) {&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            AddBudgetScreen(&#10;                navController = navController,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.BudgetDetail.route,&#10;            arguments = listOf(navArgument(&quot;budgetId&quot;) { type = NavType.LongType })&#10;        ) { backStackEntry -&gt;&#10;            val budgetId = backStackEntry.arguments?.getLong(&quot;budgetId&quot;) ?: 0L&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            BudgetDetailScreen(&#10;                navController = navController,&#10;                budgetId = budgetId,&#10;                budgetViewModel = budgetViewModel,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.EditBudget.route,&#10;            arguments = listOf(navArgument(&quot;budgetId&quot;) { type = NavType.LongType })&#10;        ) { backStackEntry -&gt;&#10;            val budgetId = backStackEntry.arguments?.getLong(&quot;budgetId&quot;) ?: 0L&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            EditBudgetScreen(&#10;                navController = navController,&#10;                budgetId = budgetId,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Statistics.route) {&#10;            val statisticsViewModel: StatisticsViewModel = hiltViewModel()&#10;            val cryptoViewModel: CryptoViewModel = hiltViewModel()&#10;&#10;            StatisticsScreen(&#10;                navController = navController,&#10;                statisticsViewModel = statisticsViewModel,&#10;                cryptoViewModel = cryptoViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.ReceiptScan.route) {&#10;            val receiptScanViewModel: ReceiptScanViewModel = hiltViewModel()&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;            val categoryViewModel: CategoryViewModel = hiltViewModel()&#10;&#10;            ReceiptScanScreen(&#10;                navController = navController,&#10;                receiptScanViewModel = receiptScanViewModel,&#10;                transactionViewModel = transactionViewModel,&#10;                categoryViewModel = categoryViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = &quot;edit_transaction/{transactionId}&quot;,&#10;            arguments = listOf(navArgument(&quot;transactionId&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val transactionId = backStackEntry.arguments?.getString(&quot;transactionId&quot;) ?: &quot;0&quot;&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;            val categoryViewModel: CategoryViewModel = hiltViewModel()&#10;&#10;            EditTransactionScreen(&#10;                navController = navController,&#10;                transactionId = transactionId,&#10;                transactionViewModel = transactionViewModel,&#10;                categoryViewModel = categoryViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Settings.route) {&#10;            val settingsViewModel: SettingsViewModel = hiltViewModel()&#10;&#10;            SettingsScreen(&#10;                settingsViewModel = settingsViewModel&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.AddBudgetScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.BudgetDetailScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.BudgetsScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.budgets.EditBudgetScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.dashboard.DashboardScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.receipts.ReceiptScanScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.settings.SettingsScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.statistics.StatisticsScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.AddTransactionScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.EditTransactionScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.TransactionDetailScreen&#10;import com.pixelpioneer.moneymaster.ui.screens.transactions.TransactionsScreen&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.BudgetViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CategoryViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.CryptoViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.ReceiptScanViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.SettingsViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.StatisticsViewModel&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.TransactionViewModel&#10;&#10;/**&#10; * Sets up the navigation host for the MoneyMaster app.&#10; *&#10; * Defines all navigation routes and their associated composable screens.&#10; *&#10; * @param navController The NavHostController for navigation.&#10; * @param modifier Optional modifier for the NavHost.&#10; */&#10;@Composable&#10;fun MoneyMasterNavHost(&#10;    navController: NavHostController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Dashboard.route,&#10;        modifier = modifier&#10;    ) {&#10;        composable(Screen.Dashboard.route) {&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            DashboardScreen(&#10;                navController = navController,&#10;                transactionViewModel = transactionViewModel,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Transactions.route) {&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            TransactionsScreen(&#10;                navController = navController,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.AddTransaction.route) {&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            AddTransactionScreen(&#10;                navController = navController,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.TransactionDetail.route,&#10;            arguments = listOf(navArgument(&quot;transactionId&quot;) { type = NavType.LongType })&#10;        ) { backStackEntry -&gt;&#10;            val transactionId = backStackEntry.arguments?.getLong(&quot;transactionId&quot;) ?: 0L&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            TransactionDetailScreen(&#10;                navController = navController,&#10;                transactionId = transactionId,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Budgets.route) {&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            BudgetsScreen(&#10;                navController = navController,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.AddBudget.route) {&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            AddBudgetScreen(&#10;                navController = navController,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.BudgetDetail.route,&#10;            arguments = listOf(navArgument(&quot;budgetId&quot;) { type = NavType.LongType })&#10;        ) { backStackEntry -&gt;&#10;            val budgetId = backStackEntry.arguments?.getLong(&quot;budgetId&quot;) ?: 0L&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;&#10;            BudgetDetailScreen(&#10;                navController = navController,&#10;                budgetId = budgetId,&#10;                budgetViewModel = budgetViewModel,&#10;                transactionViewModel = transactionViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.EditBudget.route,&#10;            arguments = listOf(navArgument(&quot;budgetId&quot;) { type = NavType.LongType })&#10;        ) { backStackEntry -&gt;&#10;            val budgetId = backStackEntry.arguments?.getLong(&quot;budgetId&quot;) ?: 0L&#10;            val budgetViewModel: BudgetViewModel = hiltViewModel()&#10;&#10;            EditBudgetScreen(&#10;                navController = navController,&#10;                budgetId = budgetId,&#10;                budgetViewModel = budgetViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Statistics.route) {&#10;            val statisticsViewModel: StatisticsViewModel = hiltViewModel()&#10;            val cryptoViewModel: CryptoViewModel = hiltViewModel()&#10;&#10;            StatisticsScreen(&#10;                navController = navController,&#10;                statisticsViewModel = statisticsViewModel,&#10;                cryptoViewModel = cryptoViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.ReceiptScan.route) {&#10;            val receiptScanViewModel: ReceiptScanViewModel = hiltViewModel()&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;            val categoryViewModel: CategoryViewModel = hiltViewModel()&#10;&#10;            ReceiptScanScreen(&#10;                navController = navController,&#10;                receiptScanViewModel = receiptScanViewModel,&#10;                transactionViewModel = transactionViewModel,&#10;                categoryViewModel = categoryViewModel&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = &quot;edit_transaction/{transactionId}&quot;,&#10;            arguments = listOf(navArgument(&quot;transactionId&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val transactionId = backStackEntry.arguments?.getString(&quot;transactionId&quot;) ?: &quot;0&quot;&#10;            val transactionViewModel: TransactionViewModel = hiltViewModel()&#10;            val categoryViewModel: CategoryViewModel = hiltViewModel()&#10;&#10;            EditTransactionScreen(&#10;                navController = navController,&#10;                transactionId = transactionId,&#10;                transactionViewModel = transactionViewModel,&#10;                categoryViewModel = categoryViewModel&#10;            )&#10;        }&#10;&#10;        composable(Screen.Settings.route) {&#10;            val settingsViewModel: SettingsViewModel = hiltViewModel()&#10;&#10;            SettingsScreen(&#10;                settingsViewModel = settingsViewModel&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/navigation/Screen.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.navigation&#10;&#10;import android.content.Context&#10;import androidx.annotation.StringRes&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.List&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Camera&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.PieChart&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;sealed class Screen(&#10;    val route: String,&#10;    @StringRes val titleRes: Int,&#10;    val icon: ImageVector? = null&#10;) {&#10;    data object Dashboard : Screen(&quot;dashboard&quot;, R.string.nav_dashboard, Icons.Filled.Home)&#10;    data object Transactions :&#10;        Screen(&quot;transactions&quot;, R.string.nav_transactions, Icons.AutoMirrored.Filled.List)&#10;&#10;    data object Budgets : Screen(&quot;budgets&quot;, R.string.nav_budgets, Icons.Filled.DateRange)&#10;    data object Statistics : Screen(&quot;statistics&quot;, R.string.nav_statistics, Icons.Filled.PieChart)&#10;    data object ReceiptScan : Screen(&quot;receipt_scan&quot;, R.string.nav_receipts, Icons.Filled.Camera)&#10;    data object Settings : Screen(&quot;settings&quot;, R.string.nav_settings, Icons.Filled.Settings)&#10;&#10;    data object AddBudget : Screen(&quot;add_budget&quot;, R.string.nav_add_budget)&#10;    data object AddTransaction :&#10;        Screen(&quot;add_transaction&quot;, R.string.nav_add_transaction, Icons.Filled.Add)&#10;&#10;    data object TransactionDetail :&#10;        Screen(&quot;transaction_detail/{transactionId}&quot;, R.string.nav_transaction_details) {&#10;        fun createRoute(transactionId: Long) = &quot;transaction_detail/$transactionId&quot;&#10;    }&#10;&#10;    data object BudgetDetail : Screen(&quot;budget_detail/{budgetId}&quot;, R.string.nav_budget_details) {&#10;        fun createRoute(budgetId: Long) = &quot;budget_detail/$budgetId&quot;&#10;    }&#10;&#10;    data object EditBudget : Screen(&quot;edit_budget/{budgetId}&quot;, R.string.nav_edit_budget) {&#10;        fun createRoute(budgetId: Long) = &quot;edit_budget/$budgetId&quot;&#10;    }&#10;&#10;    data object EditTransaction :&#10;        Screen(&quot;edit_transaction/{transactionId}&quot;, R.string.nav_edit_transaction) {&#10;        fun createRoute(transactionId: String) = &quot;edit_transaction/$transactionId&quot;&#10;    }&#10;&#10;    fun getTitle(context: Context): String = context.getString(titleRes)&#10;&#10;}&#10;&#10;val bottomNavItems = listOf(&#10;    Screen.Dashboard,&#10;    Screen.Transactions,&#10;    Screen.Budgets,&#10;    Screen.Statistics,&#10;    Screen.ReceiptScan&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.navigation&#10;&#10;import android.content.Context&#10;import androidx.annotation.StringRes&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.List&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Camera&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.PieChart&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import com.pixelpioneer.moneymaster.R&#10;&#10;/**&#10; * Represents a navigation destination (screen) in the MoneyMaster app.&#10; *&#10; * Each screen has a route, a string resource for its title, and optionally an icon.&#10; */&#10;sealed class Screen(&#10;    val route: String,&#10;    @StringRes val titleRes: Int,&#10;    val icon: ImageVector? = null&#10;) {&#10;    data object Dashboard : Screen(&quot;dashboard&quot;, R.string.nav_dashboard, Icons.Filled.Home)&#10;    data object Transactions :&#10;        Screen(&quot;transactions&quot;, R.string.nav_transactions, Icons.AutoMirrored.Filled.List)&#10;&#10;    data object Budgets : Screen(&quot;budgets&quot;, R.string.nav_budgets, Icons.Filled.DateRange)&#10;    data object Statistics : Screen(&quot;statistics&quot;, R.string.nav_statistics, Icons.Filled.PieChart)&#10;    data object ReceiptScan : Screen(&quot;receipt_scan&quot;, R.string.nav_receipts, Icons.Filled.Camera)&#10;    data object Settings : Screen(&quot;settings&quot;, R.string.nav_settings, Icons.Filled.Settings)&#10;&#10;    data object AddBudget : Screen(&quot;add_budget&quot;, R.string.nav_add_budget)&#10;    data object AddTransaction :&#10;        Screen(&quot;add_transaction&quot;, R.string.nav_add_transaction, Icons.Filled.Add)&#10;&#10;    data object TransactionDetail :&#10;        Screen(&quot;transaction_detail/{transactionId}&quot;, R.string.nav_transaction_details) {&#10;        fun createRoute(transactionId: Long) = &quot;transaction_detail/$transactionId&quot;&#10;    }&#10;&#10;    data object BudgetDetail : Screen(&quot;budget_detail/{budgetId}&quot;, R.string.nav_budget_details) {&#10;        fun createRoute(budgetId: Long) = &quot;budget_detail/$budgetId&quot;&#10;    }&#10;&#10;    data object EditBudget : Screen(&quot;edit_budget/{budgetId}&quot;, R.string.nav_edit_budget) {&#10;        fun createRoute(budgetId: Long) = &quot;edit_budget/$budgetId&quot;&#10;    }&#10;&#10;    data object EditTransaction :&#10;        Screen(&quot;edit_transaction/{transactionId}&quot;, R.string.nav_edit_transaction) {&#10;        fun createRoute(transactionId: String) = &quot;edit_transaction/$transactionId&quot;&#10;    }&#10;&#10;    fun getTitle(context: Context): String = context.getString(titleRes)&#10;&#10;}&#10;&#10;/**&#10; * List of screens to be shown in the bottom navigation bar.&#10; */&#10;val bottomNavItems = listOf(&#10;    Screen.Dashboard,&#10;    Screen.Transactions,&#10;    Screen.Budgets,&#10;    Screen.Statistics,&#10;    Screen.ReceiptScan&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/BudgetViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/BudgetViewModel.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.BudgetRepository&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing budget-related data and operations.&#10; *&#10; * Handles loading, creating, updating, and deleting budgets,&#10; * as well as managing categories and form state for budget creation/editing.&#10; * Provides UI state flows for budgets and categories.&#10; *&#10; * @property budgetRepository Repository for budget data access.&#10; * @property categoryRepository Repository for category data access.&#10; */&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository,&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _budgetsState = MutableStateFlow&lt;UiState&lt;List&lt;Budget&gt;&gt;&gt;(UiState.Loading)&#10;    val budgetsState: StateFlow&lt;UiState&lt;List&lt;Budget&gt;&gt;&gt; = _budgetsState&#10;&#10;    private val _categoriesState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt;(UiState.Loading)&#10;    val categoriesState: StateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt; = _categoriesState&#10;&#10;    private val _selectedBudget = MutableStateFlow&lt;UiState&lt;Budget&gt;&gt;(UiState.Loading)&#10;&#10;    private val _budgetFormState = MutableStateFlow(BudgetFormState())&#10;    val budgetFormState: StateFlow&lt;BudgetFormState&gt; = _budgetFormState&#10;&#10;    init {&#10;        observeBudgets()&#10;        loadCategories()&#10;    }&#10;&#10;    private fun observeBudgets() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _budgetsState.value = UiState.Loading&#10;                budgetRepository.allBudgetsWithSpending.collectLatest { budgets -&gt;&#10;                    if (budgets.isEmpty()) {&#10;                        _budgetsState.value = UiState.Empty&#10;                    } else {&#10;                        _budgetsState.value = UiState.Success(budgets)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _budgetsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_budgets))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadBudgetById(id: Long) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _selectedBudget.value = UiState.Loading&#10;                budgetRepository.getBudgetById(id).collectLatest { budget -&gt;&#10;                    _selectedBudget.value = UiState.Success(budget)&#10;                }&#10;            } catch (e: Exception) {&#10;                _selectedBudget.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _categoriesState.value = UiState.Loading&#10;                categoryRepository.allCategories.collect { categories -&gt;&#10;                    if (categories.isEmpty()) {&#10;                        _categoriesState.value = UiState.Empty&#10;                    } else {&#10;                        _categoriesState.value = UiState.Success(categories)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _categoriesState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createBudget() {&#10;        viewModelScope.launch {&#10;            val formState = _budgetFormState.value&#10;&#10;            if (!validateBudgetForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _budgetFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(context.getString(R.string.error_category_null))&#10;&#10;                val budget = Budget(&#10;                    category = category,&#10;                    amount = formState.amount,&#10;                    period = formState.period,&#10;                    spent = 0.0&#10;                )&#10;&#10;                budgetRepository.insertBudget(budget)&#10;                resetFormState()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateBudget(id: Long) {&#10;        viewModelScope.launch {&#10;            val formState = _budgetFormState.value&#10;&#10;            if (!validateBudgetForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _budgetFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(context.getString(R.string.error_category_null))&#10;&#10;                val budget = Budget(&#10;                    id = id,&#10;                    category = category,&#10;                    amount = formState.amount,&#10;                    period = formState.period,&#10;                    spent = 0.0&#10;                )&#10;&#10;                budgetRepository.updateBudget(budget)&#10;                resetFormState()&#10;                loadBudgetById(id)&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            try {&#10;                budgetRepository.deleteBudget(budget)&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateAmount(amount: Double) {&#10;        _budgetFormState.value = _budgetFormState.value.copy(&#10;            amount = amount,&#10;            amountError = if (amount &lt;= 0) context.getString(R.string.error_amount_greater_zero) else null&#10;        )&#10;    }&#10;&#10;    fun updateSelectedCategory(category: TransactionCategory) {&#10;        _budgetFormState.value = _budgetFormState.value.copy(&#10;            selectedCategory = category,&#10;            categoryError = null&#10;        )&#10;    }&#10;&#10;    fun updatePeriod(period: BudgetPeriod) {&#10;        _budgetFormState.value = _budgetFormState.value.copy(period = period)&#10;    }&#10;&#10;    private fun resetFormState() {&#10;        _budgetFormState.value = BudgetFormState()&#10;    }&#10;&#10;    fun initFormWithBudget(budget: Budget) {&#10;        _budgetFormState.value = BudgetFormState(&#10;            amount = budget.amount,&#10;            selectedCategory = budget.category,&#10;            period = budget.period&#10;        )&#10;    }&#10;&#10;    private fun validateBudgetForm(): Boolean {&#10;        val formState = _budgetFormState.value&#10;&#10;        if (formState.amount &lt;= 0) {&#10;            _budgetFormState.value = formState.copy(&#10;                amountError = context.getString(R.string.error_amount_greater_zero)&#10;            )&#10;            return false&#10;        }&#10;&#10;        if (formState.selectedCategory == null) {&#10;            _budgetFormState.value = formState.copy(&#10;                categoryError = context.getString(R.string.error_select_category)&#10;            )&#10;            return false&#10;        }&#10;&#10;        return true&#10;    }&#10;&#10;    fun refreshBudgets() {&#10;        viewModelScope.launch {&#10;            _budgetsState.value = UiState.Loading&#10;            try {&#10;                val budgets = budgetRepository.getBudgetsWithSpendingSync()&#10;                _budgetsState.value = UiState.Success(budgets)&#10;            } catch (e: Exception) {&#10;                _budgetsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_budgets))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class BudgetFormState(&#10;    val amount: Double = 0.0,&#10;    val selectedCategory: TransactionCategory? = null,&#10;    val period: BudgetPeriod = BudgetPeriod.MONTHLY,&#10;    val amountError: String? = null,&#10;    val categoryError: String? = null&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.enums.BudgetPeriod&#10;import com.pixelpioneer.moneymaster.data.model.Budget&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.BudgetRepository&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing budget-related data and operations.&#10; *&#10; * Handles loading, creating, updating, and deleting budgets,&#10; * as well as managing categories and form state for budget creation/editing.&#10; * Provides UI state flows for budgets and categories.&#10; *&#10; * @property budgetRepository Repository for budget data access.&#10; * @property categoryRepository Repository for category data access.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository,&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _budgetsState = MutableStateFlow&lt;UiState&lt;List&lt;Budget&gt;&gt;&gt;(UiState.Loading)&#10;    val budgetsState: StateFlow&lt;UiState&lt;List&lt;Budget&gt;&gt;&gt; = _budgetsState&#10;&#10;    private val _categoriesState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt;(UiState.Loading)&#10;    val categoriesState: StateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt; = _categoriesState&#10;&#10;    private val _selectedBudget = MutableStateFlow&lt;UiState&lt;Budget&gt;&gt;(UiState.Loading)&#10;&#10;    private val _budgetFormState = MutableStateFlow(BudgetFormState())&#10;    val budgetFormState: StateFlow&lt;BudgetFormState&gt; = _budgetFormState&#10;&#10;    init {&#10;        observeBudgets()&#10;        loadCategories()&#10;    }&#10;&#10;    private fun observeBudgets() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _budgetsState.value = UiState.Loading&#10;                budgetRepository.allBudgetsWithSpending.collectLatest { budgets -&gt;&#10;                    if (budgets.isEmpty()) {&#10;                        _budgetsState.value = UiState.Empty&#10;                    } else {&#10;                        _budgetsState.value = UiState.Success(budgets)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _budgetsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_budgets))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadBudgetById(id: Long) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _selectedBudget.value = UiState.Loading&#10;                budgetRepository.getBudgetById(id).collectLatest { budget -&gt;&#10;                    _selectedBudget.value = UiState.Success(budget)&#10;                }&#10;            } catch (e: Exception) {&#10;                _selectedBudget.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _categoriesState.value = UiState.Loading&#10;                categoryRepository.allCategories.collect { categories -&gt;&#10;                    if (categories.isEmpty()) {&#10;                        _categoriesState.value = UiState.Empty&#10;                    } else {&#10;                        _categoriesState.value = UiState.Success(categories)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _categoriesState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createBudget() {&#10;        viewModelScope.launch {&#10;            val formState = _budgetFormState.value&#10;&#10;            if (!validateBudgetForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _budgetFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(context.getString(R.string.error_category_null))&#10;&#10;                val budget = Budget(&#10;                    category = category,&#10;                    amount = formState.amount,&#10;                    period = formState.period,&#10;                    spent = 0.0&#10;                )&#10;&#10;                budgetRepository.insertBudget(budget)&#10;                resetFormState()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateBudget(id: Long) {&#10;        viewModelScope.launch {&#10;            val formState = _budgetFormState.value&#10;&#10;            if (!validateBudgetForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _budgetFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(context.getString(R.string.error_category_null))&#10;&#10;                val budget = Budget(&#10;                    id = id,&#10;                    category = category,&#10;                    amount = formState.amount,&#10;                    period = formState.period,&#10;                    spent = 0.0&#10;                )&#10;&#10;                budgetRepository.updateBudget(budget)&#10;                resetFormState()&#10;                loadBudgetById(id)&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            try {&#10;                budgetRepository.deleteBudget(budget)&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateAmount(amount: Double) {&#10;        _budgetFormState.value = _budgetFormState.value.copy(&#10;            amount = amount,&#10;            amountError = if (amount &lt;= 0) context.getString(R.string.error_amount_greater_zero) else null&#10;        )&#10;    }&#10;&#10;    fun updateSelectedCategory(category: TransactionCategory) {&#10;        _budgetFormState.value = _budgetFormState.value.copy(&#10;            selectedCategory = category,&#10;            categoryError = null&#10;        )&#10;    }&#10;&#10;    fun updatePeriod(period: BudgetPeriod) {&#10;        _budgetFormState.value = _budgetFormState.value.copy(period = period)&#10;    }&#10;&#10;    private fun resetFormState() {&#10;        _budgetFormState.value = BudgetFormState()&#10;    }&#10;&#10;    fun initFormWithBudget(budget: Budget) {&#10;        _budgetFormState.value = BudgetFormState(&#10;            amount = budget.amount,&#10;            selectedCategory = budget.category,&#10;            period = budget.period&#10;        )&#10;    }&#10;&#10;    private fun validateBudgetForm(): Boolean {&#10;        val formState = _budgetFormState.value&#10;&#10;        if (formState.amount &lt;= 0) {&#10;            _budgetFormState.value = formState.copy(&#10;                amountError = context.getString(R.string.error_amount_greater_zero)&#10;            )&#10;            return false&#10;        }&#10;&#10;        if (formState.selectedCategory == null) {&#10;            _budgetFormState.value = formState.copy(&#10;                categoryError = context.getString(R.string.error_select_category)&#10;            )&#10;            return false&#10;        }&#10;&#10;        return true&#10;    }&#10;&#10;    fun refreshBudgets() {&#10;        viewModelScope.launch {&#10;            _budgetsState.value = UiState.Loading&#10;            try {&#10;                val budgets = budgetRepository.getBudgetsWithSpendingSync()&#10;                _budgetsState.value = UiState.Success(budgets)&#10;            } catch (e: Exception) {&#10;                _budgetsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_budgets))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * State holder for the budget form.&#10; *&#10; * @property amount The budget amount entered by the user.&#10; * @property selectedCategory The selected category for the budget.&#10; * @property period The selected period for the budget.&#10; * @property amountError Error message for the amount field, if any.&#10; * @property categoryError Error message for the category field, if any.&#10; */&#10;data class BudgetFormState(&#10;    val amount: Double = 0.0,&#10;    val selectedCategory: TransactionCategory? = null,&#10;    val period: BudgetPeriod = BudgetPeriod.MONTHLY,&#10;    val amountError: String? = null,&#10;    val categoryError: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/CategoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/CategoryViewModel.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing transaction categories.&#10; *&#10; * Initializes predefined categories and repairs the database if needed.&#10; * Provides UI state flows for categories and supports refreshing and reinitialization.&#10; *&#10; * @property categoryRepository Repository for category data access.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _categoriesState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt;(UiState.Loading)&#10;    val categoriesState: StateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt; = _categoriesState&#10;&#10;    private val _categories = MutableStateFlow&lt;List&lt;TransactionCategory&gt;&gt;(emptyList())&#10;    val categories: StateFlow&lt;List&lt;TransactionCategory&gt;&gt; = _categories&#10;&#10;    private val _isInitializing = MutableStateFlow(false)&#10;    val isInitializing: StateFlow&lt;Boolean&gt; = _isInitializing&#10;&#10;    init {&#10;        initializeAndLoadCategories()&#10;    }&#10;&#10;    /**&#10;     * Initialisiert die Kategorien und repariert die Datenbank bei der ersten Nutzung.&#10;     */&#10;    private fun initializeAndLoadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _isInitializing.value = true&#10;                _categoriesState.value = UiState.Loading&#10;&#10;                // Initialisiere Standard-Kategorien und repariere die Datenbank&#10;                categoryRepository.initializeDefaultCategoriesAndRepairDatabase()&#10;&#10;                // Lade die Kategorien nach der Initialisierung&#10;                loadCategories()&#10;&#10;            } catch (e: Exception) {&#10;                // Bei Fehlern: Vordefinierte Kategorien als Fallback verwenden&#10;                val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                _categoriesState.value = UiState.Success(predefinedCategories)&#10;                _categories.value = predefinedCategories&#10;            } finally {&#10;                _isInitializing.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.allCategories&#10;                    .catch { e -&gt;&#10;                        // Bei DB-Fehlern: Vordefinierte Kategorien als Fallback verwenden&#10;                        val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                        _categoriesState.value = UiState.Success(predefinedCategories)&#10;                        _categories.value = predefinedCategories&#10;                    }&#10;                    .collect { categories -&gt;&#10;                        if (categories.isEmpty()) {&#10;                            // Sollte normalerweise nicht auftreten, da wir Fallback haben&#10;                            val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                            _categoriesState.value = UiState.Success(predefinedCategories)&#10;                            _categories.value = predefinedCategories&#10;                        } else {&#10;                            _categoriesState.value = UiState.Success(categories)&#10;                            _categories.value = categories&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                // Als letzter Fallback: Vordefinierte Kategorien verwenden&#10;                val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                _categoriesState.value = UiState.Success(predefinedCategories)&#10;                _categories.value = predefinedCategories&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Erneuert die Kategorien-Liste&#10;     */&#10;    fun refreshCategories() {&#10;        loadCategories()&#10;    }&#10;&#10;    /**&#10;     * Erzwingt eine Neuinitialisierung der Datenbank (für Debug-Zwecke)&#10;     */&#10;    fun forceReinitialize() {&#10;        initializeAndLoadCategories()&#10;    }&#10;}&#10;&#10;/**&#10; * State holder for the category form.&#10; *&#10; * @property name The name of the category.&#10; * @property color The color value for the category.&#10; * @property iconResId The resource ID for the category icon.&#10; * @property nameError Error message for the name field, if any.&#10; */&#10;data class CategoryFormState(&#10;    val name: String = &quot;&quot;,&#10;    val color: Int = 0xFF4CAF50.toInt(),&#10;    val iconResId: Int = 0,&#10;    val nameError: String? = null&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing transaction categories.&#10; *&#10; * Initializes predefined categories and repairs the database if needed.&#10; * Provides UI state flows for categories and supports refreshing and reinitialization.&#10; *&#10; * @property categoryRepository Repository for category data access.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _categoriesState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt;(UiState.Loading)&#10;    val categoriesState: StateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt; = _categoriesState&#10;&#10;    private val _categories = MutableStateFlow&lt;List&lt;TransactionCategory&gt;&gt;(emptyList())&#10;    val categories: StateFlow&lt;List&lt;TransactionCategory&gt;&gt; = _categories&#10;&#10;    private val _isInitializing = MutableStateFlow(false)&#10;    val isInitializing: StateFlow&lt;Boolean&gt; = _isInitializing&#10;&#10;    init {&#10;        initializeAndLoadCategories()&#10;    }&#10;&#10;    /**&#10;     * Initializes categories and repairs the database on first use.&#10;     */&#10;    private fun initializeAndLoadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _isInitializing.value = true&#10;                _categoriesState.value = UiState.Loading&#10;&#10;                // Initialize default categories and repair the database&#10;                categoryRepository.initializeDefaultCategoriesAndRepairDatabase()&#10;&#10;                // Load categories after initialization&#10;                loadCategories()&#10;&#10;            } catch (e: Exception) {&#10;                // On error: use predefined categories as fallback&#10;                val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                _categoriesState.value = UiState.Success(predefinedCategories)&#10;                _categories.value = predefinedCategories&#10;            } finally {&#10;                _isInitializing.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.allCategories&#10;                    .catch { e -&gt;&#10;                        // On DB errors: use predefined categories as fallback&#10;                        val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                        _categoriesState.value = UiState.Success(predefinedCategories)&#10;                        _categories.value = predefinedCategories&#10;                    }&#10;                    .collect { categories -&gt;&#10;                        if (categories.isEmpty()) {&#10;                            // Should not happen, since we have a fallback&#10;                            val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                            _categoriesState.value = UiState.Success(predefinedCategories)&#10;                            _categories.value = predefinedCategories&#10;                        } else {&#10;                            _categoriesState.value = UiState.Success(categories)&#10;                            _categories.value = categories&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                // As last fallback: use predefined categories&#10;                val predefinedCategories = categoryRepository.getPredefinedCategories()&#10;                _categoriesState.value = UiState.Success(predefinedCategories)&#10;                _categories.value = predefinedCategories&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refreshes the categories list.&#10;     */&#10;    fun refreshCategories() {&#10;        loadCategories()&#10;    }&#10;&#10;    /**&#10;     * Forces reinitialization of the database (for debugging purposes).&#10;     */&#10;    fun forceReinitialize() {&#10;        initializeAndLoadCategories()&#10;    }&#10;}&#10;&#10;/**&#10; * State holder for the category form.&#10; *&#10; * @property name The name of the category.&#10; * @property color The color value for the category.&#10; * @property iconResId The resource ID for the category icon.&#10; * @property nameError Error message for the name field, if any.&#10; */&#10;data class CategoryFormState(&#10;    val name: String = &quot;&quot;,&#10;    val color: Int = 0xFF4CAF50.toInt(),&#10;    val iconResId: Int = 0,&#10;    val nameError: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/CryptoViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/CryptoViewModel.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.data.repository.CoinCapRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing cryptocurrency assets and their historical data.&#10; *&#10; * Handles loading crypto assets, selecting an asset, and loading its history.&#10; * Provides UI state flows for assets and history.&#10; *&#10; * @property coinCapRepository Repository for accessing CoinCap API data.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class CryptoViewModel @Inject constructor(&#10;    private val coinCapRepository: CoinCapRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _cryptoAssetsState = MutableStateFlow&lt;UiState&lt;List&lt;Asset&gt;&gt;&gt;(UiState.Loading)&#10;    val cryptoAssetsState: StateFlow&lt;UiState&lt;List&lt;Asset&gt;&gt;&gt; = _cryptoAssetsState&#10;&#10;    private val _cryptoHistoryState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;HistoryDataPoint&gt;&gt;&gt;(UiState.Loading)&#10;    val cryptoHistoryState: StateFlow&lt;UiState&lt;List&lt;HistoryDataPoint&gt;&gt;&gt; = _cryptoHistoryState&#10;&#10;    private val _selectedAsset = MutableStateFlow&lt;Asset?&gt;(null)&#10;    val selectedAsset: StateFlow&lt;Asset?&gt; = _selectedAsset&#10;&#10;    fun loadCryptoAssets(limit: Int = 10) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _cryptoAssetsState.value = UiState.Loading&#10;                val assets = coinCapRepository.getAssets(limit)&#10;&#10;                if (assets.isEmpty()) {&#10;                    _cryptoAssetsState.value = UiState.Empty&#10;                } else {&#10;                    _cryptoAssetsState.value = UiState.Success(assets)&#10;                    if (_selectedAsset.value == null) {&#10;                        selectAsset(assets.first())&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _cryptoAssetsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_crypto))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun selectAsset(asset: Asset) {&#10;        _selectedAsset.value = asset&#10;        loadAssetHistory(asset.id)&#10;    }&#10;&#10;    private fun loadAssetHistory(assetId: String, interval: String = &quot;h1&quot;, daysBack: Int = 7) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _cryptoHistoryState.value = UiState.Loading&#10;                val historyData = coinCapRepository.getAssetHistory(&#10;                    assetId = assetId,&#10;                    interval = interval,&#10;                    daysBack = daysBack&#10;                )&#10;&#10;                if (historyData.isEmpty()) {&#10;                    _cryptoHistoryState.value = UiState.Empty&#10;                } else {&#10;                    _cryptoHistoryState.value = UiState.Success(historyData)&#10;                }&#10;            } catch (e: Exception) {&#10;                _cryptoHistoryState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_history))&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.data.repository.CoinCapRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing cryptocurrency assets and their historical data.&#10; *&#10; * Handles loading crypto assets, selecting an asset, and loading its history.&#10; * Provides UI state flows for assets and history.&#10; *&#10; * @property coinCapRepository Repository for accessing CoinCap API data.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class CryptoViewModel @Inject constructor(&#10;    private val coinCapRepository: CoinCapRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _cryptoAssetsState = MutableStateFlow&lt;UiState&lt;List&lt;Asset&gt;&gt;&gt;(UiState.Loading)&#10;    val cryptoAssetsState: StateFlow&lt;UiState&lt;List&lt;Asset&gt;&gt;&gt; = _cryptoAssetsState&#10;&#10;    private val _cryptoHistoryState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;HistoryDataPoint&gt;&gt;&gt;(UiState.Loading)&#10;    val cryptoHistoryState: StateFlow&lt;UiState&lt;List&lt;HistoryDataPoint&gt;&gt;&gt; = _cryptoHistoryState&#10;&#10;    private val _selectedAsset = MutableStateFlow&lt;Asset?&gt;(null)&#10;    val selectedAsset: StateFlow&lt;Asset?&gt; = _selectedAsset&#10;&#10;    fun loadCryptoAssets(limit: Int = 10) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _cryptoAssetsState.value = UiState.Loading&#10;                val assets = coinCapRepository.getAssets(limit)&#10;&#10;                if (assets.isEmpty()) {&#10;                    _cryptoAssetsState.value = UiState.Empty&#10;                } else {&#10;                    _cryptoAssetsState.value = UiState.Success(assets)&#10;                    if (_selectedAsset.value == null) {&#10;                        selectAsset(assets.first())&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _cryptoAssetsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_crypto))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun selectAsset(asset: Asset) {&#10;        _selectedAsset.value = asset&#10;        loadAssetHistory(asset.id)&#10;    }&#10;&#10;    private fun loadAssetHistory(assetId: String, interval: String = &quot;h1&quot;, daysBack: Int = 7) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _cryptoHistoryState.value = UiState.Loading&#10;                val historyData = coinCapRepository.getAssetHistory(&#10;                    assetId = assetId,&#10;                    interval = interval,&#10;                    daysBack = daysBack&#10;                )&#10;&#10;                if (historyData.isEmpty()) {&#10;                    _cryptoHistoryState.value = UiState.Empty&#10;                } else {&#10;                    _cryptoHistoryState.value = UiState.Success(historyData)&#10;                }&#10;            } catch (e: Exception) {&#10;                _cryptoHistoryState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_loading_history))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/RemoteConfigViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/RemoteConfigViewModel.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;data class RemoteConfigState(&#10;    val isLoading: Boolean = false,&#10;    val isSuccess: Boolean = false,&#10;    val errorMessage: String? = null,&#10;    val debugInfo: Map&lt;String, Any&gt; = emptyMap()&#10;)&#10;&#10;@HiltViewModel&#10;class RemoteConfigViewModel @Inject constructor(&#10;    private val remoteConfigManager: RemoteConfigManager,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(RemoteConfigState())&#10;    val uiState: StateFlow&lt;RemoteConfigState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadRemoteConfig()&#10;    }&#10;&#10;    private fun loadRemoteConfig() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, errorMessage = null)&#10;&#10;            try {&#10;                val success = remoteConfigManager.fetchAndActivate()&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    isSuccess = success,&#10;                    debugInfo = remoteConfigManager.getDebugInfo()&#10;                )&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    isSuccess = false,&#10;                    errorMessage = e.message ?: context.getString(R.string.error_unknown)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * State holder for the remote config loading process.&#10; *&#10; * @property isLoading Whether the remote config is currently loading.&#10; * @property isSuccess Whether the remote config was loaded successfully.&#10; * @property errorMessage Error message if loading failed.&#10; * @property debugInfo Additional debug information from remote config.&#10; */&#10;data class RemoteConfigState(&#10;    val isLoading: Boolean = false,&#10;    val isSuccess: Boolean = false,&#10;    val errorMessage: String? = null,&#10;    val debugInfo: Map&lt;String, Any&gt; = emptyMap()&#10;)&#10;&#10;/**&#10; * ViewModel for managing remote configuration loading and state.&#10; *&#10; * Handles fetching and activating remote config values and exposes loading, success, and error states.&#10; *&#10; * @property remoteConfigManager Manager for remote config operations.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class RemoteConfigViewModel @Inject constructor(&#10;    private val remoteConfigManager: RemoteConfigManager,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(RemoteConfigState())&#10;    val uiState: StateFlow&lt;RemoteConfigState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadRemoteConfig()&#10;    }&#10;&#10;    private fun loadRemoteConfig() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, errorMessage = null)&#10;&#10;            try {&#10;                val success = remoteConfigManager.fetchAndActivate()&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    isSuccess = success,&#10;                    debugInfo = remoteConfigManager.getDebugInfo()&#10;                )&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    isSuccess = false,&#10;                    errorMessage = e.message ?: context.getString(R.string.error_unknown)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/SettingsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/SettingsViewModel.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.pixelpioneer.moneymaster.data.model.SettingsState&#10;import com.pixelpioneer.moneymaster.data.repository.SettingsRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class SettingsViewModel @Inject constructor(&#10;    private val settingsRepository: SettingsRepository&#10;) : ViewModel() {&#10;    private val _state = MutableStateFlow(loadSettings())&#10;    val state: StateFlow&lt;SettingsState&gt; = _state&#10;&#10;    private fun loadSettings(): SettingsState = SettingsState(&#10;        name = settingsRepository.getName(),&#10;        income = settingsRepository.getIncome(),&#10;        rent = settingsRepository.getRent(),&#10;        electricity = settingsRepository.getElectricity(),&#10;        gas = settingsRepository.getGas(),&#10;        internet = settingsRepository.getInternet(),&#10;        darkMode = settingsRepository.isDarkMode(),&#10;        additionalCosts = settingsRepository.getAdditionalCosts()&#10;    )&#10;&#10;    fun updateName(name: String) {&#10;        _state.value = _state.value.copy(name = name)&#10;        settingsRepository.saveName(name)&#10;    }&#10;&#10;    fun updateIncome(income: String) {&#10;        _state.value = _state.value.copy(income = income)&#10;        settingsRepository.saveIncome(income)&#10;    }&#10;&#10;    fun updateRent(rent: String) {&#10;        _state.value = _state.value.copy(rent = rent)&#10;        settingsRepository.saveRent(rent)&#10;    }&#10;&#10;    fun updateElectricity(electricity: String) {&#10;        _state.value = _state.value.copy(electricity = electricity)&#10;        settingsRepository.saveElectricity(electricity)&#10;    }&#10;&#10;    fun updateGas(gas: String) {&#10;        _state.value = _state.value.copy(gas = gas)&#10;        settingsRepository.saveGas(gas)&#10;    }&#10;&#10;    fun updateInternet(internet: String) {&#10;        _state.value = _state.value.copy(internet = internet)&#10;        settingsRepository.saveInternet(internet)&#10;    }&#10;&#10;    fun updateDarkMode(dark: Boolean) {&#10;        _state.value = _state.value.copy(darkMode = dark)&#10;        settingsRepository.saveDarkMode(dark)&#10;    }&#10;&#10;    fun addAdditionalCost() {&#10;        val updated =&#10;            _state.value.additionalCosts + com.pixelpioneer.moneymaster.data.model.AdditionalCost()&#10;        _state.value = _state.value.copy(additionalCosts = updated)&#10;        settingsRepository.saveAdditionalCosts(updated)&#10;    }&#10;&#10;    fun updateAdditionalCost(index: Int, label: String? = null, value: String? = null) {&#10;        val costs = _state.value.additionalCosts.toMutableList()&#10;        val current = costs.getOrNull(index) ?: return&#10;        costs[index] = current.copy(&#10;            label = label ?: current.label,&#10;            value = value ?: current.value&#10;        )&#10;        _state.value = _state.value.copy(additionalCosts = costs)&#10;        settingsRepository.saveAdditionalCosts(costs)&#10;    }&#10;&#10;    fun removeAdditionalCost(index: Int) {&#10;        val costs = _state.value.additionalCosts.toMutableList()&#10;        if (index in costs.indices) {&#10;            costs.removeAt(index)&#10;            _state.value = _state.value.copy(additionalCosts = costs)&#10;            settingsRepository.saveAdditionalCosts(costs)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.pixelpioneer.moneymaster.data.model.SettingsState&#10;import com.pixelpioneer.moneymaster.data.repository.SettingsRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing user settings and preferences.&#10; *&#10; * Handles loading, updating, and persisting user settings such as name, income,&#10; * recurring costs, and appearance preferences. Provides a state flow for the current settings.&#10; *&#10; * @property settingsRepository Repository for accessing and saving settings.&#10; */&#10;@HiltViewModel&#10;class SettingsViewModel @Inject constructor(&#10;    private val settingsRepository: SettingsRepository&#10;) : ViewModel() {&#10;    private val _state = MutableStateFlow(loadSettings())&#10;    val state: StateFlow&lt;SettingsState&gt; = _state&#10;&#10;    private fun loadSettings(): SettingsState = SettingsState(&#10;        name = settingsRepository.getName(),&#10;        income = settingsRepository.getIncome(),&#10;        rent = settingsRepository.getRent(),&#10;        electricity = settingsRepository.getElectricity(),&#10;        gas = settingsRepository.getGas(),&#10;        internet = settingsRepository.getInternet(),&#10;        darkMode = settingsRepository.isDarkMode(),&#10;        additionalCosts = settingsRepository.getAdditionalCosts()&#10;    )&#10;&#10;    fun updateName(name: String) {&#10;        _state.value = _state.value.copy(name = name)&#10;        settingsRepository.saveName(name)&#10;    }&#10;&#10;    fun updateIncome(income: String) {&#10;        _state.value = _state.value.copy(income = income)&#10;        settingsRepository.saveIncome(income)&#10;    }&#10;&#10;    fun updateRent(rent: String) {&#10;        _state.value = _state.value.copy(rent = rent)&#10;        settingsRepository.saveRent(rent)&#10;    }&#10;&#10;    fun updateElectricity(electricity: String) {&#10;        _state.value = _state.value.copy(electricity = electricity)&#10;        settingsRepository.saveElectricity(electricity)&#10;    }&#10;&#10;    fun updateGas(gas: String) {&#10;        _state.value = _state.value.copy(gas = gas)&#10;        settingsRepository.saveGas(gas)&#10;    }&#10;&#10;    fun updateInternet(internet: String) {&#10;        _state.value = _state.value.copy(internet = internet)&#10;        settingsRepository.saveInternet(internet)&#10;    }&#10;&#10;    fun updateDarkMode(dark: Boolean) {&#10;        _state.value = _state.value.copy(darkMode = dark)&#10;        settingsRepository.saveDarkMode(dark)&#10;    }&#10;&#10;    fun addAdditionalCost() {&#10;        val updated =&#10;            _state.value.additionalCosts + com.pixelpioneer.moneymaster.data.model.AdditionalCost()&#10;        _state.value = _state.value.copy(additionalCosts = updated)&#10;        settingsRepository.saveAdditionalCosts(updated)&#10;    }&#10;&#10;    fun updateAdditionalCost(index: Int, label: String? = null, value: String? = null) {&#10;        val costs = _state.value.additionalCosts.toMutableList()&#10;        val current = costs.getOrNull(index) ?: return&#10;        costs[index] = current.copy(&#10;            label = label ?: current.label,&#10;            value = value ?: current.value&#10;        )&#10;        _state.value = _state.value.copy(additionalCosts = costs)&#10;        settingsRepository.saveAdditionalCosts(costs)&#10;    }&#10;&#10;    fun removeAdditionalCost(index: Int) {&#10;        val costs = _state.value.additionalCosts.toMutableList()&#10;        if (index in costs.indices) {&#10;            costs.removeAt(index)&#10;            _state.value = _state.value.copy(additionalCosts = costs)&#10;            settingsRepository.saveAdditionalCosts(costs)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/StatisticsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/StatisticsViewModel.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.data.repository.TransactionRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.flow.combine&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Locale&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing and calculating statistics related to transactions and categories.&#10; *&#10; * Loads statistical overviews, category statistics, and monthly trends.&#10; * Provides UI state flows for statistics and trends.&#10; *&#10; * @property transactionRepository Repository for transaction data access.&#10; * @property categoryRepository Repository for category data access.&#10; */&#10;@HiltViewModel&#10;class StatisticsViewModel @Inject constructor(&#10;    private val transactionRepository: TransactionRepository,&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _statisticsState = MutableStateFlow&lt;UiState&lt;StatisticsOverview&gt;&gt;(UiState.Loading)&#10;    val statisticsState: StateFlow&lt;UiState&lt;StatisticsOverview&gt;&gt; = _statisticsState&#10;&#10;    private val _categoryStatsState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;CategoryStats&gt;&gt;&gt;(UiState.Loading)&#10;    val categoryStatsState: StateFlow&lt;UiState&lt;List&lt;CategoryStats&gt;&gt;&gt; = _categoryStatsState&#10;&#10;    private val _monthlyTrendsState = MutableStateFlow&lt;UiState&lt;List&lt;MonthlyTrend&gt;&gt;&gt;(UiState.Loading)&#10;    val monthlyTrendsState: StateFlow&lt;UiState&lt;List&lt;MonthlyTrend&gt;&gt;&gt; = _monthlyTrendsState&#10;&#10;    init {&#10;        loadStatistics()&#10;        loadCategoryStats()&#10;        loadMonthlyTrends()&#10;    }&#10;&#10;    private fun loadStatistics() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _statisticsState.value = UiState.Loading&#10;&#10;                val calendar = Calendar.getInstance()&#10;                val currentMonth = calendar.apply {&#10;                    set(Calendar.DAY_OF_MONTH, 1)&#10;                    set(Calendar.HOUR_OF_DAY, 0)&#10;                    set(Calendar.MINUTE, 0)&#10;                    set(Calendar.SECOND, 0)&#10;                    set(Calendar.MILLISECOND, 0)&#10;                }.timeInMillis&#10;&#10;                val nextMonth = calendar.apply {&#10;                    add(Calendar.MONTH, 1)&#10;                }.timeInMillis&#10;&#10;                transactionRepository.getTransactionsWithCategoryByDateRange(&#10;                    currentMonth,&#10;                    nextMonth&#10;                )&#10;                    .catch { e -&gt;&#10;                        _statisticsState.value =&#10;                            UiState.Error(&#10;                                e.message ?: context.getString(R.string.error_loading_statistics)&#10;                            )&#10;                    }&#10;                    .collect { transactions -&gt;&#10;                        val totalIncome = transactionRepository.getTotalIncomeSync()&#10;                        val totalExpenses = transactionRepository.getTotalExpensesSync()&#10;                        val totalTransactions = transactionRepository.getTransactionCountSync()&#10;&#10;                        val monthlyIncome = transactions&#10;                            .filter { !it.transaction.isExpense }&#10;                            .sumOf { it.transaction.amount }&#10;&#10;                        val monthlyExpenses = transactions&#10;                            .filter { it.transaction.isExpense }&#10;                            .sumOf { it.transaction.amount }&#10;&#10;                        val monthlyBalance = monthlyIncome - monthlyExpenses&#10;&#10;                        val daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;                        val avgDailyExpenses = monthlyExpenses / daysInMonth&#10;                        val avgWeeklyExpenses = avgDailyExpenses * 7&#10;&#10;                        val overview = StatisticsOverview(&#10;                            monthlyIncome = monthlyIncome,&#10;                            monthlyExpenses = monthlyExpenses,&#10;                            monthlyBalance = monthlyBalance,&#10;                            avgDailyExpenses = avgDailyExpenses,&#10;                            avgWeeklyExpenses = avgWeeklyExpenses,&#10;                            totalTransactions = totalTransactions,&#10;                            monthlyTransactions = transactions.size&#10;                        )&#10;&#10;                        _statisticsState.value = UiState.Success(overview)&#10;                    }&#10;            } catch (e: Exception) {&#10;                _statisticsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategoryStats() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _categoryStatsState.value = UiState.Loading&#10;&#10;                combine(&#10;                    categoryRepository.allCategories,&#10;                    transactionRepository.allTransactionsWithCategory&#10;                ) { categories, transactions -&gt;&#10;                    val expenseTransactions = transactions.filter { it.isExpense }&#10;&#10;                    categories.mapNotNull { category -&gt;&#10;                        val categoryTransactions =&#10;                            expenseTransactions.filter { it.category.id == category.id }&#10;                        if (categoryTransactions.isNotEmpty()) {&#10;                            CategoryStats(&#10;                                category = category,&#10;                                amount = categoryTransactions.sumOf { it.amount.toDouble() },&#10;                                transactionCount = categoryTransactions.size&#10;                            )&#10;                        } else null&#10;                    }.sortedByDescending { it.amount }&#10;                }&#10;                    .catch { e -&gt;&#10;                        _categoryStatsState.value = UiState.Error(&#10;                            e.message&#10;                                ?: context.getString(R.string.error_loading_category_statistics)&#10;                        )&#10;                    }&#10;                    .collect { categoryStats -&gt;&#10;                        if (categoryStats.isEmpty()) {&#10;                            _categoryStatsState.value = UiState.Empty&#10;                        } else {&#10;                            _categoryStatsState.value = UiState.Success(categoryStats)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _categoryStatsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadMonthlyTrends() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _monthlyTrendsState.value = UiState.Loading&#10;&#10;                transactionRepository.allTransactionsWithCategory&#10;                    .catch { e -&gt;&#10;                        _monthlyTrendsState.value =&#10;                            UiState.Error(&#10;                                e.message ?: context.getString(R.string.error_loading_trend_data)&#10;                            )&#10;                    }&#10;                    .collect { transactions -&gt;&#10;                        val monthlyTrends = transactions&#10;                            .groupBy { transactionWithCategory -&gt;&#10;                                val calendar = Calendar.getInstance()&#10;                                calendar.timeInMillis = transactionWithCategory.date&#10;                                &quot;${calendar.get(Calendar.YEAR)}-${calendar.get(Calendar.MONTH)}&quot;&#10;                            }&#10;                            .map { (_, monthTransactions) -&gt;&#10;                                val calendar = Calendar.getInstance()&#10;                                calendar.timeInMillis = monthTransactions.first().date&#10;&#10;                                val monthlyIncome = transactions&#10;                                    .filter { !it.isExpense }&#10;                                    .sumOf { it.amount }&#10;&#10;                                val monthlyExpenses = transactions&#10;                                    .filter { it.isExpense }&#10;                                    .sumOf { it.amount }&#10;&#10;                                val dateFormat = SimpleDateFormat(&quot;MMMM yyyy&quot;, Locale.GERMAN)&#10;                                val monthYear = dateFormat.format(calendar.time)&#10;&#10;                                MonthlyTrend(&#10;                                    monthYear = monthYear,&#10;                                    income = monthlyIncome,&#10;                                    expenses = monthlyExpenses,&#10;                                    balance = monthlyIncome - monthlyExpenses,&#10;                                    transactionCount = monthTransactions.size&#10;                                )&#10;                            }&#10;                            .sortedWith(compareByDescending&lt;MonthlyTrend&gt; { trend -&gt;&#10;                                SimpleDateFormat(&#10;                                    &quot;MMMM yyyy&quot;,&#10;                                    Locale.GERMAN&#10;                                ).parse(trend.monthYear)?.time ?: 0&#10;                            })&#10;                            .take(12)&#10;&#10;                        if (monthlyTrends.isEmpty()) {&#10;                            _monthlyTrendsState.value = UiState.Empty&#10;                        } else {&#10;                            _monthlyTrendsState.value = UiState.Success(monthlyTrends)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _monthlyTrendsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class StatisticsOverview(&#10;    val monthlyIncome: Double,&#10;    val monthlyExpenses: Double,&#10;    val monthlyBalance: Double,&#10;    val avgDailyExpenses: Double,&#10;    val avgWeeklyExpenses: Double,&#10;    val totalTransactions: Int,&#10;    val monthlyTransactions: Int&#10;)&#10;&#10;data class CategoryStats(&#10;    val category: TransactionCategory,&#10;    val amount: Double,&#10;    val transactionCount: Int&#10;)&#10;&#10;data class MonthlyTrend(&#10;    val monthYear: String,&#10;    val income: Double,&#10;    val expenses: Double,&#10;    val balance: Double,&#10;    val transactionCount: Int&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.data.repository.TransactionRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.flow.combine&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Locale&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing and calculating statistics related to transactions and categories.&#10; *&#10; * Loads statistical overviews, category statistics, and monthly trends.&#10; * Provides UI state flows for statistics and trends.&#10; *&#10; * @property transactionRepository Repository for transaction data access.&#10; * @property categoryRepository Repository for category data access.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class StatisticsViewModel @Inject constructor(&#10;    private val transactionRepository: TransactionRepository,&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;&#10;    private val _statisticsState = MutableStateFlow&lt;UiState&lt;StatisticsOverview&gt;&gt;(UiState.Loading)&#10;    val statisticsState: StateFlow&lt;UiState&lt;StatisticsOverview&gt;&gt; = _statisticsState&#10;&#10;    private val _categoryStatsState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;CategoryStats&gt;&gt;&gt;(UiState.Loading)&#10;    val categoryStatsState: StateFlow&lt;UiState&lt;List&lt;CategoryStats&gt;&gt;&gt; = _categoryStatsState&#10;&#10;    private val _monthlyTrendsState = MutableStateFlow&lt;UiState&lt;List&lt;MonthlyTrend&gt;&gt;&gt;(UiState.Loading)&#10;    val monthlyTrendsState: StateFlow&lt;UiState&lt;List&lt;MonthlyTrend&gt;&gt;&gt; = _monthlyTrendsState&#10;&#10;    init {&#10;        loadStatistics()&#10;        loadCategoryStats()&#10;        loadMonthlyTrends()&#10;    }&#10;&#10;    private fun loadStatistics() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _statisticsState.value = UiState.Loading&#10;&#10;                val calendar = Calendar.getInstance()&#10;                val currentMonth = calendar.apply {&#10;                    set(Calendar.DAY_OF_MONTH, 1)&#10;                    set(Calendar.HOUR_OF_DAY, 0)&#10;                    set(Calendar.MINUTE, 0)&#10;                    set(Calendar.SECOND, 0)&#10;                    set(Calendar.MILLISECOND, 0)&#10;                }.timeInMillis&#10;&#10;                val nextMonth = calendar.apply {&#10;                    add(Calendar.MONTH, 1)&#10;                }.timeInMillis&#10;&#10;                transactionRepository.getTransactionsWithCategoryByDateRange(&#10;                    currentMonth,&#10;                    nextMonth&#10;                )&#10;                    .catch { e -&gt;&#10;                        _statisticsState.value =&#10;                            UiState.Error(&#10;                                e.message ?: context.getString(R.string.error_loading_statistics)&#10;                            )&#10;                    }&#10;                    .collect { transactions -&gt;&#10;                        val totalIncome = transactionRepository.getTotalIncomeSync()&#10;                        val totalExpenses = transactionRepository.getTotalExpensesSync()&#10;                        val totalTransactions = transactionRepository.getTransactionCountSync()&#10;&#10;                        val monthlyIncome = transactions&#10;                            .filter { !it.transaction.isExpense }&#10;                            .sumOf { it.transaction.amount }&#10;&#10;                        val monthlyExpenses = transactions&#10;                            .filter { it.transaction.isExpense }&#10;                            .sumOf { it.transaction.amount }&#10;&#10;                        val monthlyBalance = monthlyIncome - monthlyExpenses&#10;&#10;                        val daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;                        val avgDailyExpenses = monthlyExpenses / daysInMonth&#10;                        val avgWeeklyExpenses = avgDailyExpenses * 7&#10;&#10;                        val overview = StatisticsOverview(&#10;                            monthlyIncome = monthlyIncome,&#10;                            monthlyExpenses = monthlyExpenses,&#10;                            monthlyBalance = monthlyBalance,&#10;                            avgDailyExpenses = avgDailyExpenses,&#10;                            avgWeeklyExpenses = avgWeeklyExpenses,&#10;                            totalTransactions = totalTransactions,&#10;                            monthlyTransactions = transactions.size&#10;                        )&#10;&#10;                        _statisticsState.value = UiState.Success(overview)&#10;                    }&#10;            } catch (e: Exception) {&#10;                _statisticsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategoryStats() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _categoryStatsState.value = UiState.Loading&#10;&#10;                combine(&#10;                    categoryRepository.allCategories,&#10;                    transactionRepository.allTransactionsWithCategory&#10;                ) { categories, transactions -&gt;&#10;                    val expenseTransactions = transactions.filter { it.isExpense }&#10;&#10;                    categories.mapNotNull { category -&gt;&#10;                        val categoryTransactions =&#10;                            expenseTransactions.filter { it.category.id == category.id }&#10;                        if (categoryTransactions.isNotEmpty()) {&#10;                            CategoryStats(&#10;                                category = category,&#10;                                amount = categoryTransactions.sumOf { it.amount.toDouble() },&#10;                                transactionCount = categoryTransactions.size&#10;                            )&#10;                        } else null&#10;                    }.sortedByDescending { it.amount }&#10;                }&#10;                    .catch { e -&gt;&#10;                        _categoryStatsState.value = UiState.Error(&#10;                            e.message&#10;                                ?: context.getString(R.string.error_loading_category_statistics)&#10;                        )&#10;                    }&#10;                    .collect { categoryStats -&gt;&#10;                        if (categoryStats.isEmpty()) {&#10;                            _categoryStatsState.value = UiState.Empty&#10;                        } else {&#10;                            _categoryStatsState.value = UiState.Success(categoryStats)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _categoryStatsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadMonthlyTrends() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _monthlyTrendsState.value = UiState.Loading&#10;&#10;                transactionRepository.allTransactionsWithCategory&#10;                    .catch { e -&gt;&#10;                        _monthlyTrendsState.value =&#10;                            UiState.Error(&#10;                                e.message ?: context.getString(R.string.error_loading_trend_data)&#10;                            )&#10;                    }&#10;                    .collect { transactions -&gt;&#10;                        val monthlyTrends = transactions&#10;                            .groupBy { transactionWithCategory -&gt;&#10;                                val calendar = Calendar.getInstance()&#10;                                calendar.timeInMillis = transactionWithCategory.date&#10;                                &quot;${calendar.get(Calendar.YEAR)}-${calendar.get(Calendar.MONTH)}&quot;&#10;                            }&#10;                            .map { (_, monthTransactions) -&gt;&#10;                                val calendar = Calendar.getInstance()&#10;                                calendar.timeInMillis = monthTransactions.first().date&#10;&#10;                                val monthlyIncome = transactions&#10;                                    .filter { !it.isExpense }&#10;                                    .sumOf { it.amount }&#10;&#10;                                val monthlyExpenses = transactions&#10;                                    .filter { it.isExpense }&#10;                                    .sumOf { it.amount }&#10;&#10;                                val dateFormat = SimpleDateFormat(&quot;MMMM yyyy&quot;, Locale.GERMAN)&#10;                                val monthYear = dateFormat.format(calendar.time)&#10;&#10;                                MonthlyTrend(&#10;                                    monthYear = monthYear,&#10;                                    income = monthlyIncome,&#10;                                    expenses = monthlyExpenses,&#10;                                    balance = monthlyIncome - monthlyExpenses,&#10;                                    transactionCount = monthTransactions.size&#10;                                )&#10;                            }&#10;                            .sortedWith(compareByDescending&lt;MonthlyTrend&gt; { trend -&gt;&#10;                                SimpleDateFormat(&#10;                                    &quot;MMMM yyyy&quot;,&#10;                                    Locale.GERMAN&#10;                                ).parse(trend.monthYear)?.time ?: 0&#10;                            })&#10;                            .take(12)&#10;&#10;                        if (monthlyTrends.isEmpty()) {&#10;                            _monthlyTrendsState.value = UiState.Empty&#10;                        } else {&#10;                            _monthlyTrendsState.value = UiState.Success(monthlyTrends)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _monthlyTrendsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing an overview of statistics for the current month.&#10; *&#10; * @property monthlyIncome Total income for the month.&#10; * @property monthlyExpenses Total expenses for the month.&#10; * @property monthlyBalance Net balance for the month.&#10; * @property avgDailyExpenses Average daily expenses for the month.&#10; * @property avgWeeklyExpenses Average weekly expenses for the month.&#10; * @property totalTransactions Total number of transactions overall.&#10; * @property monthlyTransactions Number of transactions in the current month.&#10; */&#10;data class StatisticsOverview(&#10;    val monthlyIncome: Double,&#10;    val monthlyExpenses: Double,&#10;    val monthlyBalance: Double,&#10;    val avgDailyExpenses: Double,&#10;    val avgWeeklyExpenses: Double,&#10;    val totalTransactions: Int,&#10;    val monthlyTransactions: Int&#10;)&#10;&#10;/**&#10; * Data class representing statistics for a single transaction category.&#10; *&#10; * @property category The transaction category.&#10; * @property amount The total amount spent in this category.&#10; * @property transactionCount The number of transactions in this category.&#10; */&#10;data class CategoryStats(&#10;    val category: TransactionCategory,&#10;    val amount: Double,&#10;    val transactionCount: Int&#10;)&#10;&#10;/**&#10; * Data class representing financial trends for a single month.&#10; *&#10; * @property monthYear The month and year (e.g., &quot;January 2024&quot;).&#10; * @property income Total income for the month.&#10; * @property expenses Total expenses for the month.&#10; * @property balance Net balance for the month.&#10; * @property transactionCount Number of transactions in the month.&#10; */&#10;data class MonthlyTrend(&#10;    val monthYear: String,&#10;    val income: Double,&#10;    val expenses: Double,&#10;    val balance: Double,&#10;    val transactionCount: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/TransactionViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/viewmodel/TransactionViewModel.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Receipt&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.data.repository.TransactionRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;import java.util.Calendar&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing transactions and related financial data.&#10; *&#10; * Handles loading, creating, updating, and deleting transactions,&#10; * as well as managing categories, form state, and financial summaries.&#10; * Provides UI state flows for transactions and summaries.&#10; *&#10; * @property transactionRepository Repository for transaction data access.&#10; * @property categoryRepository Repository for category data access.&#10; */&#10;@HiltViewModel&#10;class TransactionViewModel @Inject constructor(&#10;    private val transactionRepository: TransactionRepository,&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;    private val _transactionsState = MutableStateFlow&lt;UiState&lt;List&lt;Transaction&gt;&gt;&gt;(UiState.Loading)&#10;    val transactionsState: StateFlow&lt;UiState&lt;List&lt;Transaction&gt;&gt;&gt; = _transactionsState&#10;&#10;    private val _categoriesState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt;(UiState.Loading)&#10;    val categoriesState: StateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt; = _categoriesState&#10;&#10;    private val _selectedTransaction = MutableStateFlow&lt;UiState&lt;Transaction&gt;&gt;(UiState.Loading)&#10;    val selectedTransaction: StateFlow&lt;UiState&lt;Transaction&gt;&gt; = _selectedTransaction&#10;&#10;    private val _transactionFormState = MutableStateFlow(TransactionFormState())&#10;    val transactionFormState: StateFlow&lt;TransactionFormState&gt; = _transactionFormState&#10;&#10;    private val _financialSummary = MutableStateFlow&lt;UiState&lt;FinancialSummary&gt;&gt;(UiState.Loading)&#10;    val financialSummary: StateFlow&lt;UiState&lt;FinancialSummary&gt;&gt; = _financialSummary&#10;&#10;    init {&#10;        loadTransactions()&#10;        loadCategories()&#10;        loadFinancialSummary()&#10;    }&#10;&#10;    private fun loadTransactions() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _transactionsState.value = UiState.Loading&#10;                transactionRepository.allTransactionsWithCategory&#10;                    .catch { e -&gt;&#10;                        _transactionsState.value =&#10;                            UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;                    }&#10;                    .collect { transactions -&gt;&#10;                        if (transactions.isEmpty()) {&#10;                            _transactionsState.value = UiState.Empty&#10;                        } else {&#10;                            _transactionsState.value = UiState.Success(transactions)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _transactionsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadTransactionById(id: Long) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _selectedTransaction.value = UiState.Loading&#10;                transactionRepository.getTransactionById(id)&#10;                    .catch { e -&gt;&#10;                        _selectedTransaction.value =&#10;                            UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;                    }&#10;                    .collect { transaction -&gt;&#10;                        _selectedTransaction.value = UiState.Success(transaction)&#10;                    }&#10;            } catch (e: Exception) {&#10;                _selectedTransaction.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _categoriesState.value = UiState.Loading&#10;                categoryRepository.allCategories&#10;                    .catch { e -&gt;&#10;                        _categoriesState.value =&#10;                            UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;                    }&#10;                    .collect { categories -&gt;&#10;                        if (categories.isEmpty()) {&#10;                            _categoriesState.value = UiState.Empty&#10;                        } else {&#10;                            _categoriesState.value = UiState.Success(categories)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _categoriesState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadFinancialSummary() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _financialSummary.value = UiState.Loading&#10;&#10;                transactionRepository.getTotalExpensesByMonth().collect { expenses -&gt;&#10;                    transactionRepository.getTotalIncomeByMonth().collect { income -&gt;&#10;                        val balance = income - expenses&#10;&#10;                        _financialSummary.value = UiState.Success(&#10;                            FinancialSummary(&#10;                                totalIncome = income,&#10;                                totalExpenses = expenses,&#10;                                balance = balance&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _financialSummary.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createTransaction() {&#10;        viewModelScope.launch {&#10;            val formState = _transactionFormState.value&#10;&#10;            if (!validateTransactionForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _transactionFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(&quot;Category cannot be null&quot;)&#10;&#10;                val transaction = Transaction(&#10;                    amount = formState.amount,&#10;                    title = formState.title,&#10;                    description = formState.description,&#10;                    category = category,&#10;                    date = formState.date,&#10;                    isExpense = formState.isExpense&#10;                )&#10;&#10;                transactionRepository.insertTransaction(transaction)&#10;&#10;                resetFormState()&#10;&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateTransaction(id: Long) {&#10;        viewModelScope.launch {&#10;            val formState = _transactionFormState.value&#10;&#10;            if (!validateTransactionForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _transactionFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(&quot;Category cannot be null&quot;)&#10;&#10;                val transaction = Transaction(&#10;                    id = id,&#10;                    amount = formState.amount,&#10;                    title = formState.title,&#10;                    description = formState.description,&#10;                    category = category,&#10;                    date = formState.date,&#10;                    isExpense = formState.isExpense&#10;                )&#10;&#10;                transactionRepository.updateTransaction(transaction)&#10;&#10;                resetFormState()&#10;&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;&#10;                loadTransactionById(id)&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteTransaction(transaction: Transaction) {&#10;        viewModelScope.launch {&#10;            try {&#10;                transactionRepository.deleteTransaction(transaction)&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateAmount(amount: Double) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(&#10;            amount = amount,&#10;            amountError = if (amount &lt;= 0) context.getString(R.string.error_amount_greater_zero) else null&#10;        )&#10;    }&#10;&#10;    fun updateTitle(title: String) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(&#10;            title = title,&#10;            titleError = if (title.isBlank()) context.getString(R.string.error_title_empty) else null&#10;        )&#10;    }&#10;&#10;    fun updateDescription(description: String) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(description = description)&#10;    }&#10;&#10;    fun updateSelectedCategory(category: TransactionCategory) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(&#10;            selectedCategory = category,&#10;            categoryError = null&#10;        )&#10;    }&#10;&#10;    fun updateDate(date: Long) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(date = date)&#10;    }&#10;&#10;    fun updateIsExpense(isExpense: Boolean) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(isExpense = isExpense)&#10;    }&#10;&#10;    fun initFormWithTransaction(transaction: Transaction) {&#10;        _transactionFormState.value = TransactionFormState(&#10;            amount = transaction.amount,&#10;            title = transaction.title,&#10;            description = transaction.description,&#10;            selectedCategory = transaction.category,&#10;            date = transaction.date,&#10;            isExpense = transaction.isExpense&#10;        )&#10;    }&#10;&#10;    private fun validateTransactionForm(): Boolean {&#10;        val formState = _transactionFormState.value&#10;        var isValid = true&#10;&#10;        var updatedFormState = formState&#10;&#10;        if (formState.amount &lt;= 0) {&#10;            updatedFormState = updatedFormState.copy(&#10;                amountError = context.getString(R.string.error_amount_greater_zero)&#10;            )&#10;            isValid = false&#10;        }&#10;&#10;        if (formState.title.isBlank()) {&#10;            updatedFormState = updatedFormState.copy(&#10;                titleError = context.getString(R.string.error_title_empty)&#10;            )&#10;            isValid = false&#10;        }&#10;&#10;        if (formState.selectedCategory == null) {&#10;            updatedFormState = updatedFormState.copy(&#10;                categoryError = context.getString(R.string.error_select_category)&#10;            )&#10;            isValid = false&#10;        }&#10;&#10;        _transactionFormState.value = updatedFormState&#10;&#10;        return isValid&#10;    }&#10;&#10;    fun saveReceiptAsTransactions(receipt: Receipt) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val defaultCategory = getDefaultCategory()&#10;&#10;                receipt.items.forEach { item -&gt;&#10;                    val transaction = Transaction(&#10;                        id = 0,&#10;                        amount = item.price,&#10;                        title = item.name,&#10;                        description = context.getString(&#10;                            R.string.transactions_from_receipt,&#10;                            receipt.storeName ?: context.getString(R.string.common_unknown)&#10;                        ),&#10;                        category = defaultCategory,&#10;                        date = System.currentTimeMillis(),&#10;                        isExpense = true&#10;                    )&#10;                    transactionRepository.insertTransaction(transaction)&#10;                }&#10;&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun getDefaultCategory(): TransactionCategory {&#10;        return try {&#10;            val categories = categoryRepository.allCategories.first()&#10;            categories.firstOrNull()&#10;                ?: TransactionCategory(&#10;                    id = 1,&#10;                    name = context.getString(R.string.category_shopping),&#10;                    color = 0xFF4CAF50.toInt(),&#10;                    icon = 0&#10;                )&#10;        } catch (e: Exception) {&#10;            TransactionCategory(&#10;                id = 1,&#10;                name = context.getString(R.string.category_shopping),&#10;                color = 0xFF4CAF50.toInt(),&#10;                icon = 0&#10;            )&#10;        }&#10;    }&#10;&#10;    fun refreshFinancialSummary() {&#10;        viewModelScope.launch {&#10;            try {&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;                // Handle error&#10;            }&#10;        }&#10;    }&#10;&#10;    fun refreshTransactions() {&#10;        loadTransactions()&#10;    }&#10;&#10;    fun addTransactionDirect(transaction: Transaction) {&#10;        viewModelScope.launch {&#10;            try {&#10;                transactionRepository.insertTransaction(transaction)&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetFormState() {&#10;        _transactionFormState.value = TransactionFormState()&#10;    }&#10;}&#10;&#10;&#10;data class TransactionFormState(&#10;    val amount: Double = 0.0,&#10;    val title: String = &quot;&quot;,&#10;    val description: String = &quot;&quot;,&#10;    val selectedCategory: TransactionCategory? = null,&#10;    val date: Long = Calendar.getInstance().timeInMillis,&#10;    val isExpense: Boolean = true,&#10;    val amountError: String? = null,&#10;    val titleError: String? = null,&#10;    val categoryError: String? = null&#10;)&#10;&#10;data class FinancialSummary(&#10;    val totalIncome: Double = 0.0,&#10;    val totalExpenses: Double = 0.0,&#10;    val balance: Double = 0.0&#10;)" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.viewmodel&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.data.model.Receipt&#10;import com.pixelpioneer.moneymaster.data.model.Transaction&#10;import com.pixelpioneer.moneymaster.data.model.TransactionCategory&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import com.pixelpioneer.moneymaster.data.repository.TransactionRepository&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;import java.util.Calendar&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for managing transactions and related financial data.&#10; *&#10; * Handles loading, creating, updating, and deleting transactions,&#10; * as well as managing categories, form state, and financial summaries.&#10; * Provides UI state flows for transactions and summaries.&#10; *&#10; * @property transactionRepository Repository for transaction data access.&#10; * @property categoryRepository Repository for category data access.&#10; * @property context Application context for accessing resources.&#10; */&#10;@HiltViewModel&#10;class TransactionViewModel @Inject constructor(&#10;    private val transactionRepository: TransactionRepository,&#10;    private val categoryRepository: CategoryRepository,&#10;    @ApplicationContext private val context: Context&#10;) : ViewModel() {&#10;    private val _transactionsState = MutableStateFlow&lt;UiState&lt;List&lt;Transaction&gt;&gt;&gt;(UiState.Loading)&#10;    val transactionsState: StateFlow&lt;UiState&lt;List&lt;Transaction&gt;&gt;&gt; = _transactionsState&#10;&#10;    private val _categoriesState =&#10;        MutableStateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt;(UiState.Loading)&#10;    val categoriesState: StateFlow&lt;UiState&lt;List&lt;TransactionCategory&gt;&gt;&gt; = _categoriesState&#10;&#10;    private val _selectedTransaction = MutableStateFlow&lt;UiState&lt;Transaction&gt;&gt;(UiState.Loading)&#10;    val selectedTransaction: StateFlow&lt;UiState&lt;Transaction&gt;&gt; = _selectedTransaction&#10;&#10;    private val _transactionFormState = MutableStateFlow(TransactionFormState())&#10;    val transactionFormState: StateFlow&lt;TransactionFormState&gt; = _transactionFormState&#10;&#10;    private val _financialSummary = MutableStateFlow&lt;UiState&lt;FinancialSummary&gt;&gt;(UiState.Loading)&#10;    val financialSummary: StateFlow&lt;UiState&lt;FinancialSummary&gt;&gt; = _financialSummary&#10;&#10;    init {&#10;        loadTransactions()&#10;        loadCategories()&#10;        loadFinancialSummary()&#10;    }&#10;&#10;    private fun loadTransactions() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _transactionsState.value = UiState.Loading&#10;                transactionRepository.allTransactionsWithCategory&#10;                    .catch { e -&gt;&#10;                        _transactionsState.value =&#10;                            UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;                    }&#10;                    .collect { transactions -&gt;&#10;                        if (transactions.isEmpty()) {&#10;                            _transactionsState.value = UiState.Empty&#10;                        } else {&#10;                            _transactionsState.value = UiState.Success(transactions)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _transactionsState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadTransactionById(id: Long) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _selectedTransaction.value = UiState.Loading&#10;                transactionRepository.getTransactionById(id)&#10;                    .catch { e -&gt;&#10;                        _selectedTransaction.value =&#10;                            UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;                    }&#10;                    .collect { transaction -&gt;&#10;                        _selectedTransaction.value = UiState.Success(transaction)&#10;                    }&#10;            } catch (e: Exception) {&#10;                _selectedTransaction.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCategories() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _categoriesState.value = UiState.Loading&#10;                categoryRepository.allCategories&#10;                    .catch { e -&gt;&#10;                        _categoriesState.value =&#10;                            UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;                    }&#10;                    .collect { categories -&gt;&#10;                        if (categories.isEmpty()) {&#10;                            _categoriesState.value = UiState.Empty&#10;                        } else {&#10;                            _categoriesState.value = UiState.Success(categories)&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _categoriesState.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadFinancialSummary() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _financialSummary.value = UiState.Loading&#10;&#10;                transactionRepository.getTotalExpensesByMonth().collect { expenses -&gt;&#10;                    transactionRepository.getTotalIncomeByMonth().collect { income -&gt;&#10;                        val balance = income - expenses&#10;&#10;                        _financialSummary.value = UiState.Success(&#10;                            FinancialSummary(&#10;                                totalIncome = income,&#10;                                totalExpenses = expenses,&#10;                                balance = balance&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _financialSummary.value =&#10;                    UiState.Error(e.message ?: context.getString(R.string.error_unknown))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createTransaction() {&#10;        viewModelScope.launch {&#10;            val formState = _transactionFormState.value&#10;&#10;            if (!validateTransactionForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _transactionFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(&quot;Category cannot be null&quot;)&#10;&#10;                val transaction = Transaction(&#10;                    amount = formState.amount,&#10;                    title = formState.title,&#10;                    description = formState.description,&#10;                    category = category,&#10;                    date = formState.date,&#10;                    isExpense = formState.isExpense&#10;                )&#10;&#10;                transactionRepository.insertTransaction(transaction)&#10;&#10;                resetFormState()&#10;&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateTransaction(id: Long) {&#10;        viewModelScope.launch {&#10;            val formState = _transactionFormState.value&#10;&#10;            if (!validateTransactionForm()) {&#10;                return@launch&#10;            }&#10;&#10;            try {&#10;                val category = _transactionFormState.value.selectedCategory&#10;                    ?: throw IllegalStateException(&quot;Category cannot be null&quot;)&#10;&#10;                val transaction = Transaction(&#10;                    id = id,&#10;                    amount = formState.amount,&#10;                    title = formState.title,&#10;                    description = formState.description,&#10;                    category = category,&#10;                    date = formState.date,&#10;                    isExpense = formState.isExpense&#10;                )&#10;&#10;                transactionRepository.updateTransaction(transaction)&#10;&#10;                resetFormState()&#10;&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;&#10;                loadTransactionById(id)&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteTransaction(transaction: Transaction) {&#10;        viewModelScope.launch {&#10;            try {&#10;                transactionRepository.deleteTransaction(transaction)&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateAmount(amount: Double) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(&#10;            amount = amount,&#10;            amountError = if (amount &lt;= 0) context.getString(R.string.error_amount_greater_zero) else null&#10;        )&#10;    }&#10;&#10;    fun updateTitle(title: String) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(&#10;            title = title,&#10;            titleError = if (title.isBlank()) context.getString(R.string.error_title_empty) else null&#10;        )&#10;    }&#10;&#10;    fun updateDescription(description: String) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(description = description)&#10;    }&#10;&#10;    fun updateSelectedCategory(category: TransactionCategory) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(&#10;            selectedCategory = category,&#10;            categoryError = null&#10;        )&#10;    }&#10;&#10;    fun updateDate(date: Long) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(date = date)&#10;    }&#10;&#10;    fun updateIsExpense(isExpense: Boolean) {&#10;        _transactionFormState.value = _transactionFormState.value.copy(isExpense = isExpense)&#10;    }&#10;&#10;    fun initFormWithTransaction(transaction: Transaction) {&#10;        _transactionFormState.value = TransactionFormState(&#10;            amount = transaction.amount,&#10;            title = transaction.title,&#10;            description = transaction.description,&#10;            selectedCategory = transaction.category,&#10;            date = transaction.date,&#10;            isExpense = transaction.isExpense&#10;        )&#10;    }&#10;&#10;    private fun validateTransactionForm(): Boolean {&#10;        val formState = _transactionFormState.value&#10;        var isValid = true&#10;&#10;        var updatedFormState = formState&#10;&#10;        if (formState.amount &lt;= 0) {&#10;            updatedFormState = updatedFormState.copy(&#10;                amountError = context.getString(R.string.error_amount_greater_zero)&#10;            )&#10;            isValid = false&#10;        }&#10;&#10;        if (formState.title.isBlank()) {&#10;            updatedFormState = updatedFormState.copy(&#10;                titleError = context.getString(R.string.error_title_empty)&#10;            )&#10;            isValid = false&#10;        }&#10;&#10;        if (formState.selectedCategory == null) {&#10;            updatedFormState = updatedFormState.copy(&#10;                categoryError = context.getString(R.string.error_select_category)&#10;            )&#10;            isValid = false&#10;        }&#10;&#10;        _transactionFormState.value = updatedFormState&#10;&#10;        return isValid&#10;    }&#10;&#10;    fun saveReceiptAsTransactions(receipt: Receipt) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val defaultCategory = getDefaultCategory()&#10;&#10;                receipt.items.forEach { item -&gt;&#10;                    val transaction = Transaction(&#10;                        id = 0,&#10;                        amount = item.price,&#10;                        title = item.name,&#10;                        description = context.getString(&#10;                            R.string.transactions_from_receipt,&#10;                            receipt.storeName ?: context.getString(R.string.common_unknown)&#10;                        ),&#10;                        category = defaultCategory,&#10;                        date = System.currentTimeMillis(),&#10;                        isExpense = true&#10;                    )&#10;                    transactionRepository.insertTransaction(transaction)&#10;                }&#10;&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun getDefaultCategory(): TransactionCategory {&#10;        return try {&#10;            val categories = categoryRepository.allCategories.first()&#10;            categories.firstOrNull()&#10;                ?: TransactionCategory(&#10;                    id = 1,&#10;                    name = context.getString(R.string.category_shopping),&#10;                    color = 0xFF4CAF50.toInt(),&#10;                    icon = 0&#10;                )&#10;        } catch (e: Exception) {&#10;            TransactionCategory(&#10;                id = 1,&#10;                name = context.getString(R.string.category_shopping),&#10;                color = 0xFF4CAF50.toInt(),&#10;                icon = 0&#10;            )&#10;        }&#10;    }&#10;&#10;    fun refreshFinancialSummary() {&#10;        viewModelScope.launch {&#10;            try {&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;                // Handle error&#10;            }&#10;        }&#10;    }&#10;&#10;    fun refreshTransactions() {&#10;        loadTransactions()&#10;    }&#10;&#10;    fun addTransactionDirect(transaction: Transaction) {&#10;        viewModelScope.launch {&#10;            try {&#10;                transactionRepository.insertTransaction(transaction)&#10;                loadTransactions()&#10;                loadFinancialSummary()&#10;            } catch (e: Exception) {&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetFormState() {&#10;        _transactionFormState.value = TransactionFormState()&#10;    }&#10;}&#10;&#10;/**&#10; * State holder for the transaction form.&#10; *&#10; * @property amount The transaction amount entered by the user.&#10; * @property title The title of the transaction.&#10; * @property description The description of the transaction.&#10; * @property selectedCategory The selected category for the transaction.&#10; * @property date The date of the transaction.&#10; * @property isExpense Whether the transaction is an expense.&#10; * @property amountError Error message for the amount field, if any.&#10; * @property titleError Error message for the title field, if any.&#10; * @property categoryError Error message for the category field, if any.&#10; */&#10;data class TransactionFormState(&#10;    val amount: Double = 0.0,&#10;    val title: String = &quot;&quot;,&#10;    val description: String = &quot;&quot;,&#10;    val selectedCategory: TransactionCategory? = null,&#10;    val date: Long = Calendar.getInstance().timeInMillis,&#10;    val isExpense: Boolean = true,&#10;    val amountError: String? = null,&#10;    val titleError: String? = null,&#10;    val categoryError: String? = null&#10;)&#10;&#10;/**&#10; * Data class representing a summary of financial data.&#10; *&#10; * @property totalIncome The total income.&#10; * @property totalExpenses The total expenses.&#10; * @property balance The net balance (income minus expenses).&#10; */&#10;data class FinancialSummary(&#10;    val totalIncome: Double = 0.0,&#10;    val totalExpenses: Double = 0.0,&#10;    val balance: Double = 0.0&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>