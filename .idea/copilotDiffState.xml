<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/MainActivity.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.compose.rememberNavController&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import com.pixelpioneer.moneymaster.ui.navigation.MoneyMasterNavHost&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.SettingsViewModel&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import kotlinx.coroutines.launch&#10;import timber.log.Timber&#10;import javax.inject.Inject&#10;&#10;/**&#10; * The main entry point of the MoneyMaster application.&#10; *&#10; * Sets up the Compose UI, applies the app theme, and initializes the navigation host.&#10; */&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;&#10;    @Inject&#10;    lateinit var remoteConfigManager: RemoteConfigManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        lifecycleScope.launch {&#10;            val success = remoteConfigManager.fetchAndActivate()&#10;            Timber.tag(&quot;MainActivity&quot;).d(&quot;Remote Config loaded: $success&quot;)&#10;&#10;            val debugInfo = remoteConfigManager.getDebugInfo()&#10;            Timber.tag(&quot;MainActivity&quot;).d(&quot;Remote Config Debug: $debugInfo&quot;)&#10;        }&#10;&#10;        setContent {&#10;            val settingsViewModel: SettingsViewModel = hiltViewModel()&#10;            val settingsState by settingsViewModel.state.collectAsState()&#10;&#10;            MoneyMasterTheme(&#10;                darkTheme = settingsState.darkMode&#10;            ) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    MoneyMasterNavHost(navController = navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.compose.rememberNavController&#10;import com.pixelpioneer.moneymaster.core.network.RemoteConfigManager&#10;import com.pixelpioneer.moneymaster.ui.navigation.MoneyMasterNavHost&#10;import com.pixelpioneer.moneymaster.ui.theme.MoneyMasterTheme&#10;import com.pixelpioneer.moneymaster.ui.viewmodel.SettingsViewModel&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import kotlinx.coroutines.launch&#10;import timber.log.Timber&#10;import javax.inject.Inject&#10;&#10;/**&#10; * The main entry point of the MoneyMaster application.&#10; *&#10; * Sets up the Compose UI, applies the app theme, and initializes the navigation host.&#10; */&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;&#10;    @Inject&#10;    lateinit var remoteConfigManager: RemoteConfigManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        lifecycleScope.launch {&#10;            val success = remoteConfigManager.fetchAndActivate()&#10;            Timber.tag(&quot;MainActivity&quot;).d(&quot;Remote Config loaded: $success&quot;)&#10;&#10;            val debugInfo = remoteConfigManager.getDebugInfo()&#10;            Timber.tag(&quot;MainActivity&quot;).d(&quot;Remote Config Debug: $debugInfo&quot;)&#10;        }&#10;&#10;        setContent {&#10;            val settingsViewModel: SettingsViewModel = hiltViewModel()&#10;            val settingsState by settingsViewModel.state.collectAsState()&#10;&#10;            MoneyMasterTheme(&#10;                darkTheme = settingsState.darkMode&#10;            ) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    MoneyMasterNavHost(navController = navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/AppModule.kt" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import com.pixelpioneer.moneymaster.core.initialization.AppInitializer&#10;import com.pixelpioneer.moneymaster.core.initialization.CategoryInitializer&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.multibindings.IntoSet&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    @Provides&#10;    @IntoSet&#10;    @Singleton&#10;    fun provideCategoryInitializer(categoryRepository: CategoryRepository): AppInitializer {&#10;        return CategoryInitializer(categoryRepository)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>