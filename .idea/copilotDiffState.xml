<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/core/di/AppModule.kt" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.core.di&#10;&#10;import com.pixelpioneer.moneymaster.core.initialization.AppInitializer&#10;import com.pixelpioneer.moneymaster.core.initialization.CategoryInitializer&#10;import com.pixelpioneer.moneymaster.data.repository.CategoryRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.multibindings.IntoSet&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    @Provides&#10;    @IntoSet&#10;    @Singleton&#10;    fun provideCategoryInitializer(categoryRepository: CategoryRepository): AppInitializer {&#10;        return CategoryInitializer(categoryRepository)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/CryptoAssetsScreenContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/pixelpioneer/moneymaster/ui/components/features/crypto/CryptoAssetsScreenContent.kt" />
              <option name="originalContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.ui.components.common.cards.PriceChart&#10;import com.pixelpioneer.moneymaster.ui.theme.expenseColor&#10;import com.pixelpioneer.moneymaster.ui.theme.incomeColor&#10;&#10;/**&#10; * Main content composable for the crypto assets screen.&#10; *&#10; * Displays a row of asset chips, selected asset details, price chart, and market data.&#10; *&#10; * @param cryptoAssetsState The UI state containing the list of crypto assets.&#10; * @param cryptoHistoryState The UI state containing the price history for the selected asset.&#10; * @param selectedAsset The currently selected asset, or null if none is selected.&#10; * @param onAssetSelected Callback invoked when an asset is selected.&#10; */&#10;@Composable&#10;fun CryptoAssetsScreenContent(&#10;    cryptoAssetsState: UiState&lt;List&lt;Asset&gt;&gt;,&#10;    cryptoHistoryState: UiState&lt;List&lt;HistoryDataPoint&gt;&gt;,&#10;    selectedAsset: Asset?,&#10;    onAssetSelected: (Asset) -&gt; Unit&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        when (val assetsState = cryptoAssetsState) {&#10;            is UiState.Success -&gt; {&#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(assetsState.data) { asset -&gt;&#10;                        AssetChip(&#10;                            asset = asset,&#10;                            isSelected = selectedAsset?.id == asset.id,&#10;                            onClick = { onAssetSelected(asset) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Loading -&gt; {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(60.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                Text(&#10;                    text = stringResource(R.string.error_loading_assets, assetsState.message),&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                Text(stringResource(R.string.empty_crypto_data))&#10;            }&#10;        }&#10;&#10;        selectedAsset?.let { asset -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = asset.name,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = asset.symbol,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;&#10;                        Column(&#10;                            horizontalAlignment = Alignment.End&#10;                        ) {&#10;                            Text(&#10;                                text = FormatUtils.formatCurrency(&#10;                                    asset.priceUsd.toDoubleOrNull() ?: 0.0&#10;                                ),&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            val changePercent = asset.changePercent24Hr.toDoubleOrNull() ?: 0.0&#10;                            Text(&#10;                                text = &quot;${if (changePercent &gt;= 0) &quot;+&quot; else &quot;&quot;}${&#10;                                    FormatUtils.formatPercentage(&#10;                                        changePercent / 100,&#10;                                        2&#10;                                    )&#10;                                }&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = if (changePercent &gt;= 0) incomeColor() else expenseColor(),&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    when (val historyState = cryptoHistoryState) {&#10;                        is UiState.Success -&gt; {&#10;                            PriceChart(&#10;                                historyData = historyState.data,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp)&#10;                            )&#10;                        }&#10;&#10;                        is UiState.Loading -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                CircularProgressIndicator()&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Error -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = stringResource(&#10;                                        R.string.error_loading_chart,&#10;                                        historyState.message&#10;                                    ),&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Empty -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(stringResource(R.string.empty_chart_data))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.crypto_market_data),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_market_cap),&#10;                        FormatUtils.formatCurrency(asset.marketCapUsd.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_volume_24h),&#10;                        FormatUtils.formatCurrency(asset.volumeUsd24Hr.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(stringResource(R.string.crypto_rank), &quot;#${asset.rank}&quot;)&#10;                    asset.maxSupply?.let { maxSupply -&gt;&#10;                        InfoRow(&#10;                            stringResource(R.string.crypto_max_supply),&#10;                            FormatUtils.formatCurrency(maxSupply.toDoubleOrNull() ?: 0.0)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.pixelpioneer.moneymaster.ui.components.features.crypto&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.pixelpioneer.moneymaster.R&#10;import com.pixelpioneer.moneymaster.core.util.FormatUtils&#10;import com.pixelpioneer.moneymaster.core.util.UiState&#10;import com.pixelpioneer.moneymaster.data.model.Asset&#10;import com.pixelpioneer.moneymaster.data.model.HistoryDataPoint&#10;import com.pixelpioneer.moneymaster.ui.components.common.cards.PriceChart&#10;import com.pixelpioneer.moneymaster.ui.theme.expenseColor&#10;import com.pixelpioneer.moneymaster.ui.theme.incomeColor&#10;&#10;/**&#10; * Main content composable for the crypto assets screen.&#10; *&#10; * Displays a row of asset chips, selected asset details, price chart, and market data.&#10; *&#10; * @param cryptoAssetsState The UI state containing the list of crypto assets.&#10; * @param cryptoHistoryState The UI state containing the price history for the selected asset.&#10; * @param selectedAsset The currently selected asset, or null if none is selected.&#10; * @param onAssetSelected Callback invoked when an asset is selected.&#10; */&#10;@Composable&#10;fun CryptoAssetsScreenContent(&#10;    cryptoAssetsState: UiState&lt;List&lt;Asset&gt;&gt;,&#10;    cryptoHistoryState: UiState&lt;List&lt;HistoryDataPoint&gt;&gt;,&#10;    selectedAsset: Asset?,&#10;    onAssetSelected: (Asset) -&gt; Unit&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        when (val assetsState = cryptoAssetsState) {&#10;            is UiState.Success -&gt; {&#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(assetsState.data) { asset -&gt;&#10;                        AssetChip(&#10;                            asset = asset,&#10;                            isSelected = selectedAsset?.id == asset.id,&#10;                            onClick = { onAssetSelected(asset) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            is UiState.Loading -&gt; {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(60.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;&#10;            is UiState.Error -&gt; {&#10;                Text(&#10;                    text = stringResource(R.string.error_loading_assets, assetsState.message),&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;&#10;            is UiState.Empty -&gt; {&#10;                Text(stringResource(R.string.empty_crypto_data))&#10;            }&#10;        }&#10;&#10;        selectedAsset?.let { asset -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = asset.name,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = asset.symbol,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;&#10;                        Column(&#10;                            horizontalAlignment = Alignment.End&#10;                        ) {&#10;                            Text(&#10;                                text = FormatUtils.formatCurrency(&#10;                                    asset.priceUsd.toDoubleOrNull() ?: 0.0&#10;                                ),&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            val changePercent = asset.changePercent24Hr.toDoubleOrNull() ?: 0.0&#10;                            Text(&#10;                                text = &quot;${if (changePercent &gt;= 0) &quot;+&quot; else &quot;&quot;}${&#10;                                    FormatUtils.formatPercentage(&#10;                                        changePercent / 100,&#10;                                        2&#10;                                    )&#10;                                }&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = if (changePercent &gt;= 0) incomeColor() else expenseColor(),&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    when (val historyState = cryptoHistoryState) {&#10;                        is UiState.Success -&gt; {&#10;                            PriceChart(&#10;                                historyData = historyState.data,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp)&#10;                            )&#10;                        }&#10;&#10;                        is UiState.Loading -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                CircularProgressIndicator()&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Error -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = stringResource(&#10;                                        R.string.error_loading_chart,&#10;                                        historyState.message&#10;                                    ),&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        is UiState.Empty -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(stringResource(R.string.empty_chart_data))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.crypto_market_data),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_market_cap),&#10;                        FormatUtils.formatCurrency(asset.marketCapUsd.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(&#10;                        stringResource(R.string.crypto_volume_24h),&#10;                        FormatUtils.formatCurrency(asset.volumeUsd24Hr.toDoubleOrNull() ?: 0.0)&#10;                    )&#10;                    InfoRow(stringResource(R.string.crypto_rank), &quot;#${asset.rank}&quot;)&#10;                    asset.maxSupply?.let { maxSupply -&gt;&#10;                        InfoRow(&#10;                            stringResource(R.string.crypto_max_supply),&#10;                            FormatUtils.formatCurrency(maxSupply.toDoubleOrNull() ?: 0.0)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>